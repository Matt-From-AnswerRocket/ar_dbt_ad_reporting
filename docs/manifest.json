{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.0", "generated_at": "2021-12-29T21:16:39.433485Z", "invocation_id": "b688df13-d7e4-4724-977f-554111c6f423", "env": {}, "project_id": "9bf57d857f8bb3abf75f1b334ad30f3c", "user_id": "57178664-37b2-4047-9572-68ec8b488cd7", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_line_item_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_line_item_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "twitter_line_item_history_data.csv", "original_file_path": "seeds/twitter_line_item_history_data.csv", "name": "twitter_line_item_history_data", "alias": "twitter_line_item_history_data", "checksum": {"name": "sha256", "checksum": "b22edb0c149ef5e3c14f3e5bea6d34447db94ad0f89d00bb074b0f72b2044fee"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.0151072, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"twitter_line_item_history_data\""}, "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_campaign_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "linkedin_campaign_group_history_data.csv", "original_file_path": "seeds/linkedin_campaign_group_history_data.csv", "name": "linkedin_campaign_group_history_data", "alias": "linkedin_campaign_group_history_data", "checksum": {"name": "sha256", "checksum": "a3e2f426d56d779f1bcb3013b2d4862e7a8203c0372c4892e598165fedab1744"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0259042, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"linkedin_campaign_group_history_data\""}, "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "account_id": "bigint", "ad_set_id": "bigint", "campaign_id": "bigint", "creative_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_ad_history_data.csv", "original_file_path": "seeds/facebook_ads_ad_history_data.csv", "name": "facebook_ads_ad_history_data", "alias": "facebook_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "25b7f0feecd46923840679a47529564155c8763cead441b31aa21611c7c7a701"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ad_set_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "creative_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0275881, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_ad_history_data\""}, "seed.ad_reporting_integration_tests.linkedin_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "linkedin_account_history_data.csv", "original_file_path": "seeds/linkedin_account_history_data.csv", "name": "linkedin_account_history_data", "alias": "linkedin_account_history_data", "checksum": {"name": "sha256", "checksum": "e00ceef7b82a006c9fb463fe928e58f1d0bdaeddb0541508934c62d0142084fb"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "created_at": 1640812557.0295238, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"linkedin_account_history_data\""}, "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "linkedin_campaign_history_data.csv", "original_file_path": "seeds/linkedin_campaign_history_data.csv", "name": "linkedin_campaign_history_data", "alias": "linkedin_campaign_history_data", "checksum": {"name": "sha256", "checksum": "063da5a71a42213130cf9f604668ddf280be6c4695956520418390ce6f3d1e87"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.031188, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"linkedin_campaign_history_data\""}, "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_group_id": "bigint", "campaign_id": "bigint", "external_customer_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_final_url_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_final_url_performance_data.csv", "original_file_path": "seeds/google_ads_final_url_performance_data.csv", "name": "google_ads_final_url_performance_data", "alias": "google_ads_final_url_performance_data", "checksum": {"name": "sha256", "checksum": "6e58d77f59b6bf4e9c721a8e5eadd66ae0a9c1a73f055606d703e3abac1e10ea"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.032865, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_final_url_performance_data\""}, "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_squad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_squad_history_data.csv", "original_file_path": "seeds/snapchat_ad_squad_history_data.csv", "name": "snapchat_ad_squad_history_data", "alias": "snapchat_ad_squad_history_data", "checksum": {"name": "sha256", "checksum": "0e83ca691f2153480e7b63173f1c7ed8c38c0dc247d41a6f2fd46afc1e5963b1"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.034484, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_squad_history_data\""}, "seed.ad_reporting_integration_tests.twitter_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "twitter_campaign_history_data.csv", "original_file_path": "seeds/twitter_campaign_history_data.csv", "name": "twitter_campaign_history_data", "alias": "twitter_campaign_history_data", "checksum": {"name": "sha256", "checksum": "92a9f18103e025ab35199a59f71a0eac8f5a7517a7a6f0bd0c9367b43e0045ed"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.0361972, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"twitter_campaign_history_data\""}, "seed.ad_reporting_integration_tests.linkedin_creative_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "linkedin_creative_history_data.csv", "original_file_path": "seeds/linkedin_creative_history_data.csv", "name": "linkedin_creative_history_data", "alias": "linkedin_creative_history_data", "checksum": {"name": "sha256", "checksum": "7c80b5be327ce6a841cc2c17fec12807e8fa09a4a9622d50e0a4768293deee3b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "created_at": 1640812557.0377731, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"linkedin_creative_history_data\""}, "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_account_history_data.csv", "original_file_path": "seeds/microsoft_ads_account_history_data.csv", "name": "microsoft_ads_account_history_data", "alias": "microsoft_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "2de08fa142cabec96d61b080a788ea37294b7983743727a44410737713510ea7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.039361, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_account_history_data\""}, "seed.ad_reporting_integration_tests.google_ads_account_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_account_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_account_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_account_data.csv", "original_file_path": "seeds/google_ads_account_data.csv", "name": "google_ads_account_data", "alias": "google_ads_account_data", "checksum": {"name": "sha256", "checksum": "e823a57ffb0a5e5243c5c32ada9ccd16f017845bb4f0e122a96d6205ba42cb1e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.0408902, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_account_data\""}, "seed.ad_reporting_integration_tests.pin_promotion_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ID": "bigint", "AD_GROUP_ID": "bigint", "PIN_ID": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "pin_promotion_history_data"], "unique_id": "seed.ad_reporting_integration_tests.pin_promotion_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "pin_promotion_history_data.csv", "original_file_path": "seeds/pin_promotion_history_data.csv", "name": "pin_promotion_history_data", "alias": "pin_promotion_history_data", "checksum": {"name": "sha256", "checksum": "9dd8d1c6e9c07f7eaee989bbfb1eec635928eb2f9f0c4fade7fe720e36b6710f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "AD_GROUP_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "PIN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0424871, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"pin_promotion_history_data\""}, "seed.ad_reporting_integration_tests.google_ads_ad_final_url_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_id": "bigint", "ad_group_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_final_url_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_final_url_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_final_url_history_data.csv", "original_file_path": "seeds/google_ads_ad_final_url_history_data.csv", "name": "google_ads_ad_final_url_history_data", "alias": "google_ads_ad_final_url_history_data", "checksum": {"name": "sha256", "checksum": "3f72f5b168cc74feb4f096a5ec12342459951375c49234ff7707d3f4fccb1024"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0443861, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_ad_final_url_history_data\""}, "seed.ad_reporting_integration_tests.advertiser_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "varchar", "owner_user_id": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "advertiser_history_data"], "unique_id": "seed.ad_reporting_integration_tests.advertiser_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "advertiser_history_data.csv", "original_file_path": "seeds/advertiser_history_data.csv", "name": "advertiser_history_data", "alias": "advertiser_history_data", "checksum": {"name": "sha256", "checksum": "444f8986f6dd4c7e924771d50b82bf5e11fe3eec7c95023d51a6292481c39c44"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}", "owner_user_id": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1640812557.046038, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"advertiser_history_data\""}, "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"page_link": "varchar", "template_page_link": "varchar", "id": "bigint", "account_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_creative_history_data.csv", "original_file_path": "seeds/facebook_ads_creative_history_data.csv", "name": "facebook_ads_creative_history_data", "alias": "facebook_ads_creative_history_data", "checksum": {"name": "path", "checksum": "seeds/facebook_ads_creative_history_data.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"page_link": "{{ 'string' if target.name in ['bigquery','spark'] else 'varchar' }}", "template_page_link": "{{ 'string' if target.name in ['bigquery','spark'] else 'varchar' }}", "id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.047681, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_creative_history_data\""}, "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"tweet_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_promoted_tweet_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "twitter_promoted_tweet_history_data.csv", "original_file_path": "seeds/twitter_promoted_tweet_history_data.csv", "name": "twitter_promoted_tweet_history_data", "alias": "twitter_promoted_tweet_history_data", "checksum": {"name": "sha256", "checksum": "c86c8537ad1859822edecc33c3770ff89482970d11e866b85f35a0882a2725ca"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"tweet_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.049408, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"twitter_promoted_tweet_history_data\""}, "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_promoted_tweet_report_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "twitter_promoted_tweet_report_data.csv", "original_file_path": "seeds/twitter_promoted_tweet_report_data.csv", "name": "twitter_promoted_tweet_report_data", "alias": "twitter_promoted_tweet_report_data", "checksum": {"name": "sha256", "checksum": "a2e76c3f8c81841095f0c4108cb566e2f51c06729dc83cb34da22db21308f519"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.051009, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"twitter_promoted_tweet_report_data\""}, "seed.ad_reporting_integration_tests.google_ads_ad_stats_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"customer_id": "bigint", "ad_id": "bigint", "campaign_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_stats_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_stats_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_stats_data.csv", "original_file_path": "seeds/google_ads_ad_stats_data.csv", "name": "google_ads_ad_stats_data", "alias": "google_ads_ad_stats_data", "checksum": {"name": "sha256", "checksum": "57f977d336374f41000bdce5167f77a877dea7d21f144475dcbaad2c9e407c54"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.052751, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_ad_stats_data\""}, "seed.ad_reporting_integration_tests.ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ID": "bigint", "CAMPAIGN_ID": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "ad_group_history_data.csv", "original_file_path": "seeds/ad_group_history_data.csv", "name": "ad_group_history_data", "alias": "ad_group_history_data", "checksum": {"name": "sha256", "checksum": "ef23777af254918465840a752893efe60d8eb29387c96fab44635175c5cee6e6"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "CAMPAIGN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.054406, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"ad_group_history_data\""}, "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "account_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_campaign_history_data.csv", "original_file_path": "seeds/facebook_ads_campaign_history_data.csv", "name": "facebook_ads_campaign_history_data", "alias": "facebook_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "0fc07559cd2c4d2d19ee30743b3d37bc40891faa670fac0ecf53b2c2df66bee5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.056051, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_campaign_history_data\""}, "seed.ad_reporting_integration_tests.twitter_tweet_url_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"tweet_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_tweet_url_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_tweet_url_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "twitter_tweet_url_data.csv", "original_file_path": "seeds/twitter_tweet_url_data.csv", "name": "twitter_tweet_url_data", "alias": "twitter_tweet_url_data", "checksum": {"name": "sha256", "checksum": "58b1b79764a2e24bf990e3940fc1766f4d5331631d872a3cac60ad9c56b3d943"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"tweet_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.057743, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"twitter_tweet_url_data\""}, "seed.ad_reporting_integration_tests.campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ID": "bigint", "ADVERTISER_ID": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "campaign_history_data.csv", "original_file_path": "seeds/campaign_history_data.csv", "name": "campaign_history_data", "alias": "campaign_history_data", "checksum": {"name": "sha256", "checksum": "d657af253fbb2a81e291847f8c89351367e0e8dbc627fec7570a504320eff4be"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ADVERTISER_ID": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1640812557.059415, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"campaign_history_data\""}, "seed.ad_reporting_integration_tests.google_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "base_campaign_id": "bigint", "customer_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_campaign_history_data.csv", "original_file_path": "seeds/google_ads_campaign_history_data.csv", "name": "google_ads_campaign_history_data", "alias": "google_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "82df483d8e75d5ae32ebe80450b4238bb724f61d2ea883c275097d398d5623be"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.061652, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_campaign_history_data\""}, "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"day": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "linkedin_ad_analytics_by_creative_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "linkedin_ad_analytics_by_creative_data.csv", "original_file_path": "seeds/linkedin_ad_analytics_by_creative_data.csv", "name": "linkedin_ad_analytics_by_creative_data", "alias": "linkedin_ad_analytics_by_creative_data", "checksum": {"name": "sha256", "checksum": "90a1a324923b47307989ab10594f537f8c45262ffcdfd8ffbe09bae7f05760f7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"day": "timestamp"}}, "created_at": 1640812557.063369, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"linkedin_ad_analytics_by_creative_data\""}, "seed.ad_reporting_integration_tests.snapchat_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_history_data.csv", "original_file_path": "seeds/snapchat_ad_history_data.csv", "name": "snapchat_ad_history_data", "alias": "snapchat_ad_history_data", "checksum": {"name": "sha256", "checksum": "839c0910ff6ff3cff2580bd9144223132dd1d87f003aeea329e47ba858a2dc23"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.0649989, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_history_data\""}, "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "name": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_account_history_data.csv", "original_file_path": "seeds/facebook_ads_account_history_data.csv", "name": "facebook_ads_account_history_data", "alias": "facebook_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "92f318955a317f351b928ce94de43eae07f29dc3cadbd0f1a26e62fdba1dc4b1"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "name": "{{ 'string' if target.name in ['bigquery','spark'] else 'varchar' }}"}}, "created_at": 1640812557.066587, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_account_history_data\""}, "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "campaign_id": "bigint", "base_ad_group_id": "bigint", "base_campaign_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_group_history_data.csv", "original_file_path": "seeds/google_ads_ad_group_history_data.csv", "name": "google_ads_ad_group_history_data", "alias": "google_ads_ad_group_history_data", "checksum": {"name": "sha256", "checksum": "016b74b30b9c7723887f27134a5ba7ee40e363a316c692c299bc0209e983def5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.068236, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_ad_group_history_data\""}, "seed.ad_reporting_integration_tests.snapchat_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_campaign_history_data.csv", "original_file_path": "seeds/snapchat_campaign_history_data.csv", "name": "snapchat_campaign_history_data", "alias": "snapchat_campaign_history_data", "checksum": {"name": "sha256", "checksum": "640eb2ec082938ad70c430a6b3441711f6fed19eb6e28d7622f03294e92e5b70"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.069995, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_campaign_history_data\""}, "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_id": "bigint", "account_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_basic_ad_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_basic_ad_data.csv", "original_file_path": "seeds/facebook_ads_basic_ad_data.csv", "name": "facebook_ads_basic_ad_data", "alias": "facebook_ads_basic_ad_data", "checksum": {"name": "sha256", "checksum": "0c4ee00ee3a1d9f3a5ccd76384a745b8dddf21eaa9f73ea0f9eabcc3df2968a4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.071579, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_basic_ad_data\""}, "seed.ad_reporting_integration_tests.google_ads_click_performance_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_group_id": "bigint", "campaign_id": "bigint", "criteria_id": "bigint", "external_customer_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_click_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_click_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_click_performance_data.csv", "original_file_path": "seeds/google_ads_click_performance_data.csv", "name": "google_ads_click_performance_data", "alias": "google_ads_click_performance_data", "checksum": {"name": "sha256", "checksum": "97e9bb010087b2022acfead14656b057cca0e26628841ddc3ca07d9682fc78ec"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "criteria_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.073367, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_click_performance_data\""}, "seed.ad_reporting_integration_tests.twitter_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "twitter_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "twitter_account_history_data.csv", "original_file_path": "seeds/twitter_account_history_data.csv", "name": "twitter_account_history_data", "alias": "twitter_account_history_data", "checksum": {"name": "sha256", "checksum": "0901eba818791fcdb5ceae038d0d2dc86f889a4e8c5535a6797ff60858c0877d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.075113, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"twitter_account_history_data\""}, "seed.ad_reporting_integration_tests.snapchat_creative_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_creative_history_data.csv", "original_file_path": "seeds/snapchat_creative_history_data.csv", "name": "snapchat_creative_history_data", "alias": "snapchat_creative_history_data", "checksum": {"name": "sha256", "checksum": "0b004197010e194cabc6308d7aa7db9fe0f5debd8bdd66ea5dd9bf6d21b3a785"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.076669, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_creative_history_data\""}, "seed.ad_reporting_integration_tests.google_ads_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "ad_group_id": "bigint", "base_adgroup_id": "bigint", "base_campaign_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_ad_history_data.csv", "original_file_path": "seeds/google_ads_ad_history_data.csv", "name": "google_ads_ad_history_data", "alias": "google_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "518266252229e38298fdf7bffb0686d65b024c78796631e73194df0dcdbe8a66"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_adgroup_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "base_campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.078519, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_ad_history_data\""}, "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "account_id": "bigint", "campaign_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "facebook_ads_ad_set_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "facebook_ads_ad_set_history_data.csv", "original_file_path": "seeds/facebook_ads_ad_set_history_data.csv", "name": "facebook_ads_ad_set_history_data", "alias": "facebook_ads_ad_set_history_data", "checksum": {"name": "sha256", "checksum": "fa5715da546f5758e2191b632fd1f333e30c2b20b8f2c4f3077591a529f51551"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.080163, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_ad_set_history_data\""}, "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_hourly_report_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_hourly_report_data.csv", "original_file_path": "seeds/snapchat_ad_hourly_report_data.csv", "name": "snapchat_ad_hourly_report_data", "alias": "snapchat_ad_hourly_report_data", "checksum": {"name": "sha256", "checksum": "1f2f808727dc7d9d45ba0ac10bba717da6454110d8fb242ee54986b8b60d7f9d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"date": "timestamp"}}, "created_at": 1640812557.0818062, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_hourly_report_data\""}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"account_id": "bigint", "campaign_id": "bigint", "ad_group_id": "bigint", "ad_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_performance_daily_report_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_performance_daily_report_data.csv", "original_file_path": "seeds/microsoft_ads_ad_performance_daily_report_data.csv", "name": "microsoft_ads_ad_performance_daily_report_data", "alias": "microsoft_ads_ad_performance_daily_report_data", "checksum": {"name": "sha256", "checksum": "0b3585b6ed6c3d18c8c892a3a446231fd7d6b32b470f55f933214dfb7df0af91"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"account_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0834591, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_ad_performance_daily_report_data\""}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "ad_group_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_history_data.csv", "original_file_path": "seeds/microsoft_ads_ad_history_data.csv", "name": "microsoft_ads_ad_history_data", "alias": "microsoft_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "46fa2ec5ff1aa5ce0476d8a3c1c06f3fa502c1a46606bff897dfe99a06bfda35"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0851252, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_ad_history_data\""}, "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_ad_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_ad_account_history_data.csv", "original_file_path": "seeds/snapchat_ad_account_history_data.csv", "name": "snapchat_ad_account_history_data", "alias": "snapchat_ad_account_history_data", "checksum": {"name": "sha256", "checksum": "0e1f3a58ee6a4863bb59fbd30c286606f0de77040fbb2903ab312e5d248454cb"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.0868769, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_account_history_data\""}, "seed.ad_reporting_integration_tests.pin_promotion_report_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"PIN_PROMOTION_ID": "bigint", "AD_GROUP_ID": "bigint", "CAMPAIGN_ID": "bigint", "ADVERTISER_ID": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "pin_promotion_report_data"], "unique_id": "seed.ad_reporting_integration_tests.pin_promotion_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "pin_promotion_report_data.csv", "original_file_path": "seeds/pin_promotion_report_data.csv", "name": "pin_promotion_report_data", "alias": "pin_promotion_report_data", "checksum": {"name": "sha256", "checksum": "4aa4efcd681cab55f7e446763ed01bb5100e470b613842b655c4960674b864ac"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"PIN_PROMOTION_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "AD_GROUP_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "CAMPAIGN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ADVERTISER_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.088516, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"pin_promotion_report_data\""}, "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ad_group_id": "bigint", "campaign_id": "bigint", "external_customer_id": "bigint", "id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "google_ads_criteria_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "google_ads_criteria_performance_data.csv", "original_file_path": "seeds/google_ads_criteria_performance_data.csv", "name": "google_ads_criteria_performance_data", "alias": "google_ads_criteria_performance_data", "checksum": {"name": "sha256", "checksum": "be2dab9389efd247f0a9b6e75d28ccbe242446dee9969b8353515b1fd096d628"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.090236, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"google_ads_criteria_performance_data\""}, "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "snapchat_creative_url_tag_history_data"], "unique_id": "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "snapchat_creative_url_tag_history_data.csv", "original_file_path": "seeds/snapchat_creative_url_tag_history_data.csv", "name": "snapchat_creative_url_tag_history_data", "alias": "snapchat_creative_url_tag_history_data", "checksum": {"name": "sha256", "checksum": "3aeaa866b995d0a735ff68d813641b1893121a6ec8733385e30e52d3e8f864fc"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.091842, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"snapchat_creative_url_tag_history_data\""}, "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_campaign_history_data.csv", "original_file_path": "seeds/microsoft_ads_campaign_history_data.csv", "name": "microsoft_ads_campaign_history_data", "alias": "microsoft_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "c5b3e24279ba9df8926fe7e4c58165b0f8fa09172b222cebc2202866cb266e19"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812557.093424, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_campaign_history_data\""}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "campaign_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_group_history_data.csv", "original_file_path": "seeds/microsoft_ads_ad_group_history_data.csv", "name": "microsoft_ads_ad_group_history_data", "alias": "microsoft_ads_ad_group_history_data", "checksum": {"name": "sha256", "checksum": "f63ae5a2597243253d5396752c86a4784abfc3543ba36fe9affeeec09f0cb3c8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1640812557.0952058, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_ad_group_history_data\""}, "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_group_history') }}\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_group_id','modified_timestamp']) }} as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_microsoft_ads", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_group_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_group_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_group_history.sql", "name": "stg_microsoft_ads__ad_group_history", "alias": "stg_microsoft_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "81a7e9df750513ce63a8e599b4ff78de1871a81287524b327945ac5a3f1bbe86"}, "tags": [], "refs": [["microsoft_ads_ad_group_history_data"]], "sources": [], "description": "Each record in this table represents a version of a Microsoft ad group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_version_id": {"name": "ad_group_version_id", "description": "A unique ID for the version of an ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_microsoft_ads", "materialized": "table"}, "created_at": 1640812558.962969, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_ad_group_history_data\"\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(ad_group_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '') as \n    varchar\n)) as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_group_history\""}, "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_performance_daily_report')}}\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_microsoft_ads", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_performance_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_performance_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__ad_performance_daily_report.sql", "name": "stg_microsoft_ads__ad_performance_daily_report", "alias": "stg_microsoft_ads__ad_performance_daily_report", "checksum": {"name": "sha256", "checksum": "145e193000e5fc77f910f3fe9e3f47104b54389a6da7c9796c82867d0cbe9b92"}, "tags": [], "refs": [["microsoft_ads_ad_performance_daily_report_data"]], "sources": [], "description": "Each record in this table represents the daily performance of a Microsoft ad.", "columns": {"date_day": {"name": "date_day", "description": "The date of the ad performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency that spend and other metrics are reported in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of advertising spend that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_performance_daily_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_microsoft_ads", "materialized": "table"}, "created_at": 1640812558.971987, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_ad_performance_daily_report_data\"\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_performance_daily_report\""}, "model.microsoft_ads_source.stg_microsoft_ads__ad_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_history') }}\n\n{% if var('microsoft_auto_tagging_enabled', false) %}\n), campaigns as (\n    \n    select * \n    from {{ ref('stg_microsoft_ads__campaign_history') }}\n\n), ad_groups as (\n    \n    select *\n    from {{ ref('stg_microsoft_ads__ad_group_history') }}\n{% endif %}\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        fields.*,\n        {{ dbt_utils.split_part('fields.final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('fields.final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('fields.final_url') }} as url_path,\n\n        {% if var('microsoft_auto_tagging_enabled', false) %}\n\n        coalesce( {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_source') }} , 'bing') as utm_source,\n        coalesce( {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_medium') }}, 'cpc') as utm_medium,\n        coalesce( {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_campaign') }}, campaigns.campaign_name) as utm_campaign,\n        coalesce( {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_content') }}, ad_groups.ad_group_name) as utm_content,\n\n        {% else %}\n\n        {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_content') }} as utm_content,\n\n        {% endif %}\n\n        {{ dbt_utils.get_url_parameter('fields.final_url', 'utm_term') }} as utm_term\n    from fields\n\n    {% if var('microsoft_auto_tagging_enabled', false) %}\n    left join ad_groups\n        on ad_groups.ad_group_id = fields.ad_group_id\n\n    left join campaigns\n    on campaigns.campaign_id = ad_groups.campaign_id\n        and coalesce(campaigns.is_most_recent_version, true)\n\n    {% endif %}\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_id','modified_timestamp']) }} as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_microsoft_ads", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__ad_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_history.sql", "name": "stg_microsoft_ads__ad_history", "alias": "stg_microsoft_ads__ad_history", "checksum": {"name": "sha256", "checksum": "4f7be088ee40e361ab3a2183d122b531485f536b5d035c7e0ca82344f0d54914"}, "tags": [], "refs": [["microsoft_ads_ad_history_data"]], "sources": [], "description": "Each record in this table represents a version of a Microsoft ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_version_id": {"name": "ad_version_id", "description": "A unique ID for the version of an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_microsoft_ads", "materialized": "table"}, "created_at": 1640812558.96842, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_ad_history_data\"\n\n\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        fields.*,\n        \n\n    split_part(\n        fields.final_url,\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        fields.final_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        fields.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        fields.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        fields.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        fields.final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n\n        \n\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        fields.final_url,\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_source,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        fields.final_url,\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_medium,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        fields.final_url,\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_campaign,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        fields.final_url,\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_content,\n\n        \n\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        fields.final_url,\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_term\n    from fields\n\n    \n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(ad_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '') as \n    varchar\n)) as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_history\""}, "model.microsoft_ads_source.stg_microsoft_ads__account_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('account_history') }}\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['account_id','modified_timestamp']) }} as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_microsoft_ads", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__account_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__account_history.sql", "original_file_path": "models/stg_microsoft_ads__account_history.sql", "name": "stg_microsoft_ads__account_history", "alias": "stg_microsoft_ads__account_history", "checksum": {"name": "sha256", "checksum": "19867b7e9b8fc35feaff5ed55f0f759fc4ed2817d6852bdd611fbbed8906a579"}, "tags": [], "refs": [["microsoft_ads_account_history_data"]], "sources": [], "description": "Each record in this table represents a version of a Microsoft account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_version_id": {"name": "account_version_id", "description": "A unique ID for the version of an account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_microsoft_ads", "materialized": "table"}, "created_at": 1640812558.960213, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_account_history_data\"\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(account_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '') as \n    varchar\n)) as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__account_history\""}, "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('campaign_history') }}\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','modified_timestamp']) }} as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_microsoft_ads", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__campaign_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "stg_microsoft_ads__campaign_history.sql", "original_file_path": "models/stg_microsoft_ads__campaign_history.sql", "name": "stg_microsoft_ads__campaign_history", "alias": "stg_microsoft_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "362c1e62ce15b237e40d5f8c4e6e1c5d42b008ef5c554141250aec06ca272c14"}, "tags": [], "refs": [["microsoft_ads_campaign_history_data"]], "sources": [], "description": "Each record in this table represents a version of a Microsoft campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_version_id": {"name": "campaign_version_id", "description": "A unique ID for the version of an campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads_source://models/stg_microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_microsoft_ads", "materialized": "table"}, "created_at": 1640812558.974735, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests\".\"microsoft_ads_campaign_history_data\"\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '') as \n    varchar\n)) as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__campaign_history\""}, "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "postgres", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "postgres/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/postgres/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "70cace2e3ae8fc0ddcedd55d1c54cc1da45c2e76da49436cf4c97f49ad387209"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": "target/compiled/facebook_ads_creative_history/models/postgres/stg_facebook_ads__carousel_media.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'postgres' | as_bool() }}"}, "created_at": 1640812559.001117, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"int__facebook_ads__carousel_media_prep\"\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__carousel_media\""}, "model.facebook_ads_creative_history.stg_facebook_ads__app_link": {"raw_sql": "with base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n\n), unnested_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    element->>'index' as index,\n    element->>'app_name' as app_name,\n    element->>'app_store_id' as app_store_id,\n    element->>'class' as class_name,\n    element->>'package' as package_name,\n    element->>'template_page' as template_page\n  from required_fields\n  left join lateral json_array_elements(template_app_link_spec_{{ app }}::json) as element on True\n\n{% endfor %}\n\n), unioned as (\n\n    select * from unnested_ios\n    union all\n    select * from unnested_iphone\n    union all\n    select * from unnested_ipad\n    union all\n    select * from unnested_android\n\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "postgres", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "postgres/stg_facebook_ads__app_link.sql", "original_file_path": "models/postgres/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "6f501e63d77dc22945873a8b199757bbabcf470434874f96317cb1c0a7114164"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": "target/compiled/facebook_ads_creative_history/models/postgres/stg_facebook_ads__app_link.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'postgres' | as_bool() }}"}, "created_at": 1640812559.000614, "compiled_sql": "with base as (\n\n  select *\n  from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\"\n\n), required_fields as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n\n\n), unnested_ios as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    'ios' as app_type,\n    element->>'index' as index,\n    element->>'app_name' as app_name,\n    element->>'app_store_id' as app_store_id,\n    element->>'class' as class_name,\n    element->>'package' as package_name,\n    element->>'template_page' as template_page\n  from required_fields\n  left join lateral json_array_elements(template_app_link_spec_ios::json) as element on True\n\n\n\n), unnested_ipad as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    'ipad' as app_type,\n    element->>'index' as index,\n    element->>'app_name' as app_name,\n    element->>'app_store_id' as app_store_id,\n    element->>'class' as class_name,\n    element->>'package' as package_name,\n    element->>'template_page' as template_page\n  from required_fields\n  left join lateral json_array_elements(template_app_link_spec_ipad::json) as element on True\n\n\n\n), unnested_android as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    'android' as app_type,\n    element->>'index' as index,\n    element->>'app_name' as app_name,\n    element->>'app_store_id' as app_store_id,\n    element->>'class' as class_name,\n    element->>'package' as package_name,\n    element->>'template_page' as template_page\n  from required_fields\n  left join lateral json_array_elements(template_app_link_spec_android::json) as element on True\n\n\n\n), unnested_iphone as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    'iphone' as app_type,\n    element->>'index' as index,\n    element->>'app_name' as app_name,\n    element->>'app_store_id' as app_store_id,\n    element->>'class' as class_name,\n    element->>'package' as package_name,\n    element->>'template_page' as template_page\n  from required_fields\n  left join lateral json_array_elements(template_app_link_spec_iphone::json) as element on True\n\n\n\n), unioned as (\n\n    select * from unnested_ios\n    union all\n    select * from unnested_iphone\n    union all\n    select * from unnested_ipad\n    union all\n    select * from unnested_android\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__app_link\""}, "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n), cleaned_json as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        replace(trim(url_tags::text, '\"'),'\\\\','')::json as cleaned_url_tags\n    from required_fields\n\n), unnested as (\n\n    select _fivetran_id, creative_id, url_tag_element\n    from cleaned_json\n    left join lateral json_array_elements(cleaned_url_tags) as url_tag_element on True\n    where cleaned_url_tags is not null\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tag_element->>'key' as key,\n        url_tag_element->>'value' as value,\n        url_tag_element->>'type' as type\n    from unnested\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "postgres", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "postgres/stg_facebook_ads__url_tag.sql", "original_file_path": "models/postgres/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "521d1a4ec6855942aa40e3855b4b1ee01bb520c270cf6a5bc34f9db68f7a8317"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": "target/compiled/facebook_ads_creative_history/models/postgres/stg_facebook_ads__url_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'postgres' | as_bool() }}"}, "created_at": 1640812559.00291, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\"\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n), cleaned_json as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        replace(trim(url_tags::text, '\"'),'\\\\','')::json as cleaned_url_tags\n    from required_fields\n\n), unnested as (\n\n    select _fivetran_id, creative_id, url_tag_element\n    from cleaned_json\n    left join lateral json_array_elements(cleaned_url_tags) as url_tag_element on True\n    where cleaned_url_tags is not null\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tag_element->>'key' as key,\n        url_tag_element->>'value' as value,\n        url_tag_element->>'type' as type\n    from unnested\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__url_tag\""}, "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        index,\n        element->>'key' as key,\n        element->>'value' as value\n    from base\n    inner join lateral json_array_elements(url_tags) as element on True\n\n)\n\nselect *\nfrom unnested", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "postgres", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "postgres/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/postgres/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "5dd50d771614d3f0b3b5e20910ec67e940ef56246155cc4111b72de4db47ba10"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": "target/compiled/facebook_ads_creative_history/models/postgres/stg_facebook_ads__carousel_media_url_tags.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'postgres' | as_bool() }}"}, "created_at": 1640812559.001624, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"int__facebook_ads__carousel_media_prep\"\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        index,\n        element->>'key' as key,\n        element->>'value' as value\n    from base\n    inner join lateral json_array_elements(url_tags) as element on True\n\n)\n\nselect *\nfrom unnested", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__carousel_media_url_tags\""}, "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption,\n        object_story_link_data_description,\n        object_story_link_data_link,\n        object_story_link_data_message\n    from base\n    where object_story_link_data_child_attachments is not null\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption,\n        object_story_link_data_description as description,\n        object_story_link_data_message as message,\n        element->>'link' as link,\n        element->'url_tags' as url_tags,\n        row_number() over (partition by _fivetran_id, creative_id) as index\n    from required_fields\n    left join lateral json_array_elements(object_story_link_data_child_attachments::json) as element on True\n\n)\n\nselect *\nfrom unnested", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "postgres", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "postgres/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/postgres/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "bfca0acaa2c6f45b691b5bd7c7868e6977b8c4ad29f777326e4f36ced7005715"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_creative_history/models/postgres/int__facebook_ads__carousel_media_prep.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'postgres' | as_bool() }}"}, "created_at": 1640812557.2825, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\"\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption,\n        object_story_link_data_description,\n        object_story_link_data_link,\n        object_story_link_data_message\n    from base\n    where object_story_link_data_child_attachments is not null\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption,\n        object_story_link_data_description as description,\n        object_story_link_data_message as message,\n        element->>'link' as link,\n        element->'url_tags' as url_tags,\n        row_number() over (partition by _fivetran_id, creative_id) as index\n    from required_fields\n    left join lateral json_array_elements(object_story_link_data_child_attachments::json) as element on True\n\n)\n\nselect *\nfrom unnested", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"int__facebook_ads__carousel_media_prep\""}, "model.facebook_ads_creative_history.stg_facebook_ads__asset_feed_spec_link_url": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        nullif(elements->>'display_url','') as display_url,\n        nullif(elements->>'website_url','') as website_url,\n        row_number() over (partition by _fivetran_id) as index\n    from required_fields\n    left join lateral json_array_elements(asset_feed_spec_link_urls::json) as elements on True\n\n)\n\nselect *\nfrom unnested", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "postgres", "stg_facebook_ads__asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "postgres/stg_facebook_ads__asset_feed_spec_link_url.sql", "original_file_path": "models/postgres/stg_facebook_ads__asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__asset_feed_spec_link_url", "alias": "stg_facebook_ads__asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "645483c43f618b8ff1c6a43d3cfe3b849fa3140fcf85a46dbe30d77793b825ca"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_creative_history/models/postgres/stg_facebook_ads__asset_feed_spec_link_url.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'postgres' | as_bool() }}"}, "created_at": 1640812557.2844312, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\"\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        nullif(elements->>'display_url','') as display_url,\n        nullif(elements->>'website_url','') as website_url,\n        row_number() over (partition by _fivetran_id) as index\n    from required_fields\n    left join lateral json_array_elements(asset_feed_spec_link_urls::json) as elements on True\n\n)\n\nselect *\nfrom unnested", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__asset_feed_spec_link_url\""}, "model.twitter_ads.twitter__line_item_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('twitter__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        line_item_name,\n        line_item_id,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n), unique_id as (\n\n    select  \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','line_item_id']) }} as daily_line_item_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter__line_item_report"], "unique_id": "model.twitter_ads.twitter__line_item_report", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter__line_item_report.sql", "original_file_path": "models/twitter__line_item_report.sql", "name": "twitter__line_item_report", "alias": "twitter__line_item_report", "checksum": {"name": "sha256", "checksum": "b4747032b54810f802d9c4e4e9ace63279683bda99fc110fff2aaf9e598617a7"}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "description": "Each record represents the daily ad performance of each line item.", "columns": {"daily_line_item_id": {"name": "daily_line_item_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter__line_item_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1640812559.0949728, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        line_item_name,\n        line_item_id,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5\n\n), unique_id as (\n\n    select  \n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(line_item_id as \n    varchar\n), '') as \n    varchar\n)) as daily_line_item_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__line_item_report\""}, "model.twitter_ads.twitter__ad_adapter": {"raw_sql": "with accounts as (\n\n    select *\n    from {{ var('twitter_account_history') }}\n    where is_latest_version = True\n\n), campaigns as (\n\n    select *\n    from {{ var('twitter_campaign_history') }}\n    where is_latest_version = True\n\n), line_items as (\n\n    select *\n    from {{ var('twitter_line_item_history') }}\n    where is_latest_version = True\n\n), metrics as (\n\n    select *\n    from {{ var('twitter_promoted_tweet_report') }}\n\n), promoted_tweet as (\n\n    select *\n    from {{ var('twitter_promoted_tweet_history')}}\n    where is_latest_version = True\n\n), tweet_url as (\n\n    select *\n    from {{ var('twitter_tweet_url') }}\n\n), joined as (\n\n    select\n        metrics.date_day,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        line_items.name as line_item_name,\n        line_items.line_item_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        sum(metrics.spend) as spend,\n        sum(metrics.clicks) as clicks,\n        sum(metrics.url_clicks) as url_clicks,\n        sum(metrics.impressions) as impressions\n    from metrics\n    left join promoted_tweet\n        on metrics.promoted_tweet_id = promoted_tweet.promoted_tweet_id\n    left join tweet_url\n        on promoted_tweet.tweet_id = tweet_url.tweet_id\n    left join line_items\n        on promoted_tweet.line_item_id = line_items.line_item_id\n    left join campaigns\n        on line_items.campaign_id = campaigns.campaign_id\n    {{ dbt_utils.group_by(13) }}\n\n), unique_id as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','base_url','line_item_id','campaign_id']) }} as daily_ad_id\n    from joined\n\n)\n\nselect *\nfrom unique_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter__ad_adapter"], "unique_id": "model.twitter_ads.twitter__ad_adapter", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter__ad_adapter.sql", "original_file_path": "models/twitter__ad_adapter.sql", "name": "twitter__ad_adapter", "alias": "twitter__ad_adapter", "checksum": {"name": "sha256", "checksum": "73470c40c7680d6c072cfbbbd4e1bd64d0aa6d1790c84de32c8eb133f21f83f1"}, "tags": [], "refs": [["stg_twitter_ads__account_history"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__promoted_tweet_report"], ["stg_twitter_ads__promoted_tweet_history"], ["stg_twitter_ads__tweet_url"]], "sources": [], "description": "Each record represents the daily performance of a line item at the URL level.", "columns": {"daily_ad_id": {"name": "daily_ad_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter__ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1640812559.086231, "compiled_sql": "with accounts as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__account_history\"\n    where is_latest_version = True\n\n), campaigns as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__campaign_history\"\n    where is_latest_version = True\n\n), line_items as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__line_item_history\"\n    where is_latest_version = True\n\n), metrics as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_report\"\n\n), promoted_tweet as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_history\"\n    where is_latest_version = True\n\n), tweet_url as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__tweet_url\"\n\n), joined as (\n\n    select\n        metrics.date_day,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        line_items.name as line_item_name,\n        line_items.line_item_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        sum(metrics.spend) as spend,\n        sum(metrics.clicks) as clicks,\n        sum(metrics.url_clicks) as url_clicks,\n        sum(metrics.impressions) as impressions\n    from metrics\n    left join promoted_tweet\n        on metrics.promoted_tweet_id = promoted_tweet.promoted_tweet_id\n    left join tweet_url\n        on promoted_tweet.tweet_id = tweet_url.tweet_id\n    left join line_items\n        on promoted_tweet.line_item_id = line_items.line_item_id\n    left join campaigns\n        on line_items.campaign_id = campaigns.campaign_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13\n\n), unique_id as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(base_url as \n    varchar\n), '') || '-' || coalesce(cast(line_item_id as \n    varchar\n), '') || '-' || coalesce(cast(campaign_id as \n    varchar\n), '') as \n    varchar\n)) as daily_ad_id\n    from joined\n\n)\n\nselect *\nfrom unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__ad_adapter\""}, "model.twitter_ads.twitter__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('twitter__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n), unique_id as (\n\n    select  \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','campaign_id']) }} as daily_campaign_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_twitter_ads", "fqn": ["twitter_ads", "twitter__campaign_report"], "unique_id": "model.twitter_ads.twitter__campaign_report", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "twitter__campaign_report.sql", "original_file_path": "models/twitter__campaign_report.sql", "name": "twitter__campaign_report", "alias": "twitter__campaign_report", "checksum": {"name": "sha256", "checksum": "e07bd94ffe796f110278a6463b2e6600c5418291dc9ee29d5bd4a290f2f21ddf"}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "description": "Each record represents the daily ad performance of each campaign.", "columns": {"daily_campaign_id": {"name": "daily_campaign_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads://models/twitter.yml", "compiled_path": "target/compiled/twitter_ads/models/twitter__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_ads", "materialized": "table"}, "created_at": 1640812559.090135, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3\n\n), unique_id as (\n\n    select  \n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(campaign_id as \n    varchar\n), '') as \n    varchar\n)) as daily_campaign_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__campaign_report\""}, "model.pinterest.pinterest_ads__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('pin_promotion_report') }}\n\n), pins as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_pin_promotion') }}\n\n), ad_groups as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_ad_group') }}\n\n), campaigns as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_campaign') }}\n\n), advertiser as (\n    \n    select *\n    from {{ ref('int_pinterest_ads__most_recent_advertiser') }} \n\n), joined as (\n\n    select \n        report.date_day as campaign_date,\n        advertiser.advertiser_id,\n        advertiser.name as advertiser_name,\n        report.ad_group_id,\n        report.campaign_id,\n        report.spend,\n        report.impressions,\n        report.clicks,\n        campaigns.name as campaign_name,\n        ad_groups.name as ad_group_name,\n        pins.destination_url,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term\n        {% for metric in var('pin_promotion_report_pass_through_metric') %}\n            , report.{{ metric }}\n        {% endfor %}\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join advertiser\n        on campaigns.advertiser_id = advertiser.advertiser_id\n\n), aggregates as (\n\n    select         \n        {{ dbt_utils.surrogate_key(\n            [\n                'campaign_date',\n                'campaign_id',\n                'ad_group_id',\n                'destination_url'\n            ]\n        ) }} as daily_id,\n\n        campaign_date,\n        advertiser_id,\n        advertiser_name,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        'pinterest ads' as platform,\n\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n        {% for metric in var('pin_promotion_report_pass_through_metric') %}\n            , sum({{ metric }}) as {{ metric }}\n        {% endfor %}\n    from joined\n    {{ dbt_utils.group_by(17) }}\n    \n)\n\nselect * \nfrom aggregates", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "model.pinterest.int_pinterest_ads__most_recent_ad_group", "model.pinterest.int_pinterest_ads__most_recent_campaign", "model.pinterest.int_pinterest_ads__most_recent_advertiser"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__ad_adapter"], "unique_id": "model.pinterest.pinterest_ads__ad_adapter", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__ad_adapter.sql", "original_file_path": "models/pinterest_ads__ad_adapter.sql", "name": "pinterest_ads__ad_adapter", "alias": "pinterest_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "b0be53b79323397786c86d6cd2242cd4204aa65993a70225121ec39c2cc7de9a"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"], ["int_pinterest_ads__most_recent_pin_promotion"], ["int_pinterest_ads__most_recent_ad_group"], ["int_pinterest_ads__most_recent_campaign"], ["int_pinterest_ads__most_recent_advertiser"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the ad group and url level.", "columns": {"daily_id": {"name": "daily_id", "description": "A unique key, a combination of the campaign, ad group and campaign date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The unique identifier of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_name": {"name": "advertiser_name", "description": "The name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Pinterest Ads", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1640812559.1213078, "compiled_sql": "with  __dbt__cte__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),  __dbt__cte__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),  __dbt__cte__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),  __dbt__cte__int_pinterest_ads__most_recent_advertiser as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),report as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_report\"\n\n), pins as (\n\n    select *\n    from __dbt__cte__int_pinterest_ads__most_recent_pin_promotion\n\n), ad_groups as (\n\n    select *\n    from __dbt__cte__int_pinterest_ads__most_recent_ad_group\n\n), campaigns as (\n\n    select *\n    from __dbt__cte__int_pinterest_ads__most_recent_campaign\n\n), advertiser as (\n    \n    select *\n    from __dbt__cte__int_pinterest_ads__most_recent_advertiser \n\n), joined as (\n\n    select \n        report.date_day as campaign_date,\n        advertiser.advertiser_id,\n        advertiser.name as advertiser_name,\n        report.ad_group_id,\n        report.campaign_id,\n        report.spend,\n        report.impressions,\n        report.clicks,\n        campaigns.name as campaign_name,\n        ad_groups.name as ad_group_name,\n        pins.destination_url,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term\n        \n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n    left join advertiser\n        on campaigns.advertiser_id = advertiser.advertiser_id\n\n), aggregates as (\n\n    select         \n        md5(cast(coalesce(cast(campaign_date as \n    varchar\n), '') || '-' || coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(ad_group_id as \n    varchar\n), '') || '-' || coalesce(cast(destination_url as \n    varchar\n), '') as \n    varchar\n)) as daily_id,\n\n        campaign_date,\n        advertiser_id,\n        advertiser_name,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        'pinterest ads' as platform,\n\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n        \n    from joined\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n    \n)\n\nselect * \nfrom aggregates", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "sql": " __dbt__cte__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}, {"id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "sql": " __dbt__cte__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}, {"id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "sql": " __dbt__cte__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}, {"id": "model.pinterest.int_pinterest_ads__most_recent_advertiser", "sql": " __dbt__cte__int_pinterest_ads__most_recent_advertiser as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_adapter\""}, "model.pinterest.pinterest_ads__campaign_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter') }}\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n        {% for metric in var('pin_promotion_report_pass_through_metric') %}\n            , sum({{ metric }}) as {{ metric }}\n        {% endfor %}\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__campaign_ad_report"], "unique_id": "model.pinterest.pinterest_ads__campaign_ad_report", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__campaign_ad_report.sql", "original_file_path": "models/pinterest_ads__campaign_ad_report.sql", "name": "pinterest_ads__campaign_ad_report", "alias": "pinterest_ads__campaign_ad_report", "checksum": {"name": "sha256", "checksum": "5d08949b6155dc5b94a0ef7ccae29012334146628ef667538a60f46d55449957"}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__campaign_ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1640812559.127053, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_adapter\"\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n        \n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__campaign_ad_report\""}, "model.pinterest.pinterest_ads__ad_group_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter') }}\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n        {% for metric in var('pin_promotion_report_pass_through_metric') %}\n            , sum({{ metric }}) as {{ metric }}\n        {% endfor %}\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "pinterest_ads__ad_group_ad_report"], "unique_id": "model.pinterest.pinterest_ads__ad_group_ad_report", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "pinterest_ads__ad_group_ad_report.sql", "original_file_path": "models/pinterest_ads__ad_group_ad_report.sql", "name": "pinterest_ads__ad_group_ad_report", "alias": "pinterest_ads__ad_group_ad_report", "checksum": {"name": "sha256", "checksum": "d48880289ea25985bb3ed822f7a54793aa2a5576b3847132cfcaf636360ecc04"}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/pinterest.yml", "compiled_path": "target/compiled/pinterest/models/pinterest_ads__ad_group_ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "table"}, "created_at": 1640812559.1245172, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_adapter\"\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n        \n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_group_ad_report\""}, "model.pinterest.int_pinterest_ads__most_recent_campaign": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('campaign_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_campaign"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_campaign.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_campaign.sql", "name": "int_pinterest_ads__most_recent_campaign", "alias": "int_pinterest_ads__most_recent_campaign", "checksum": {"name": "sha256", "checksum": "9dec8bee1a362714ea373056a154c08c35dde732de1bad36901cba59823a9d3a"}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "description": "", "columns": {"campaign_id": {"name": "campaign_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_campaign.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "ephemeral"}, "created_at": 1640812559.132298, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.pinterest.int_pinterest_ads__most_recent_advertiser": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('advertiser_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_advertiser"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_advertiser", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_advertiser.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_advertiser.sql", "name": "int_pinterest_ads__most_recent_advertiser", "alias": "int_pinterest_ads__most_recent_advertiser", "checksum": {"name": "sha256", "checksum": "18172c5a32e985d7406e241ec2addca75eba1070bb1b8f0168b7a1484978fe98"}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history"]], "sources": [], "description": "", "columns": {"advertiser_id": {"name": "advertiser_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_advertiser.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "ephemeral"}, "created_at": 1640812559.1340742, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.pinterest.int_pinterest_ads__most_recent_pin_promotion": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('pin_promotion_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_pin_promotion"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_pin_promotion.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_pin_promotion.sql", "name": "int_pinterest_ads__most_recent_pin_promotion", "alias": "int_pinterest_ads__most_recent_pin_promotion", "checksum": {"name": "sha256", "checksum": "88b7d30cb438e94648e7be8b789690c9aad37802a8b4e76bc105a3a729e2b3a6"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "description": "", "columns": {"pin_promotion_id": {"name": "pin_promotion_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_pin_promotion.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "ephemeral"}, "created_at": 1640812559.133188, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.pinterest.int_pinterest_ads__most_recent_ad_group": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_group_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "pinterest", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_pinterest", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_ad_group"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_ad_group.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_ad_group.sql", "name": "int_pinterest_ads__most_recent_ad_group", "alias": "int_pinterest_ads__most_recent_ad_group", "checksum": {"name": "sha256", "checksum": "e3ff2ad5deca2030f19bc439aef48cf5a6f36b2e4a2699229b5de4a581483eeb"}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "description": "", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_ad_group.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "pinterest", "materialized": "ephemeral"}, "created_at": 1640812559.131412, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.google_ads.google_ads__click_performance": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nwith base as (\n\n    select *\n    from {{ var('click_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        campaign_id,\n        ad_group_id,\n        criteria_id,\n        gclid,\n        row_number() over (partition by gclid order by date_day) as rn\n    from base\n\n), filtered as ( -- we've heard that sometimes duplicates gclids are an issue. This dedupe ensures no glcids are double counted.\n\n    select *\n    from fields\n    where gclid is not null \n    and rn = 1\n\n)\n\nselect * from filtered", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.google_ads_source.stg_google_ads__click_performance"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "google_ads__click_performance"], "unique_id": "model.google_ads.google_ads__click_performance", "package_name": "google_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "google_ads__click_performance.sql", "original_file_path": "models/google_ads__click_performance.sql", "name": "google_ads__click_performance", "alias": "google_ads__click_performance", "checksum": {"name": "sha256", "checksum": "215ddfc8714b2b8dc7125cd2f8893e5c31b87c8c76dab57052411f6c5d448fd4"}, "tags": [], "refs": [["stg_google_ads__click_performance"]], "sources": [], "description": "Each record represents a click, with a unique Google Click ID (gclid).", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rn": {"name": "rn", "description": "Row number partitioned by gclid and ordered by date_day which is used to dedupe possible double gclids.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/google_ads__click_performance.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table", "enabled": true}, "created_at": 1640812559.1631098, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__click_performance\"\n\n), fields as (\n\n    select\n        date_day,\n        campaign_id,\n        ad_group_id,\n        criteria_id,\n        gclid,\n        row_number() over (partition by gclid order by date_day) as rn\n    from base\n\n), filtered as ( -- we've heard that sometimes duplicates gclids are an issue. This dedupe ensures no glcids are double counted.\n\n    select *\n    from fields\n    where gclid is not null \n    and rn = 1\n\n)\n\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_google_ads\".\"google_ads__click_performance\""}, "model.google_ads.google_ads__url_ad_adapter": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nwith base as (\n\n    select *\n    from {{ var('final_url_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n\n        {% for metric in var('google_ads__url_passthrough_metrics') %}\n        , sum({{ metric }}) as {{ metric }}\n        {% endfor %}\n    from base\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "url_adwords", "google_ads__url_ad_adapter"], "unique_id": "model.google_ads.google_ads__url_ad_adapter", "package_name": "google_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "url_adwords/google_ads__url_ad_adapter.sql", "original_file_path": "models/url_adwords/google_ads__url_ad_adapter.sql", "name": "google_ads__url_ad_adapter", "alias": "google_ads__url_ad_adapter", "checksum": {"name": "sha256", "checksum": "b995a6979f6b30f91d9c15dc6eef69f0ea73913147d425d3c89137907b5d6942"}, "tags": [], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "description": "Each record in this table represents the daily performance of URLs at the ad group level.", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "Descriptive string for the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_type": {"name": "criteria_type", "description": "The type of the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads://models/google_ads.yml", "compiled_path": "target/compiled/google_ads/models/url_adwords/google_ads__url_ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table", "enabled": true}, "created_at": 1640812559.159904, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__final_url_performance\"\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n\n        \n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_google_ads\".\"google_ads__url_ad_adapter\""}, "model.google_ads.google_ads__criteria_ad_adapter": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nwith base as (\n\n    select *\n    from {{ var('criteria_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        criteria, \n        criteria_type,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n\n        {% for metric in var('google_ads__criteria_passthrough_metrics') %}\n        , sum({{ metric }}) as {{ metric }}\n        {% endfor %}\n    from base\n    {{ dbt_utils.group_by(9) }}\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__criteria_performance"]}, "config": {"enabled": true, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "criteria", "google_ads__criteria_ad_adapter"], "unique_id": "model.google_ads.google_ads__criteria_ad_adapter", "package_name": "google_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "criteria/google_ads__criteria_ad_adapter.sql", "original_file_path": "models/criteria/google_ads__criteria_ad_adapter.sql", "name": "google_ads__criteria_ad_adapter", "alias": "google_ads__criteria_ad_adapter", "checksum": {"name": "sha256", "checksum": "3530ad48d3f99461aa193dc5c071e37c8a3fcfddf2e0cbd8a0d00f30f7b3bbe5"}, "tags": [], "refs": [["stg_google_ads__criteria_performance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads/models/criteria/google_ads__criteria_ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table", "enabled": true}, "created_at": 1640812557.447417, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__criteria_performance\"\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        criteria, \n        criteria_type,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n\n        \n    from base\n    group by 1,2,3,4,5,6,7,8,9\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_google_ads\".\"google_ads__criteria_ad_adapter\""}, "model.linkedin_source.stg_linkedin__campaign_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__campaign_group_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__campaign_group_history_tmp')),\n                staging_columns=get_campaign_group_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_group_id','last_modified_at']) }} as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_campaign_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin__campaign_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "stg_linkedin__campaign_group_history"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_group_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin__campaign_group_history.sql", "original_file_path": "models/stg_linkedin__campaign_group_history.sql", "name": "stg_linkedin__campaign_group_history", "alias": "stg_linkedin__campaign_group_history", "checksum": {"name": "sha256", "checksum": "3e88f6e64c57280b2359b49d0d7e932e3ae856bf123bf10e60a4d6a7ecf5a3df"}, "tags": [], "refs": [["stg_linkedin__campaign_group_history_tmp"], ["stg_linkedin__campaign_group_history_tmp"]], "sources": [], "description": "", "columns": {"campaign_group_version_id": {"name": "campaign_group_version_id", "description": "A unique key, a combination of campaign_group_id and last_modified_at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin__campaign_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812559.1852942, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history_tmp\"\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as boolean) as \n    \n    backfilled\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_end\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_start\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(campaign_group_id as \n    varchar\n), '') || '-' || coalesce(cast(last_modified_at as \n    varchar\n), '') as \n    varchar\n)) as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history\""}, "model.linkedin_source.stg_linkedin__account_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__account_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['account_id','version_tag']) }} as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__account_history_tmp", "model.linkedin_source.stg_linkedin__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "stg_linkedin__account_history"], "unique_id": "model.linkedin_source.stg_linkedin__account_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin__account_history.sql", "original_file_path": "models/stg_linkedin__account_history.sql", "name": "stg_linkedin__account_history", "alias": "stg_linkedin__account_history", "checksum": {"name": "sha256", "checksum": "47289b364cf0c57c36e3148c7a6b35dbbea35b58c7aae107a3c0ad9de72a3df6"}, "tags": [], "refs": [["stg_linkedin__account_history_tmp"], ["stg_linkedin__account_history_tmp"]], "sources": [], "description": "", "columns": {"account_version_id": {"name": "account_version_id", "description": "A unique key, a combination of account_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812559.189037, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history_tmp\"\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    currency\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_campaign_optimization\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_creative_approval\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_creative_rejection\n    \n , \n    cast(null as boolean) as \n    \n    notified_on_end_of_campaign\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    reference\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    float\n) as \n    \n    total_budget_amount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    total_budget_currency_code\n    \n , \n    cast(null as \n    int\n) as \n    \n    total_budget_ends_at\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    version_tag\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(account_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '') as \n    varchar\n)) as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history\""}, "model.linkedin_source.stg_linkedin__ad_analytics_by_creative": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__ad_analytics_by_creative_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__ad_analytics_by_creative_tmp')),\n                staging_columns=get_ad_analytics_by_creative_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        creative_id,\n        day as date_day,\n        clicks, \n        impressions,\n        {% if var('linkedin__use_local_currency') %}\n        cost_in_local_currency as cost\n        {% else %}\n        cost_in_usd as cost\n        {% endif %}\n\n        {% if var('linkedin__passthrough_metrics') %}\n        , {{ var('linkedin__passthrough_metrics' )  | join(', ') }}\n        {% endif %}\n\n    from macro\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','creative_id']) }} as daily_creative_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_ad_analytics_by_creative_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "stg_linkedin__ad_analytics_by_creative"], "unique_id": "model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin__ad_analytics_by_creative.sql", "original_file_path": "models/stg_linkedin__ad_analytics_by_creative.sql", "name": "stg_linkedin__ad_analytics_by_creative", "alias": "stg_linkedin__ad_analytics_by_creative", "checksum": {"name": "sha256", "checksum": "7705505872a8686bbc35c5db90ebf83ff5fe1b507ab26f4243c6e35e99273b27"}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative_tmp"], ["stg_linkedin__ad_analytics_by_creative_tmp"]], "sources": [], "description": "", "columns": {"daily_creative_id": {"name": "daily_creative_id", "description": "A unique key, a combination of creative_id and date_day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin__ad_analytics_by_creative.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812559.170357, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative_tmp\"\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    action_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    ad_unit_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    approximate_unique_impressions\n    \n , \n    cast(null as \n    int\n) as \n    \n    card_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    card_impressions\n    \n , \n    cast(null as \n    int\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    comment_likes\n    \n , \n    cast(null as \n    int\n) as \n    \n    comments\n    \n , \n    cast(null as \n    int\n) as \n    \n    comments_likes\n    \n , \n    cast(null as \n    int\n) as \n    \n    company_page_clicks\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_value_in_local_currency\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    cost_in_local_currency\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    cost_in_usd\n    \n , \n    cast(null as \n    int\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    day\n    \n , \n    cast(null as \n    int\n) as \n    \n    external_website_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    external_website_post_click_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    external_website_post_view_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    follows\n    \n , \n    cast(null as \n    int\n) as \n    \n    full_screen_plays\n    \n , \n    cast(null as \n    int\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int\n) as \n    \n    landing_page_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    lead_generation_mail_contact_info_shares\n    \n , \n    cast(null as \n    int\n) as \n    \n    lead_generation_mail_interested_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    likes\n    \n , \n    cast(null as \n    int\n) as \n    \n    one_click_lead_form_opens\n    \n , \n    cast(null as \n    int\n) as \n    \n    one_click_leads\n    \n , \n    cast(null as \n    int\n) as \n    \n    opens\n    \n , \n    cast(null as \n    int\n) as \n    \n    other_engagements\n    \n , \n    cast(null as \n    int\n) as \n    \n    shares\n    \n , \n    cast(null as \n    int\n) as \n    \n    text_url_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    total_engagements\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_first_quartile_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_midpoint_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_starts\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_third_quartile_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_views\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_card_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_card_impressions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_comment_likes\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_comments\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_company_page_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_external_website_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_external_website_post_click_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_external_website_post_view_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_extrernal_website_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_extrernal_website_post_click_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_extrernal_website_post_view_conversions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_follows\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_full_screen_plays\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_impressions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_landing_page_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_likes\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_one_click_lead_form_opens\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_one_click_leads\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_other_engagements\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_shares\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_total_engagements\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_video_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_video_first_quartile_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_video_midpoint_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_video_starts\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_video_third_quartile_completions\n    \n , \n    cast(null as \n    int\n) as \n    \n    viral_video_views\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        creative_id,\n        day as date_day,\n        clicks, \n        impressions,\n        \n        cost_in_local_currency as cost\n        \n\n        \n\n    from macro\n\n), surrogate_key as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(creative_id as \n    varchar\n), '') as \n    varchar\n)) as daily_creative_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative\""}, "model.linkedin_source.stg_linkedin__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__campaign_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','version_tag']) }} as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history_tmp", "model.linkedin_source.stg_linkedin__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "stg_linkedin__campaign_history"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin__campaign_history.sql", "original_file_path": "models/stg_linkedin__campaign_history.sql", "name": "stg_linkedin__campaign_history", "alias": "stg_linkedin__campaign_history", "checksum": {"name": "sha256", "checksum": "eed133513eebb453786e95474020e8c843724fb71b9e5a6aa77e526a641f720c"}, "tags": [], "refs": [["stg_linkedin__campaign_history_tmp"], ["stg_linkedin__campaign_history_tmp"]], "sources": [], "description": "", "columns": {"campaign_version_id": {"name": "campaign_version_id", "description": "A unique key, a combination of campaign_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812559.181748, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history_tmp\"\n\n), macro as (\n\n    select \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    associated_entity\n    \n , \n    cast(null as boolean) as \n    \n    audience_expansion_enabled\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    cost_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    creative_selection\n    \n , \n    cast(null as \n    float\n) as \n    \n    daily_budget_amount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    daily_budget_currency_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    format\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    locale_country\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    locale_language\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    objective_type\n    \n , \n    cast(null as boolean) as \n    \n    offsite_delivery_enabled\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    optimization_target_type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_end\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    run_schedule_start\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    float\n) as \n    \n    unit_cost_amount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    unit_cost_currency_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    version_tag\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '') as \n    varchar\n)) as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history\""}, "model.linkedin_source.stg_linkedin__creative_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__creative_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        {{ dbt_utils.split_part('click_uri', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('click_uri') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('click_uri') }} as url_path,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_term') }} as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['creative_id','version_tag']) }} as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history_tmp", "model.linkedin_source.stg_linkedin__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "stg_linkedin__creative_history"], "unique_id": "model.linkedin_source.stg_linkedin__creative_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "stg_linkedin__creative_history.sql", "original_file_path": "models/stg_linkedin__creative_history.sql", "name": "stg_linkedin__creative_history", "alias": "stg_linkedin__creative_history", "checksum": {"name": "sha256", "checksum": "a637fb0eb85e160ee0c7c1a8348ba82aaca98687277a54cf33f33cca42e92f91"}, "tags": [], "refs": [["stg_linkedin__creative_history_tmp"], ["stg_linkedin__creative_history_tmp"]], "sources": [], "description": "", "columns": {"creative_version_id": {"name": "creative_version_id", "description": "A unique key, a combination of creative_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_status": {"name": "creative_status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_source://models/stg_linkedin.yml", "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812559.177635, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history_tmp\"\n\n), macro as (\n\n    select \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    call_to_action_label_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    call_to_action_target\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    click_uri\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    follow_company_call_to_action\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    follow_company_organization_logo\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    follow_company_organization_name\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    jobs_company_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    jobs_logo\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    jobs_organization\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    last_modified_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    reference\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    review_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_in_mail_content\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_activity\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_carousel_activity\n    \n , \n    cast(null as boolean) as \n    \n    sponsored_update_carousel_direct_sponsored_content\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_carousel_share\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_carousel_share_content_description\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_carousel_share_content_share_media_category\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_carousel_share_content_title\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_carousel_share_subject\n    \n , \n    cast(null as boolean) as \n    \n    sponsored_update_direct_sponsored_content\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_share\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_share_content_description\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_share_content_share_media_category\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_share_content_title\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_update_share_subject\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_video_media_asset\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sponsored_video_user_generated_content_post\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    spotlight_call_to_action\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    spotlight_custom_background\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    spotlight_description\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    spotlight_forum_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    spotlight_headline\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    spotlight_logo\n    \n , \n    cast(null as boolean) as \n    \n    spotlight_show_member_profile_photo\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    text_ad_text\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    text_ad_title\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    version_tag\n    \n \n\n\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        \n\n    split_part(\n        click_uri,\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        click_uri,\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_source,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        click_uri,\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_medium,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        click_uri,\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_campaign,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        click_uri,\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_content,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        click_uri,\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(creative_id as \n    varchar\n), '') || '-' || coalesce(cast(version_tag as \n    varchar\n), '') as \n    varchar\n)) as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history\""}, "model.linkedin_source.stg_linkedin__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "tmp", "stg_linkedin__campaign_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__campaign_history_tmp.sql", "name": "stg_linkedin__campaign_history_tmp", "alias": "stg_linkedin__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "tags": [], "refs": [["linkedin_campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812557.628139, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"linkedin_campaign_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history_tmp\""}, "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp": {"raw_sql": "select *\nfrom {{ var('ad_analytics_by_creative') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "tmp", "stg_linkedin__ad_analytics_by_creative_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "name": "stg_linkedin__ad_analytics_by_creative_tmp", "alias": "stg_linkedin__ad_analytics_by_creative_tmp", "checksum": {"name": "sha256", "checksum": "149662e300437302314d44f3ca4038be5caea5292080f81b8d4f928ad30a8e26"}, "tags": [], "refs": [["linkedin_ad_analytics_by_creative_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812557.633316, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"linkedin_ad_analytics_by_creative_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative_tmp\""}, "model.linkedin_source.stg_linkedin__account_history_tmp": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "tmp", "stg_linkedin__account_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__account_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin__account_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__account_history_tmp.sql", "name": "stg_linkedin__account_history_tmp", "alias": "stg_linkedin__account_history_tmp", "checksum": {"name": "sha256", "checksum": "507b2d73a5d179ae1e5f4a45315c44a57983481cd15fe8835f7ec23d67407325"}, "tags": [], "refs": [["linkedin_account_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812557.637734, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"linkedin_account_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history_tmp\""}, "model.linkedin_source.stg_linkedin__campaign_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "tmp", "stg_linkedin__campaign_group_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin__campaign_group_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "name": "stg_linkedin__campaign_group_history_tmp", "alias": "stg_linkedin__campaign_group_history_tmp", "checksum": {"name": "sha256", "checksum": "5c8d7b73b2d6858e838ae8c60f86ad34518ec7a09197352cf36ae8dc3702cef4"}, "tags": [], "refs": [["linkedin_campaign_group_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812557.64225, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"linkedin_campaign_group_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history_tmp\""}, "model.linkedin_source.stg_linkedin__creative_history_tmp": {"raw_sql": "select *\nfrom {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_creative_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_linkedin", "fqn": ["linkedin_source", "tmp", "stg_linkedin__creative_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__creative_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "tmp/stg_linkedin__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__creative_history_tmp.sql", "name": "stg_linkedin__creative_history_tmp", "alias": "stg_linkedin__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "0a9c48b8a93c4db4b87927959573fea6c2cb654b2c30967379d4e3682479c3b8"}, "tags": [], "refs": [["linkedin_creative_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_linkedin"}, "created_at": 1640812557.6467462, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"linkedin_creative_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history_tmp\""}, "model.facebook_ads.facebook_ads__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), creatives as (\n\n    select *\n    from {{ ref('facebook_ads__creative_history_prep') }}\n\n), accounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from {{ var('ad_set_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as {{ dbt_utils.type_bigint() }}) = cast(ads.ad_id as {{ dbt_utils.type_bigint() }})\n    left join creatives\n        on cast(ads.creative_id as {{ dbt_utils.type_bigint() }}) = cast(creatives.creative_id as {{ dbt_utils.type_bigint() }})\n    left join ad_sets\n        on cast(ads.ad_set_id as {{ dbt_utils.type_bigint() }}) = cast(ad_sets.ad_set_id as {{ dbt_utils.type_bigint() }})\n    left join campaigns\n        on cast(ads.campaign_id as {{ dbt_utils.type_bigint() }}) = cast(campaigns.campaign_id as {{ dbt_utils.type_bigint() }})\n    left join accounts\n        on cast(report.account_id as {{ dbt_utils.type_bigint() }}) = cast(accounts.account_id as {{ dbt_utils.type_bigint() }})\n    {{ dbt_utils.group_by(19) }}\n\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__ad_adapter"], "unique_id": "model.facebook_ads.facebook_ads__ad_adapter", "package_name": "facebook_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__ad_adapter.sql", "original_file_path": "models/facebook_ads__ad_adapter.sql", "name": "facebook_ads__ad_adapter", "alias": "facebook_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "c05e82c67c92164b2aae820c38e94d7a0dbc747c46200db0414f9e6cbfae2f50"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["facebook_ads__creative_history_prep"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__ad_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__campaign_history"]], "sources": [], "description": "Each record represents the daily performance of a Facebook ad at the URL level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table"}, "created_at": 1640812559.251044, "compiled_sql": "with report as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__basic_ad\"\n\n), creatives as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__creative_history_prep\"\n\n), accounts as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__account_history\"\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_history\"\n    where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_set_history\"\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__campaign_history\"\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as \n    bigint\n) = cast(ads.ad_id as \n    bigint\n)\n    left join creatives\n        on cast(ads.creative_id as \n    bigint\n) = cast(creatives.creative_id as \n    bigint\n)\n    left join ad_sets\n        on cast(ads.ad_set_id as \n    bigint\n) = cast(ad_sets.ad_set_id as \n    bigint\n)\n    left join campaigns\n        on cast(ads.campaign_id as \n    bigint\n) = cast(campaigns.campaign_id as \n    bigint\n)\n    left join accounts\n        on cast(report.account_id as \n    bigint\n) = cast(accounts.account_id as \n    bigint\n)\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__ad_adapter\""}, "model.facebook_ads.facebook_ads__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__campaign_report"], "unique_id": "model.facebook_ads.facebook_ads__campaign_report", "package_name": "facebook_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__campaign_report.sql", "original_file_path": "models/facebook_ads__campaign_report.sql", "name": "facebook_ads__campaign_report", "alias": "facebook_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "b28376174ed927010e23da45bb78c471301958da7c791688a01fa9463dc8322f"}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "description": "Each record represents the daily performance of a Facebook campaign.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table"}, "created_at": 1640812559.2582788, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__campaign_report\""}, "model.facebook_ads.facebook_ads__account_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__account_report"], "unique_id": "model.facebook_ads.facebook_ads__account_report", "package_name": "facebook_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__account_report.sql", "original_file_path": "models/facebook_ads__account_report.sql", "name": "facebook_ads__account_report", "alias": "facebook_ads__account_report", "checksum": {"name": "sha256", "checksum": "e5408441b95d4c2e24bcc42d1593abc8d6ca78fd0d1025c3a80b9ec2c5327b3d"}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "description": "Each record represents the daily performance of a Facebook account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table"}, "created_at": 1640812559.260803, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__account_report\""}, "model.facebook_ads.facebook_ads__ad_set_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_set_id,\n        ad_set_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "facebook_ads__ad_set_report"], "unique_id": "model.facebook_ads.facebook_ads__ad_set_report", "package_name": "facebook_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "facebook_ads__ad_set_report.sql", "original_file_path": "models/facebook_ads__ad_set_report.sql", "name": "facebook_ads__ad_set_report", "alias": "facebook_ads__ad_set_report", "checksum": {"name": "sha256", "checksum": "78e9c00573145c6e150285505b125a89df26296d2d301d55cb68b22a87fa9092"}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "description": "Each record represents the daily performance of a Facebook ad set.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads://models/facebook.yml", "compiled_path": "target/compiled/facebook_ads/models/facebook_ads__ad_set_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "table"}, "created_at": 1640812559.2549381, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_set_id,\n        ad_set_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__ad_set_report\""}, "model.facebook_ads.facebook_ads__creative_history_prep": {"raw_sql": "{% set url_field = \"coalesce(page_link,template_page_link)\" %}\n\nwith base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from {{ var('url_tag') }}\n\n), url_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        account_id,\n        creative_name,\n        {{ url_field }} as url,\n        {{ dbt_utils.split_part(url_field, \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host(url_field) }} as url_host,\n        '/' || {{ dbt_utils.get_url_path(url_field) }} as url_path,\n        coalesce(url_tags_pivoted.utm_source, {{ dbt_utils.get_url_parameter(url_field, 'utm_source') }}) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, {{ dbt_utils.get_url_parameter(url_field, 'utm_medium') }}) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, {{ dbt_utils.get_url_parameter(url_field, 'utm_campaign') }}) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, {{ dbt_utils.get_url_parameter(url_field, 'utm_content') }}) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, {{ dbt_utils.get_url_parameter(url_field, 'utm_term') }}) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (_fivetran_id, creative_id)\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_creative_history.stg_facebook_ads__url_tag"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads", "fqn": ["facebook_ads", "intermediate", "facebook_ads__creative_history_prep"], "unique_id": "model.facebook_ads.facebook_ads__creative_history_prep", "package_name": "facebook_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads", "path": "intermediate/facebook_ads__creative_history_prep.sql", "original_file_path": "models/intermediate/facebook_ads__creative_history_prep.sql", "name": "facebook_ads__creative_history_prep", "alias": "facebook_ads__creative_history_prep", "checksum": {"name": "sha256", "checksum": "62de9cd1fe2d606faa77dd9e5c8bdcf911f44172876ac4e2faf83d58a38ce5f4"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["stg_facebook_ads__url_tag"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads/models/intermediate/facebook_ads__creative_history_prep.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads", "materialized": "view"}, "created_at": 1640812557.691982, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\"\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__url_tag\"\n\n), url_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        account_id,\n        creative_name,\n        coalesce(page_link,template_page_link) as url,\n        \n\n    split_part(\n        coalesce(page_link,template_page_link),\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n    split_part(\n        \n\n    split_part(\n        coalesce(page_link,template_page_link),\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n    split_part(\n        \n\n    split_part(\n        coalesce(page_link,template_page_link),\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n    split_part(\n        \n\n    split_part(\n        coalesce(page_link,template_page_link),\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n    split_part(\n        \n\n    split_part(\n        coalesce(page_link,template_page_link),\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n    split_part(\n        \n\n    split_part(\n        coalesce(page_link,template_page_link),\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (_fivetran_id, creative_id)\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__creative_history_prep\""}, "model.snapchat_ads.snapchat__ad_squad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('snapchat__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        ad_account_id,\n        ad_account_name,\n        campaign_id,\n        campaign_name,\n        ad_squad_id,\n        ad_squad_name,\n        sum(swipes) as swipes,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads.snapchat__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat__ad_squad_report"], "unique_id": "model.snapchat_ads.snapchat__ad_squad_report", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat__ad_squad_report.sql", "original_file_path": "models/snapchat__ad_squad_report.sql", "name": "snapchat__ad_squad_report", "alias": "snapchat__ad_squad_report", "checksum": {"name": "sha256", "checksum": "bf02f368d545b04266426b35ce72d7b329b67fabdc0852e413911a12707ca958"}, "tags": [], "refs": [["snapchat__ad_adapter"]], "sources": [], "description": "Each record represents the daily performance of a Snapchat ad squad.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_name": {"name": "ad_squad_name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat__ad_squad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1640812559.276109, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        ad_account_id,\n        ad_account_name,\n        campaign_id,\n        campaign_name,\n        ad_squad_id,\n        ad_squad_name,\n        sum(swipes) as swipes,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_squad_report\""}, "model.snapchat_ads.snapchat__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('snapchat__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        ad_account_id,\n        ad_account_name,\n        campaign_id,\n        campaign_name,\n        sum(swipes) as swipes,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads.snapchat__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat__campaign_report"], "unique_id": "model.snapchat_ads.snapchat__campaign_report", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat__campaign_report.sql", "original_file_path": "models/snapchat__campaign_report.sql", "name": "snapchat__campaign_report", "alias": "snapchat__campaign_report", "checksum": {"name": "sha256", "checksum": "a00b4ebcb395886e365f70d4b93a8544ee84a70bbb05e4100d5aa067e7021e8c"}, "tags": [], "refs": [["snapchat__ad_adapter"]], "sources": [], "description": "Each record represents the daily performance of a Snapchat campaign.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1640812559.271942, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        ad_account_id,\n        ad_account_name,\n        campaign_id,\n        campaign_name,\n        sum(swipes) as swipes,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__campaign_report\""}, "model.snapchat_ads.snapchat__account_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('snapchat__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        ad_account_id,\n        ad_account_name,\n        sum(swipes) as swipes,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads.snapchat__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat__account_report"], "unique_id": "model.snapchat_ads.snapchat__account_report", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat__account_report.sql", "original_file_path": "models/snapchat__account_report.sql", "name": "snapchat__account_report", "alias": "snapchat__account_report", "checksum": {"name": "sha256", "checksum": "deef4d2e62c7740278aa04ee86974ba769d5731d7c70e3ed3542222b64f9ad58"}, "tags": [], "refs": [["snapchat__ad_adapter"]], "sources": [], "description": "Each record represents the daily performance of a Snapchat ad account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1640812559.268606, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        ad_account_id,\n        ad_account_name,\n        sum(swipes) as swipes,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__account_report\""}, "model.snapchat_ads.snapchat__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('ad_hourly_report') }}\n\n), creatives as (\n\n    select *\n    from {{ ref('snapchat__creative_history_prep') }}\n\n), accounts as (\n\n    select *\n    from {{ var('ad_account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from {{ var('ad_squad_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        cast(report.date_hour as date) as date_day,\n        accounts.ad_account_id,\n        accounts.ad_account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_squads.ad_squad_id,\n        ad_squads.ad_squad_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.spend) as spend,\n        sum(report.impressions) as impressions,\n        sum(report.swipes) as swipes\n    from report\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join ad_squads\n        on ads.ad_squad_id = ad_squads.ad_squad_id\n    left join campaigns\n        on ad_squads.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.ad_account_id = accounts.ad_account_id\n    {{ dbt_utils.group_by(19) }}\n\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report", "model.snapchat_ads.snapchat__creative_history_prep", "model.snapchat_ads_source.stg_snapchat__ad_account_history", "model.snapchat_ads_source.stg_snapchat__ad_history", "model.snapchat_ads_source.stg_snapchat__ad_squad_history", "model.snapchat_ads_source.stg_snapchat__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "snapchat__ad_adapter"], "unique_id": "model.snapchat_ads.snapchat__ad_adapter", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "snapchat__ad_adapter.sql", "original_file_path": "models/snapchat__ad_adapter.sql", "name": "snapchat__ad_adapter", "alias": "snapchat__ad_adapter", "checksum": {"name": "sha256", "checksum": "ea7abad5df4995004f01a58ef3770a009f1ebcab7ef360f346f473de7cbeb108"}, "tags": [], "refs": [["stg_snapchat__ad_hourly_report"], ["snapchat__creative_history_prep"], ["stg_snapchat__ad_account_history"], ["stg_snapchat__ad_history"], ["stg_snapchat__ad_squad_history"], ["stg_snapchat__campaign_history"]], "sources": [], "description": "Each record represents the daily performance of a Snapchat ad at the URL level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the report.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_name": {"name": "ad_squad_name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the web_view_url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads://models/snapchat.yml", "compiled_path": "target/compiled/snapchat_ads/models/snapchat__ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1640812559.2842932, "compiled_sql": "with report as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_hourly_report\"\n\n), creatives as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__creative_history_prep\"\n\n), accounts as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_account_history\"\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_history\"\n    where is_most_recent_record = true\n\n), ad_squads as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_squad_history\"\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__campaign_history\"\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        cast(report.date_hour as date) as date_day,\n        accounts.ad_account_id,\n        accounts.ad_account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_squads.ad_squad_id,\n        ad_squads.ad_squad_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.spend) as spend,\n        sum(report.impressions) as impressions,\n        sum(report.swipes) as swipes\n    from report\n    left join ads \n        on report.ad_id = ads.ad_id\n    left join creatives\n        on ads.creative_id = creatives.creative_id\n    left join ad_squads\n        on ads.ad_squad_id = ad_squads.ad_squad_id\n    left join campaigns\n        on ad_squads.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.ad_account_id = accounts.ad_account_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_adapter\""}, "model.snapchat_ads.snapchat__creative_history_prep": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from {{ var('creative_url_tag_history') }}\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        {{ dbt_utils.split_part('base.url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('base.url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('base.url') }} as url_path,\n        coalesce(url_tags_pivoted.utm_source, {{ dbt_utils.get_url_parameter('base.url', 'utm_source') }}) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, {{ dbt_utils.get_url_parameter('base.url', 'utm_medium') }}) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, {{ dbt_utils.get_url_parameter('base.url', 'utm_campaign') }}) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, {{ dbt_utils.get_url_parameter('base.url', 'utm_content') }}) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, {{ dbt_utils.get_url_parameter('base.url', 'utm_term') }}) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (creative_id)\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.snapchat_ads_source.stg_snapchat__creative_history", "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history"]}, "config": {"enabled": true, "alias": null, "schema": "snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_snapchat_ads", "fqn": ["snapchat_ads", "intermediate", "snapchat__creative_history_prep"], "unique_id": "model.snapchat_ads.snapchat__creative_history_prep", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "intermediate/snapchat__creative_history_prep.sql", "original_file_path": "models/intermediate/snapchat__creative_history_prep.sql", "name": "snapchat__creative_history_prep", "alias": "snapchat__creative_history_prep", "checksum": {"name": "sha256", "checksum": "ad84adc7e486c5e1d682134784cffd7fcd5998bfa49f42eaa05ae3e4cf8d8d4e"}, "tags": [], "refs": [["stg_snapchat__creative_history"], ["stg_snapchat__creative_url_tag_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/intermediate/snapchat__creative_history_prep.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "snapchat_ads", "materialized": "table"}, "created_at": 1640812557.769892, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_history\"\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_url_tag_history\"\n    where is_most_recent_record = true\n\n), url_tags_pivoted as (\n\n    select \n        creative_id,\n        min(case when param_key = 'utm_source' then param_value end) as utm_source,\n        min(case when param_key = 'utm_medium' then param_value end) as utm_medium,\n        min(case when param_key = 'utm_campaign' then param_value end) as utm_campaign,\n        min(case when param_key = 'utm_content' then param_value end) as utm_content,\n        min(case when param_key = 'utm_term' then param_value end) as utm_term\n    from url_tags\n    group by 1\n\n), fields as (\n\n    select\n        base.creative_id,\n        base.ad_account_id,\n        base.creative_name,\n        base.url,\n        \n\n    split_part(\n        base.url,\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        base.url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n    split_part(\n        \n\n    split_part(\n        base.url,\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n    split_part(\n        \n\n    split_part(\n        base.url,\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n    split_part(\n        \n\n    split_part(\n        base.url,\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n    split_part(\n        \n\n    split_part(\n        base.url,\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n    split_part(\n        \n\n    split_part(\n        base.url,\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (creative_id)\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__creative_history_prep\""}, "model.google_ads_source.stg_google_ads__final_url_performance": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_google_ads__final_url_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__final_url_performance_tmp')),\n                staging_columns=get_final_url_performance_columns()\n            )\n        }}\n\n        {% for metric in var('google_ads__url_passthrough_metrics') %}\n        , {{ metric }}\n        {% endfor %}\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n\n        {% if var('google_auto_tagging_enabled', false) %}\n\n        coalesce( {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} , 'google')  as utm_source,\n        coalesce( {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} , 'cpc') as utm_medium,\n        coalesce( {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} , campaign_name) as utm_campaign,\n        coalesce( {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} , ad_group_name) as utm_content,\n\n        {% else %}\n\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        \n        {% endif %}\n        \n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n\n    from renamed\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','campaign_id','ad_group_id','final_url']) }} as final_url_performance_id\n    from url_fields\n\n)\n\nselect * from surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_final_url_performance_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp", "model.google_ads_source.stg_google_ads__final_url_performance_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "adwords_connector", "stg_google_ads__final_url_performance"], "unique_id": "model.google_ads_source.stg_google_ads__final_url_performance", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "adwords_connector/stg_google_ads__final_url_performance.sql", "original_file_path": "models/adwords_connector/stg_google_ads__final_url_performance.sql", "name": "stg_google_ads__final_url_performance", "alias": "stg_google_ads__final_url_performance", "checksum": {"name": "sha256", "checksum": "c355bede9303daf44f6b4336717c4cc1123d9dc1421ebe262b2328fada9227ef"}, "tags": [], "refs": [["stg_google_ads__final_url_performance_tmp"], ["stg_google_ads__final_url_performance_tmp"]], "sources": [], "description": "Each record represents the performance of a final url at the ad group level.", "columns": {"final_url_performance_id": {"name": "final_url_performance_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "Effective final URL of the impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/adwords_connector/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/stg_google_ads__final_url_performance.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": true}, "created_at": 1640812559.381048, "compiled_sql": "\n\nwith source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__final_url_performance_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as account_name , \n    cast(null as \n    int\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    float\n) as spend , \n    cast(null as date) as date_day , \n    cast(null as \n    varchar\n) as final_url , \n    cast(null as \n    int\n) as \n    \n    external_customer_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    impressions\n    \n \n\n\n\n        \n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        \n\n    split_part(\n        final_url,\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n\n        \n\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        final_url,\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_source,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        final_url,\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_medium,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        final_url,\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_campaign,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        final_url,\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_content,\n        \n        \n        \n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        final_url,\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_term\n\n    from renamed\n\n), surrogate_key as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(ad_group_id as \n    varchar\n), '') || '-' || coalesce(cast(final_url as \n    varchar\n), '') as \n    varchar\n)) as final_url_performance_id\n    from url_fields\n\n)\n\nselect * from surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__final_url_performance\""}, "model.google_ads_source.stg_google_ads__criteria_performance": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_google_ads__criteria_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__criteria_performance_tmp')),\n                staging_columns=get_criteria_performance_columns()\n            )\n        }}\n\n        {% for metric in var('google_ads__criteria_passthrough_metrics') %}\n        , {{ metric }}\n        {% endfor %}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_criteria_performance_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp", "model.google_ads_source.stg_google_ads__criteria_performance_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "adwords_connector", "stg_google_ads__criteria_performance"], "unique_id": "model.google_ads_source.stg_google_ads__criteria_performance", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "adwords_connector/stg_google_ads__criteria_performance.sql", "original_file_path": "models/adwords_connector/stg_google_ads__criteria_performance.sql", "name": "stg_google_ads__criteria_performance", "alias": "stg_google_ads__criteria_performance", "checksum": {"name": "sha256", "checksum": "ab4b1625b4bd0e83fe246493b59d7f5855a010df54504af9bba18bf7235885b8"}, "tags": [], "refs": [["stg_google_ads__criteria_performance_tmp"], ["stg_google_ads__criteria_performance_tmp"]], "sources": [], "description": "The Criteria Performance report includes statistics aggregated at the ad group criteria level, one row per ad group and criteria combination.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "Descriptive string for the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_destination_url": {"name": "criteria_destination_url", "description": "Destination URL of the criterion that triggered ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_type": {"name": "criteria_type", "description": "The type of the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the main object of this row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/adwords_connector/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/stg_google_ads__criteria_performance.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": true}, "created_at": 1640812559.371855, "compiled_sql": "\n\nwith source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__criteria_performance_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as account_name , \n    cast(null as \n    int\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    float\n) as spend , \n    cast(null as \n    varchar\n) as \n    \n    criteria\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    criteria_destination_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    criteria_type\n    \n , \n    cast(null as date) as date_day , \n    cast(null as \n    int\n) as \n    \n    external_customer_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    int\n) as \n    \n    impressions\n    \n \n\n\n\n        \n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__criteria_performance\""}, "model.google_ads_source.stg_google_ads__click_performance": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_google_ads__click_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__click_performance_tmp')),\n                staging_columns=get_click_performance_columns()\n            )\n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_click_performance_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__click_performance_tmp", "model.google_ads_source.stg_google_ads__click_performance_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "adwords_connector", "stg_google_ads__click_performance"], "unique_id": "model.google_ads_source.stg_google_ads__click_performance", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "adwords_connector/stg_google_ads__click_performance.sql", "original_file_path": "models/adwords_connector/stg_google_ads__click_performance.sql", "name": "stg_google_ads__click_performance", "alias": "stg_google_ads__click_performance", "checksum": {"name": "sha256", "checksum": "6156e79e5cc8fbb4f7800c52d2cbfc93630675f744c3a87a35c7a9c0e24cdf6d"}, "tags": [], "refs": [["stg_google_ads__click_performance_tmp"], ["stg_google_ads__click_performance_tmp"]], "sources": [], "description": "The Click Performance report includes stats aggregated at each click level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/adwords_connector/stg_google_ads.yml", "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/stg_google_ads__click_performance.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": true}, "created_at": 1640812559.3650959, "compiled_sql": "\n\nwith source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__click_performance_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as account_name , \n    cast(null as \n    int\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    criteria_id\n    \n , \n    cast(null as date) as date_day , \n    cast(null as \n    int\n) as \n    \n    external_customer_id\n    \n , \n    cast(null as \n    varchar\n) as gclid \n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__click_performance\""}, "model.google_ads_source.stg_google_ads__criteria_performance_tmp": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nselect *\nfrom {{ var('google_ads__criteria_performance') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.google_ads_criteria_performance_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "adwords_connector", "tmp", "stg_google_ads__criteria_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__criteria_performance_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "adwords_connector/tmp/stg_google_ads__criteria_performance_tmp.sql", "original_file_path": "models/adwords_connector/tmp/stg_google_ads__criteria_performance_tmp.sql", "name": "stg_google_ads__criteria_performance_tmp", "alias": "stg_google_ads__criteria_performance_tmp", "checksum": {"name": "sha256", "checksum": "4b602c50e2569f30109a5e00524b941d9f9aa74e7f2e6afb851c9e97aa6ca0be"}, "tags": [], "refs": [["google_ads_criteria_performance_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/tmp/stg_google_ads__criteria_performance_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": true}, "created_at": 1640812558.024307, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"google_ads_criteria_performance_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__criteria_performance_tmp\""}, "model.google_ads_source.stg_google_ads__final_url_performance_tmp": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nselect *\nfrom {{ var('google_ads__final_url_performance') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.google_ads_final_url_performance_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "adwords_connector", "tmp", "stg_google_ads__final_url_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__final_url_performance_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "adwords_connector/tmp/stg_google_ads__final_url_performance_tmp.sql", "original_file_path": "models/adwords_connector/tmp/stg_google_ads__final_url_performance_tmp.sql", "name": "stg_google_ads__final_url_performance_tmp", "alias": "stg_google_ads__final_url_performance_tmp", "checksum": {"name": "sha256", "checksum": "4e029c606fcb0642ae29d6ae9add21c37eaf3ba2a3275e1c1bdda62113ea3232"}, "tags": [], "refs": [["google_ads_final_url_performance_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/tmp/stg_google_ads__final_url_performance_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": true}, "created_at": 1640812558.029624, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"google_ads_final_url_performance_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__final_url_performance_tmp\""}, "model.google_ads_source.stg_google_ads__click_performance_tmp": {"raw_sql": "{{ config(enabled=var('api_source') == 'adwords') }}\n\nselect *\nfrom {{ var('google_ads__click_performance') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.google_ads_click_performance_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "adwords_connector", "tmp", "stg_google_ads__click_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__click_performance_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "adwords_connector/tmp/stg_google_ads__click_performance_tmp.sql", "original_file_path": "models/adwords_connector/tmp/stg_google_ads__click_performance_tmp.sql", "name": "stg_google_ads__click_performance_tmp", "alias": "stg_google_ads__click_performance_tmp", "checksum": {"name": "sha256", "checksum": "406f0453e172f001316df965f60044079475b8c05b482d8aefbcc4aa1d57949a"}, "tags": [], "refs": [["google_ads_click_performance_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/tmp/stg_google_ads__click_performance_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": true}, "created_at": 1640812558.035003, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"google_ads_click_performance_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__click_performance_tmp\""}, "model.ad_reporting.ad_reporting": {"raw_sql": "{{ config(materialized='table') }}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations(get_staging_files()) }}\n\n)\n\nselect *\nfrom unioned", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ad_reporting.get_staging_files", "macro.dbt_utils.union_relations"], "nodes": ["model.ad_reporting.stg_pinterest_ads", "model.ad_reporting.stg_microsoft_ads", "model.ad_reporting.stg_linkedin_ads", "model.ad_reporting.stg_twitter_ads", "model.ad_reporting.stg_google_ads", "model.ad_reporting.stg_facebook_ads", "model.ad_reporting.stg_snapchat_ads"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "ad_reporting"], "unique_id": "model.ad_reporting.ad_reporting", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "ad_reporting.sql", "original_file_path": "models/ad_reporting.sql", "name": "ad_reporting", "alias": "ad_reporting", "checksum": {"name": "sha256", "checksum": "784246a0409d33272ba9a91588fe732a6a85fa6ff4f1e7774d22d226ca1914db"}, "tags": [], "refs": [["stg_pinterest_ads"], ["stg_microsoft_ads"], ["stg_linkedin_ads"], ["stg_twitter_ads"], ["stg_google_ads"], ["stg_facebook_ads"], ["stg_snapchat_ads"]], "sources": [], "description": "Each record in this table represents the daily performance of ads.\nLinkedIn Ads has a slightly different hierarchy than the other marketing platforms. As identified within [Microsoft's Campaign Groups](https://docs.microsoft.com/en-us/linkedin/marketing/integrations/ads/account-structure/create-and-manage-campaign-groups?tabs=http) documentation, the hierarchy consists of multiple campaigns for a single campaign group. As this hierarchy is the inverse of the standard hierarchy seen within the other platforms, the `campaign` and `campaign_group` are switched for LinkedIn Ads within the ad_reporting table for consistency across platforms.\n", "columns": {"campaign_name": {"name": "campaign_name", "description": "A label for the campaign. For LinkedIn Ads this field is the `campaign_group_name` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "A label for the ad group, if present in the source data. Mapped from fields including `campaign_group_name`. For LinkedIn Ads this field is the `campaign_name` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign. For LinkedIn Ads this field is the `campaign_group_id` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data. Mapped from fields including `campaign_group_id`. For LinkedIn Ads this field is the `campaign_id` field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform the records relate to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ad_reporting://models/ad_reporting.yml", "compiled_path": "target/compiled/ad_reporting/models/ad_reporting.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1640812559.3982, "compiled_sql": "\n\nwith unioned as (\n\n    \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_pinterest_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(null as text) as \"account_name\" ,\n                    cast(null as character varying(256)) as \"account_id\" ,\n                    cast(null as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_pinterest_ads\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_microsoft_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(\"account_name\" as text) as \"account_name\" ,\n                    cast(\"account_id\" as character varying(256)) as \"account_id\" ,\n                    cast(null as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_microsoft_ads\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_linkedin_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(\"account_name\" as text) as \"account_name\" ,\n                    cast(\"account_id\" as character varying(256)) as \"account_id\" ,\n                    cast(null as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_linkedin_ads\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_twitter_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(null as text) as \"account_name\" ,\n                    cast(null as character varying(256)) as \"account_id\" ,\n                    cast(null as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_twitter_ads\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_google_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(\"account_name\" as text) as \"account_name\" ,\n                    cast(\"account_id\" as character varying(256)) as \"account_id\" ,\n                    cast(null as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_google_ads\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_facebook_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(\"account_name\" as text) as \"account_name\" ,\n                    cast(\"account_id\" as character varying(256)) as \"account_id\" ,\n                    cast(null as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_facebook_ads\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"postgres\".\"ad_reporting_integration_tests\".\"stg_snapchat_ads\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"date_day\" as date) as \"date_day\" ,\n                    cast(\"base_url\" as text) as \"base_url\" ,\n                    cast(\"url_host\" as character varying(256)) as \"url_host\" ,\n                    cast(\"url_path\" as text) as \"url_path\" ,\n                    cast(\"utm_source\" as text) as \"utm_source\" ,\n                    cast(\"utm_medium\" as text) as \"utm_medium\" ,\n                    cast(\"utm_campaign\" as text) as \"utm_campaign\" ,\n                    cast(\"utm_content\" as text) as \"utm_content\" ,\n                    cast(\"utm_term\" as text) as \"utm_term\" ,\n                    cast(\"campaign_id\" as character varying(256)) as \"campaign_id\" ,\n                    cast(\"campaign_name\" as text) as \"campaign_name\" ,\n                    cast(\"ad_group_id\" as character varying(256)) as \"ad_group_id\" ,\n                    cast(\"ad_group_name\" as text) as \"ad_group_name\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(null as bigint) as \"clicks\" ,\n                    cast(\"impressions\" as bigint) as \"impressions\" ,\n                    cast(\"spend\" as numeric) as \"spend\" ,\n                    cast(\"account_name\" as text) as \"account_name\" ,\n                    cast(\"account_id\" as character varying(256)) as \"account_id\" ,\n                    cast(\"swipes\" as numeric) as \"swipes\" \n\n            from \"postgres\".\"ad_reporting_integration_tests\".\"stg_snapchat_ads\"\n        )\n\n        \n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"ad_reporting\""}, "model.ad_reporting.stg_microsoft_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        'Microsoft Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_microsoft_ads"], "unique_id": "model.ad_reporting.stg_microsoft_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_microsoft_ads.sql", "original_file_path": "models/stg_microsoft_ads.sql", "name": "stg_microsoft_ads", "alias": "stg_microsoft_ads", "checksum": {"name": "sha256", "checksum": "43a83425b30ad32fca0d10809f87d4038d8468c8dcf923aa60d28f4edbae107d"}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_microsoft_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.086882, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__ad_adapter\"\n\n), fields as (\n\n    select\n        'Microsoft Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        cast(account_id as \n    varchar\n) as account_id,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as \n    varchar\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_microsoft_ads\""}, "model.ad_reporting.stg_facebook_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        account_name,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_set_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_set_name as ad_group_name,\n        'Facebook Ads' as platform,\n        sum(coalesce(clicks, 0)) as clicks,\n        sum(coalesce(impressions, 0)) as impressions,\n        sum(coalesce(spend, 0)) as spend\n    from base\n    {{ dbt_utils.group_by(16) }}\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_facebook_ads"], "unique_id": "model.ad_reporting.stg_facebook_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_facebook_ads.sql", "original_file_path": "models/stg_facebook_ads.sql", "name": "stg_facebook_ads", "alias": "stg_facebook_ads", "checksum": {"name": "sha256", "checksum": "16b951e5a12c2012f4a20e96851a71bc625ca0c24ca48ace45e3299f514a863c"}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_facebook_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.092549, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads\".\"facebook_ads__ad_adapter\"\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        account_name,\n        cast(account_id as \n    varchar\n) as account_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        campaign_name,\n        cast(ad_set_id as \n    varchar\n) as ad_group_id,\n        ad_set_name as ad_group_name,\n        'Facebook Ads' as platform,\n        sum(coalesce(clicks, 0)) as clicks,\n        sum(coalesce(impressions, 0)) as impressions,\n        sum(coalesce(spend, 0)) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_facebook_ads\""}, "model.ad_reporting.stg_linkedin_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__linkedin_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter')}}\n\n), fields as (\n\n    select\n        'LinkedIn Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        campaign_group_name as campaign_name,\n        cast(campaign_group_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name as ad_group_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_linkedin_ads"], "unique_id": "model.ad_reporting.stg_linkedin_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_linkedin_ads.sql", "original_file_path": "models/stg_linkedin_ads.sql", "name": "stg_linkedin_ads", "alias": "stg_linkedin_ads", "checksum": {"name": "sha256", "checksum": "d9a047830e58c4c7790dfefb3de62aa3be63a5c1fc1f0d04c2a8e16933aea585"}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_linkedin_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.098558, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\n\n), fields as (\n\n    select\n        'LinkedIn Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        cast(account_id as \n    varchar\n) as account_id,\n        campaign_group_name as campaign_name,\n        cast(campaign_group_id as \n    varchar\n) as campaign_id,\n        campaign_name as ad_group_name,\n        cast(campaign_id as \n    varchar\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_linkedin_ads\""}, "model.ad_reporting.stg_snapchat_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__snapchat_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('snapchat__ad_adapter')}}\n\n), fields as (\n\n    select\n        ad_account_name as account_name,\n        cast(ad_account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(date_day as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_squad_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_squad_name as ad_group_name,\n        'Snapchat Ads' as platform,\n        sum(coalesce(swipes, 0)) as swipes,\n        sum(coalesce(impressions, 0)) as impressions,\n        sum(coalesce(spend, 0)) as spend\n    from base\n    {{ dbt_utils.group_by(16) }}\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.snapchat_ads.snapchat__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_snapchat_ads"], "unique_id": "model.ad_reporting.stg_snapchat_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_snapchat_ads.sql", "original_file_path": "models/stg_snapchat_ads.sql", "name": "stg_snapchat_ads", "alias": "stg_snapchat_ads", "checksum": {"name": "sha256", "checksum": "27e44b3b15016433c725751c0a69e10077c970a5a5ebd97fc232374a0c1758a6"}, "tags": [], "refs": [["snapchat__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_snapchat_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.1039848, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_adapter\"\n\n), fields as (\n\n    select\n        ad_account_name as account_name,\n        cast(ad_account_id as \n    varchar\n) as account_id,\n        cast(date_day as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        campaign_name,\n        cast(ad_squad_id as \n    varchar\n) as ad_group_id,\n        ad_squad_name as ad_group_name,\n        'Snapchat Ads' as platform,\n        sum(coalesce(swipes, 0)) as swipes,\n        sum(coalesce(impressions, 0)) as impressions,\n        sum(coalesce(spend, 0)) as spend\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_snapchat_ads\""}, "model.ad_reporting.stg_pinterest_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__pinterest_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        cast(campaign_date as date) as date_day,\n        cast(advertiser_id as {{ dbt_utils.type_string() }}) as accound_id,\n        advertiser_name as account_name,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_group_name,\n        platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_pinterest_ads"], "unique_id": "model.ad_reporting.stg_pinterest_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_pinterest_ads.sql", "original_file_path": "models/stg_pinterest_ads.sql", "name": "stg_pinterest_ads", "alias": "stg_pinterest_ads", "checksum": {"name": "sha256", "checksum": "e2d7bd91cda775a61a17a84ef134a7dad7f41bbc2a4b28cbd0249fdabf09a8b3"}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_pinterest_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.1110091, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_adapter\"\n\n), fields as (\n\n    select\n        cast(campaign_date as date) as date_day,\n        cast(advertiser_id as \n    varchar\n) as accound_id,\n        advertiser_name as account_name,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        campaign_name,\n        cast(ad_group_id as \n    varchar\n) as ad_group_id,\n        ad_group_name,\n        platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_pinterest_ads\""}, "model.ad_reporting.stg_google_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__google_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('google_ads__url_ad_adapter')}}\n\n), fields as (\n\n    select\n        'Google Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        {% if var('api_source','adwords') == 'google_ads' %} cast(account_id as {{ dbt_utils.type_string() }}) as account_id {% else %} cast(external_customer_id as {{ dbt_utils.type_string() }}) as account_id {% endif %} ,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.google_ads.google_ads__url_ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_google_ads"], "unique_id": "model.ad_reporting.stg_google_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_google_ads.sql", "original_file_path": "models/stg_google_ads.sql", "name": "stg_google_ads", "alias": "stg_google_ads", "checksum": {"name": "sha256", "checksum": "11c0c1e5ad5ccc5808b87fb75e0bfd278cb67b166ea6298bf002ea6bb786f5c6"}, "tags": [], "refs": [["google_ads__url_ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_google_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.116548, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_google_ads\".\"google_ads__url_ad_adapter\"\n\n), fields as (\n\n    select\n        'Google Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n         cast(external_customer_id as \n    varchar\n) as account_id  ,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as \n    varchar\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_google_ads\""}, "model.ad_reporting.stg_twitter_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('twitter__ad_adapter')}}\n\n), fields as (\n\n    select\n        'Twitter Ads' as platform,\n        cast(date_day as date) as date_day,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        line_item_name as ad_group_name,\n        cast(line_item_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests", "fqn": ["ad_reporting", "stg_twitter_ads"], "unique_id": "model.ad_reporting.stg_twitter_ads", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "stg_twitter_ads.sql", "original_file_path": "models/stg_twitter_ads.sql", "name": "stg_twitter_ads", "alias": "stg_twitter_ads", "checksum": {"name": "sha256", "checksum": "8169e8a8b86800e3a9cc4b4eea0cc6cd991c070cb4be375472a600415b8857e8"}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ad_reporting/models/stg_twitter_ads.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "created_at": 1640812558.123007, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__ad_adapter\"\n\n), fields as (\n\n    select\n        'Twitter Ads' as platform,\n        cast(date_day as date) as date_day,\n        campaign_name,\n        cast(campaign_id as \n    varchar\n) as campaign_id,\n        line_item_name as ad_group_name,\n        cast(line_item_id as \n    varchar\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests\".\"stg_twitter_ads\""}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_history_tmp') }}\n\n), macro as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_history_tmp')),\n                staging_columns=get_pin_promotion_history_columns()\n            )\n        }}\n\n    from base\n\n), fields as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_timestamp,\n        destination_url,\n        {{ dbt_utils.split_part('destination_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('destination_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('destination_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_term') }} as utm_term,\n        name,\n        pin_id,\n        status,\n        creative_type,\n        _fivetran_synced\n    from macro\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['pin_promotion_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_history.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_history.sql", "name": "stg_pinterest_ads__pin_promotion_history", "alias": "stg_pinterest_ads__pin_promotion_history", "checksum": {"name": "sha256", "checksum": "f8ec0f2068f6f46e9de886d61835b934a12362e55ab69f6dc9cb346674944d4c"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history_tmp"], ["stg_pinterest_ads__pin_promotion_history_tmp"]], "sources": [], "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"pin_promotion_id": {"name": "pin_promotion_id", "description": "Pin promotion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Pin promotion ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of a Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__pin_promotion_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "table"}, "created_at": 1640812559.41642, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history_tmp\"\n\n), macro as (\n\n    select\n\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    android_deep_link\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    click_tracking_url\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    creative_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    destination_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ios_deep_link\n    \n , \n    cast(null as boolean) as \n    \n    is_pin_deleted\n    \n , \n    cast(null as boolean) as \n    \n    is_removable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    pin_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    review_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    view_tracking_url\n    \n \n\n\n\n    from base\n\n), fields as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_timestamp,\n        destination_url,\n        \n\n    split_part(\n        destination_url,\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        destination_url,\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_source,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        destination_url,\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_medium,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        destination_url,\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_campaign,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        destination_url,\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_content,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        destination_url,\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_term,\n        name,\n        pin_id,\n        status,\n        creative_type,\n        _fivetran_synced\n    from macro\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(pin_promotion_id as \n    varchar\n), '') || '-' || coalesce(cast(_fivetran_synced as \n    varchar\n), '') as \n    varchar\n)) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\""}, "model.pinterest_source.stg_pinterest_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__campaign_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "stg_pinterest_ads__campaign_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__campaign_history.sql", "original_file_path": "models/stg_pinterest_ads__campaign_history.sql", "name": "stg_pinterest_ads__campaign_history", "alias": "stg_pinterest_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "ef4b3a80dc6e9826455ce0c9597553afbc1d0d4b6721f546b392579403020da2"}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history_tmp"], ["stg_pinterest_ads__campaign_history_tmp"]], "sources": [], "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Reference to the advertiser who created the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of a Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "table"}, "created_at": 1640812559.409472, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history_tmp\"\n\n), fields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    varchar\n) as campaign_id , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    advertiser_id\n    \n \n\n\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(_fivetran_synced as \n    varchar\n), '') as \n    varchar\n)) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\""}, "model.pinterest_source.stg_pinterest_ads__advertiser_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__advertiser_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__advertiser_history_tmp')),\n                staging_columns=get_advertiser_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['advertiser_id','updated_timestamp'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_advertiser_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp", "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "stg_pinterest_ads__advertiser_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__advertiser_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__advertiser_history.sql", "original_file_path": "models/stg_pinterest_ads__advertiser_history.sql", "name": "stg_pinterest_ads__advertiser_history", "alias": "stg_pinterest_ads__advertiser_history", "checksum": {"name": "sha256", "checksum": "9d0e92cf502f4fb2beb37cf4d70c57dcc11b0123e25eab1c928a8b13c82336b4"}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history_tmp"], ["stg_pinterest_ads__advertiser_history_tmp"]], "sources": [], "description": "Each record represents a version of a Pinterest Advertiser.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Identifier of the owner user of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp of when the advertiser was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "Timestamp of when the advertiser was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Unique identifier of the advertiser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_account": {"name": "test_account", "description": "Boolean indicating if the advertiser is a test account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Indicates which currency the advertiser is using.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Identifies the country of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_one_tap": {"name": "is_one_tap", "description": "Boolean indicating if the advertiser is one tap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of an advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__advertiser_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "table"}, "created_at": 1640812559.425165, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history_tmp\"\n\n), fields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    owner_user_id\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    timestamp\n) as updated_timestamp , \n    cast(null as \n    varchar\n) as advertiser_id , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    test_account\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    currency\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    country\n    \n , \n    cast(null as boolean) as \n    \n    is_one_tap\n    \n \n\n\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(advertiser_id as \n    varchar\n), '') || '-' || coalesce(cast(updated_timestamp as \n    varchar\n), '') as \n    varchar\n)) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\""}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_report_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_report_tmp')),\n                staging_columns=get_pin_promotion_report_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        _fivetran_synced,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n        {% for metric in var('pin_promotion_report_pass_through_metric') %}\n            , {{ metric }}\n        {% endfor %}\n\n    from base\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','pin_promotion_id']) }} as report_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_report.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_report.sql", "name": "stg_pinterest_ads__pin_promotion_report", "alias": "stg_pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "140f12e92ae5839cea287dad5f11a211912a84ff78b86e6dadb7cee787fb76a6"}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report_tmp"], ["stg_pinterest_ads__pin_promotion_report_tmp"]], "sources": [], "description": "Each record represents the daily performance of a Pinterest Pin promotion.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "report_id": {"name": "report_id", "description": "The unique ID of each report record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__pin_promotion_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "table"}, "created_at": 1640812559.420579, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_report_tmp\"\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    clickthrough_1_gross\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    closeup_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    closeup_2\n    \n , \n    cast(null as \n    float\n) as \n    \n    cpcv_in_micro_dollar\n    \n , \n    cast(null as \n    float\n) as \n    \n    cpcv_p_95_in_micro_dollar\n    \n , \n    cast(null as \n    float\n) as \n    \n    cpv_in_micro_dollar\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    engagement_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    engagement_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    impression_1_gross\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    pin_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    pin_promotion_id\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    repin_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    repin_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    spend_in_micro_dollar\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    total_click_unknown\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    total_conversions\n    \n , \n    cast(null as \n    float\n) as \n    \n    total_impression_frequency\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    total_impression_user\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    total_unknown_tablet_action_to_mobile_conversion\n    \n , \n    cast(null as \n    float\n) as \n    \n    video_avg_watchtime_in_second_1\n    \n , \n    cast(null as \n    float\n) as \n    \n    video_avg_watchtime_in_second_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_mrc_views_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_mrc_views_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_0_combined_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_0_combined_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_100_complete_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_100_complete_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_25_combined_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_25_combined_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_50_combined_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_50_combined_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_75_combined_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_75_combined_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_95_combined_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_p_95_combined_2\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        _fivetran_synced,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n        \n\n    from base\n\n), surrogate_key as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(pin_promotion_id as \n    varchar\n), '') as \n    varchar\n)) as report_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_report\""}, "model.pinterest_source.stg_pinterest_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__ad_group_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_group_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pinterest_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "stg_pinterest_ads__ad_group_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "stg_pinterest_ads__ad_group_history.sql", "original_file_path": "models/stg_pinterest_ads__ad_group_history.sql", "name": "stg_pinterest_ads__ad_group_history", "alias": "stg_pinterest_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "6b82b88e9a2808a5c14bfa348d280ece978ea9fe49e100ed58644d29b357e144"}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history_tmp"], ["stg_pinterest_ads__ad_group_history_tmp"]], "sources": [], "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Parent Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of an Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "pinterest_source://models/stg_pinterest_ads.yml", "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__ad_group_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "table"}, "created_at": 1640812559.406372, "compiled_sql": "with base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history_tmp\"\n\n), fields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    timestamp\n) as end_timestamp , \n    cast(null as \n    varchar\n) as ad_group_id , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as start_timestamp , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n \n\n\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(ad_group_id as \n    varchar\n), '') || '-' || coalesce(cast(_fivetran_synced as \n    varchar\n), '') as \n    varchar\n)) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\""}, "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp": {"raw_sql": "select *\nfrom {{ var('advertiser_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.advertiser_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__advertiser_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__advertiser_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__advertiser_history_tmp.sql", "name": "stg_pinterest_ads__advertiser_history_tmp", "alias": "stg_pinterest_ads__advertiser_history_tmp", "checksum": {"name": "sha256", "checksum": "f15cffb10ad77bd938751c89e213e013b0fff950b2bae93940fde76345e63c89"}, "tags": [], "refs": [["advertiser_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__advertiser_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "view"}, "created_at": 1640812558.231331, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"advertiser_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history_tmp\""}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": {"raw_sql": "select *\nfrom {{ var('pin_promotion_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.pin_promotion_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_report_tmp", "alias": "stg_pinterest_ads__pin_promotion_report_tmp", "checksum": {"name": "sha256", "checksum": "18cfa5bd72f823f350eb4fd5f5400957cc628d66510236ca582e0186f4ed24f4"}, "tags": [], "refs": [["pin_promotion_report_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "view"}, "created_at": 1640812558.236036, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"pin_promotion_report_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_report_tmp\""}, "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__campaign_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "name": "stg_pinterest_ads__campaign_history_tmp", "alias": "stg_pinterest_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "tags": [], "refs": [["campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "view"}, "created_at": 1640812558.240674, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"campaign_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history_tmp\""}, "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_group_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.ad_group_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__ad_group_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "name": "stg_pinterest_ads__ad_group_history_tmp", "alias": "stg_pinterest_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "23726e9b019c8268e9aaae828c6c1430685538bef615e52f2c17436dd3615dfa"}, "tags": [], "refs": [["ad_group_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "view"}, "created_at": 1640812558.2459478, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"ad_group_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history_tmp\""}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": {"raw_sql": "select *\nfrom {{ var('pin_promotion_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.pin_promotion_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_pinterest", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_pinterest", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_history_tmp", "alias": "stg_pinterest_ads__pin_promotion_history_tmp", "checksum": {"name": "sha256", "checksum": "065bd24ab667bb3742cf11e3d96295c4c78ecdc04bb4d86a8bfa521482c55e71"}, "tags": [], "refs": [["pin_promotion_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_pinterest", "materialized": "view"}, "created_at": 1640812558.2508538, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"pin_promotion_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history_tmp\""}, "model.facebook_ads_source.stg_facebook_ads__basic_ad": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__basic_ad_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__basic_ad_tmp')),\n                staging_columns=get_basic_ad_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_basic_ad_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__basic_ad"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__basic_ad.sql", "original_file_path": "models/stg_facebook_ads__basic_ad.sql", "name": "stg_facebook_ads__basic_ad", "alias": "stg_facebook_ads__basic_ad", "checksum": {"name": "sha256", "checksum": "027a6dcd9090806d456a02a7637e4d39fc83d8edb5f33f8f8c85e498c992e86a"}, "tags": [], "refs": [["stg_facebook_ads__basic_ad_tmp"], ["stg_facebook_ads__basic_ad_tmp"]], "sources": [], "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__basic_ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1640812559.4850938, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__basic_ad_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    adset_name\n    \n , \n    cast(null as \n    float\n) as \n    \n    cpc\n    \n , \n    cast(null as \n    float\n) as \n    \n    cpm\n    \n , \n    cast(null as \n    float\n) as \n    \n    ctr\n    \n , \n    cast(null as date) as \n    \n    date\n    \n , \n    cast(null as \n    float\n) as \n    \n    frequency\n    \n , \n    cast(null as \n    int\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    int\n) as \n    \n    inline_link_clicks\n    \n , \n    cast(null as \n    int\n) as \n    \n    reach\n    \n , \n    cast(null as \n    float\n) as \n    \n    spend\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__basic_ad\""}, "model.facebook_ads_source.stg_facebook_ads__creative_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__creative_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__creative_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__creative_history.sql", "original_file_path": "models/stg_facebook_ads__creative_history.sql", "name": "stg_facebook_ads__creative_history", "alias": "stg_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "c74654b447b4ca1e0d10f1e5fb025312f0458f8b7683433cebd25a9d95f67bdc"}, "tags": [], "refs": [["stg_facebook_ads__creative_history_tmp"], ["stg_facebook_ads__creative_history_tmp"]], "sources": [], "description": "Each record in this table reflects a Facebook creative.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique record identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_link": {"name": "page_link", "description": "Link for the page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_feed_spec_link_urls": {"name": "asset_feed_spec_link_urls", "description": "Link to the asset feed spec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_child_attachments": {"name": "object_story_link_data_child_attachments", "description": "Link of the object story child attachments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_caption": {"name": "object_story_link_data_caption", "description": "Link of the object story caption", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_description": {"name": "object_story_link_data_description", "description": "Link of the object story description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_link": {"name": "object_story_link_data_link", "description": "Link of the object story link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_message": {"name": "object_story_link_data_message", "description": "Link of the object story message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ios": {"name": "template_app_link_spec_ios", "description": "Link of the object story spec for ios", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ipad": {"name": "template_app_link_spec_ipad", "description": "Link of the template app spec for ipad", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_android": {"name": "template_app_link_spec_android", "description": "Link of the template app for android", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_iphone": {"name": "template_app_link_spec_iphone", "description": "Link of the template app for iphone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1640812559.48249, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    actor_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    applink_treatment\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    asset_feed_spec_link_urls\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    body\n    \n , \n    cast(null as \n    int\n) as \n    \n    branded_content_sponsor_page_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    call_to_action_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    carousel_ad_link\n    \n , \n    cast(null as \n    int\n) as \n    \n    effective_instagram_story_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    effective_object_story_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    image_file\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    image_hash\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    image_url\n    \n , \n    cast(null as \n    int\n) as \n    \n    instagram_actor_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    instagram_permalink_url\n    \n , \n    cast(null as \n    int\n) as \n    \n    instagram_story_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    link_og_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    link_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    int\n) as \n    \n    object_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_app_link_spec_android\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_app_link_spec_ios\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_app_link_spec_ipad\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_app_link_spec_iphone\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_caption\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_child_attachments\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_description\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_link\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_story_link_data_message\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    object_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    page_link\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    page_message\n    \n , \n    cast(null as \n    int\n) as \n    \n    product_set_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_app_link_spec_android\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_app_link_spec_ios\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_app_link_spec_ipad\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_app_link_spec_iphone\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_caption\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_child_attachments\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_description\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_link\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_message\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_page_link\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    template_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    thumbnail_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    title\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    url_tags\n    \n , \n    cast(null as boolean) as \n    \n    use_page_actor_override\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    video_call_to_action_value_link\n    \n , \n    cast(null as \n    int\n) as \n    \n    video_id\n    \n \n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\""}, "model.facebook_ads_source.stg_facebook_ads__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__campaign_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__campaign_history.sql", "original_file_path": "models/stg_facebook_ads__campaign_history.sql", "name": "stg_facebook_ads__campaign_history", "alias": "stg_facebook_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "a6d89567bc6b46074191adc36db46e6a84280697789ba33ddc5faeb56707284f"}, "tags": [], "refs": [["stg_facebook_ads__campaign_history_tmp"], ["stg_facebook_ads__campaign_history_tmp"]], "sources": [], "description": "Each record in this table reflects a Facebook campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1640812559.475372, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__campaign_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    boosted_object_id\n    \n , \n    cast(null as boolean) as \n    \n    budget_rebalance_flag\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    buying_type\n    \n , \n    cast(null as boolean) as \n    \n    can_create_brand_lift_study\n    \n , \n    cast(null as boolean) as \n    \n    can_use_spend_cap\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    configured_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    daily_budget\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    effective_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    objective\n    \n , \n    cast(null as \n    int\n) as \n    \n    source_campaign_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    spend_cap\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    stop_time\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n \n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__campaign_history\""}, "model.facebook_ads_source.stg_facebook_ads__account_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__account_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__account_history.sql", "original_file_path": "models/stg_facebook_ads__account_history.sql", "name": "stg_facebook_ads__account_history", "alias": "stg_facebook_ads__account_history", "checksum": {"name": "sha256", "checksum": "245b808f02f27b223acce2c393df93b9089346a2dfec021eeaaf9ab438d11157"}, "tags": [], "refs": [["stg_facebook_ads__account_history_tmp"], ["stg_facebook_ads__account_history_tmp"]], "sources": [], "description": "Each record in this table reflects a Facebook ad account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1640812559.46808, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__account_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    account_status\n    \n , \n    cast(null as \n    float\n) as \n    \n    age\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_agency_representing_client\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_client_based_in_france\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_country_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_email_address\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_postal_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_province\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_street\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    agency_client_declaration_client_street_2\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_has_written_mandate_from_advertiser\n    \n , \n    cast(null as \n    int\n) as \n    \n    agency_client_declaration_is_client_paying_invoices\n    \n , \n    cast(null as \n    int\n) as \n    \n    amount_spent\n    \n , \n    cast(null as \n    int\n) as \n    \n    balance\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_country_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_created_by\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    business_manager_created_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    business_manager_manager_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_primary_page\n    \n , \n    cast(null as \n    int\n) as \n    \n    business_manager_timezone_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    business_manager_update_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_manager_updated_by\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_street\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_street_2\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_zip\n    \n , \n    cast(null as boolean) as \n    \n    can_create_brand_lift_study\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    capabilities\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    currency\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    disable_reason\n    \n , \n    cast(null as \n    int\n) as \n    \n    end_advertiser\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    end_advertiser_name\n    \n , \n    cast(null as boolean) as \n    \n    has_migrated_permissions\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    int\n) as \n    \n    io_number\n    \n , \n    cast(null as boolean) as \n    \n    is_attribution_spec_system_default\n    \n , \n    cast(null as boolean) as \n    \n    is_direct_deals_enabled\n    \n , \n    cast(null as boolean) as \n    \n    is_notifications_enabled\n    \n , \n    cast(null as \n    int\n) as \n    \n    is_personal\n    \n , \n    cast(null as boolean) as \n    \n    is_prepay_account\n    \n , \n    cast(null as boolean) as \n    \n    is_tax_id_required\n    \n , \n    cast(null as \n    int\n) as \n    \n    media_agency\n    \n , \n    cast(null as \n    int\n) as \n    \n    min_campaign_group_spend_cap\n    \n , \n    cast(null as \n    int\n) as \n    \n    min_daily_budget\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    next_bill_date\n    \n , \n    cast(null as boolean) as \n    \n    offsite_pixels_tos_accepted\n    \n , \n    cast(null as \n    int\n) as \n    \n    owner\n    \n , \n    cast(null as \n    int\n) as \n    \n    partner\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    salesforce_invoice_group_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    spend_cap\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_id_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_id_type\n    \n , \n    cast(null as \n    int\n) as \n    \n    timezone_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    timezone_name\n    \n , \n    cast(null as \n    float\n) as \n    \n    timezone_offset_hours_utc\n    \n \n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__account_history\""}, "model.facebook_ads_source.stg_facebook_ads__ad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__ad_history.sql", "original_file_path": "models/stg_facebook_ads__ad_history.sql", "name": "stg_facebook_ads__ad_history", "alias": "stg_facebook_ads__ad_history", "checksum": {"name": "sha256", "checksum": "33bcef2482cf9b7b791d788af5cfbcd29caae94b03cc4bda011342bacaa6c914"}, "tags": [], "refs": [["stg_facebook_ads__ad_history_tmp"], ["stg_facebook_ads__ad_history_tmp"]], "sources": [], "description": "Each record in this table reflects a Facebook ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1640812559.471064, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    ad_set_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    ad_source_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    bid_amount\n    \n , \n    cast(null as \n    int\n) as \n    \n    bid_info_actions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    bid_type\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    configured_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    effective_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    global_discriminatory_practices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    global_non_functional_landing_page\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    global_use_of_our_brand_assets\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    last_updated_by_app_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_facebook_discriminatory_practices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_facebook_non_functional_landing_page\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_facebook_use_of_our_brand_assets\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement_specific_instagram_discriminatory_practices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n \n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_history\""}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_set_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_set_history_tmp')),\n                staging_columns=get_ad_set_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_set_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_set_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "stg_facebook_ads__ad_set_history.sql", "original_file_path": "models/stg_facebook_ads__ad_set_history.sql", "name": "stg_facebook_ads__ad_set_history", "alias": "stg_facebook_ads__ad_set_history", "checksum": {"name": "sha256", "checksum": "c2280a510952f0a75838ea19362c3b5ed1488df69d668ec60bd700200d26146a"}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history_tmp"], ["stg_facebook_ads__ad_set_history_tmp"]], "sources": [], "description": "Each record in this table reflects a Facebook ad set.", "columns": {"ad_set_id": {"name": "ad_set_id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_source://models/stg_facebook_ads.yml", "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__ad_set_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "table"}, "created_at": 1640812559.4734578, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_set_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    int\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    adset_source_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    bid_amount\n    \n , \n    cast(null as \n    int\n) as \n    \n    bid_info_actions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    bid_strategy\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    billing_event\n    \n , \n    cast(null as \n    int\n) as \n    \n    budget_remaining\n    \n , \n    cast(null as \n    int\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    configured_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    daily_budget\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    destination_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    effective_status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    int\n) as \n    \n    id\n    \n , \n    cast(null as \n    int\n) as \n    \n    instagram_actor_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    lifetime_budget\n    \n , \n    cast(null as \n    int\n) as \n    \n    lifetime_imps\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    optimization_goal\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    promoted_object_application_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    promoted_object_custom_event_type\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_event_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    promoted_object_object_store_url\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_offer_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_page_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_pixel_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_place_page_set_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_product_catalog_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    promoted_object_product_set_id\n    \n , \n    cast(null as boolean) as \n    \n    recurring_budget_semantics\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    rf_prediction_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    int\n) as \n    \n    targeting_age_max\n    \n , \n    cast(null as \n    int\n) as \n    \n    targeting_age_min\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_app_install_state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_audience_network_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_college_years\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_connections\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_device_platforms\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_education_majors\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_education_schools\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_education_statuses\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_effective_audience_network_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_connections\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_publisher_categories\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_publisher_list_ids\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_excluded_user_device\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_exclusions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_facebook_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_flexible_spec\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_friends_of_connections\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_geo_locations_countries\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_geo_locations_location_types\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_instagram_positions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_locales\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_publisher_platforms\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_user_adclusters\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_user_device\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_user_os\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_wireless_carrier\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_work_employers\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    targeting_work_positions\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as boolean) as \n    \n    use_new_app_click\n    \n \n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_set_history\""}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": {"raw_sql": "select * from {{ var('ad_set_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_set_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_set_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "name": "stg_facebook_ads__ad_set_history_tmp", "alias": "stg_facebook_ads__ad_set_history_tmp", "checksum": {"name": "sha256", "checksum": "bf29e75751968ebb5e1d9847450d391fb0d3aa4801f83750addf2d44803f338f"}, "tags": [], "refs": [["facebook_ads_ad_set_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1640812558.44529, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_ad_set_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_set_history_tmp\""}, "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": {"raw_sql": "select * from {{ var('basic_ad') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__basic_ad_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__basic_ad_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "name": "stg_facebook_ads__basic_ad_tmp", "alias": "stg_facebook_ads__basic_ad_tmp", "checksum": {"name": "sha256", "checksum": "5a633882c5a43613ac72ce170100d435aa265b69fbc861654170386ae3f453b7"}, "tags": [], "refs": [["facebook_ads_basic_ad_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1640812558.450165, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_basic_ad_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__basic_ad_tmp\""}, "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": {"raw_sql": "select * from {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_history_tmp.sql", "name": "stg_facebook_ads__ad_history_tmp", "alias": "stg_facebook_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "66cb949cc32efc487c35c6ac049d29c76f364430c092c270a81ce248776e8435"}, "tags": [], "refs": [["facebook_ads_ad_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1640812558.454824, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_ad_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_history_tmp\""}, "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": {"raw_sql": "select * from {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__campaign_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "name": "stg_facebook_ads__campaign_history_tmp", "alias": "stg_facebook_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "f713d6482194a258d74381dc5fee6600c579709da850acb3f90d6c4fd5e98ebc"}, "tags": [], "refs": [["facebook_ads_campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1640812558.4594471, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_campaign_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__campaign_history_tmp\""}, "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": {"raw_sql": "select * from {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_creative_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__creative_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__creative_history_tmp.sql", "name": "stg_facebook_ads__creative_history_tmp", "alias": "stg_facebook_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "9739630c2ad58df6c8af45b975184033f33d253995965dbbeec7cdfb859356b9"}, "tags": [], "refs": [["facebook_ads_creative_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1640812558.464736, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_creative_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history_tmp\""}, "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": {"raw_sql": "select * from {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_facebook_ads", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__account_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "tmp/stg_facebook_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__account_history_tmp.sql", "name": "stg_facebook_ads__account_history_tmp", "alias": "stg_facebook_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "32a3a39947f962fa98285ef5da42266cc9597e61549d28313917111c3d05c4b8"}, "tags": [], "refs": [["facebook_ads_account_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_ads", "materialized": "view"}, "created_at": 1640812558.469447, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"facebook_ads_account_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__account_history_tmp\""}, "model.snapchat_ads_source.stg_snapchat__ad_squad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__ad_squad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__ad_squad_history_tmp')),\n                staging_columns=get_ad_squad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_squad_id,\n        campaign_id,\n        name as ad_squad_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_squad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_squad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp", "model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__ad_squad_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_squad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__ad_squad_history.sql", "original_file_path": "models/stg_snapchat__ad_squad_history.sql", "name": "stg_snapchat__ad_squad_history", "alias": "stg_snapchat__ad_squad_history", "checksum": {"name": "sha256", "checksum": "653d6e09f8e0b4d899f63cd4b23d25cda0b8b77be8c7937a5acb0e7ac33bdb3c"}, "tags": [], "refs": [["stg_snapchat__ad_squad_history_tmp"], ["stg_snapchat__ad_squad_history_tmp"]], "sources": [], "description": "Each record in this table represents a historic version of an ad squad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID fo the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_name": {"name": "ad_squad_name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__ad_squad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.5454311, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_squad_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    audience_size_maximum\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    audience_size_minimum\n    \n , \n    cast(null as boolean) as \n    \n    auto_bid\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    bid_estimate_maximum\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    bid_estimate_minimum\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    bid_micro\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    billing_event\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    daily_budget_micro\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    lifetime_budget_micro\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    lifetime_spend_micro\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    optimization_goal\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    placement\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as boolean) as \n    \n    targeting_regulated_content\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_squad_id,\n        campaign_id,\n        name as ad_squad_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_squad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_squad_history\""}, "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__creative_url_tag_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__creative_url_tag_history_tmp')),\n                staging_columns=get_creative_url_tag_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select  \n        creative_id,\n        key as param_key,\n        value as param_value,\n        updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id, param_key order by updated_at desc) =1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_creative_url_tag_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp", "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__creative_url_tag_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__creative_url_tag_history.sql", "original_file_path": "models/stg_snapchat__creative_url_tag_history.sql", "name": "stg_snapchat__creative_url_tag_history", "alias": "stg_snapchat__creative_url_tag_history", "checksum": {"name": "sha256", "checksum": "fad72e54e94eaf52585583f26f8501c007ee0bf75c39f90105cc481f82acc793"}, "tags": [], "refs": [["stg_snapchat__creative_url_tag_history_tmp"], ["stg_snapchat__creative_url_tag_history_tmp"]], "sources": [], "description": "Each record in this table represents a URL paramter key-value pair for a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "param_key": {"name": "param_key", "description": "The URL parameter key, i.e. UTM_SOURCE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "param_value": {"name": "param_value", "description": "The URL parameter value, i.e. Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__creative_url_tag_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.552345, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_url_tag_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    key\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    value\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select  \n        creative_id,\n        key as param_key,\n        value as param_value,\n        updated_at\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id, param_key order by updated_at desc) =1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_url_tag_history\""}, "model.snapchat_ads_source.stg_snapchat__ad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_id,\n        ad_squad_id,\n        creative_id,\n        name as ad_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_history_tmp", "model.snapchat_ads_source.stg_snapchat__ad_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__ad_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__ad_history.sql", "original_file_path": "models/stg_snapchat__ad_history.sql", "name": "stg_snapchat__ad_history", "alias": "stg_snapchat__ad_history", "checksum": {"name": "sha256", "checksum": "ec39f55d2f8a75f1ea498906a4d1a638d5619a5cf49307db41c47fbe2c2c5e3d"}, "tags": [], "refs": [["stg_snapchat__ad_history_tmp"], ["stg_snapchat__ad_history_tmp"]], "sources": [], "description": "Each record in this table represents a historic version of an ad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the related ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__ad_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.540843, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_squad_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    creative_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    review_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    review_status_reason\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_id,\n        ad_squad_id,\n        creative_id,\n        name as ad_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_history\""}, "model.snapchat_ads_source.stg_snapchat__creative_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__creative_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as creative_id,\n        ad_account_id,\n        name as creative_name,\n        web_view_url as url,\n        _fivetran_synced\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id order by _fivetran_synced desc) =1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__creative_history_tmp", "model.snapchat_ads_source.stg_snapchat__creative_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__creative_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat__creative_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__creative_history.sql", "original_file_path": "models/stg_snapchat__creative_history.sql", "name": "stg_snapchat__creative_history", "alias": "stg_snapchat__creative_history", "checksum": {"name": "sha256", "checksum": "2da8b35552c60d7f7c82e499f9b521aaf1ebfe1c9a02cef31d6840165e9c16c0"}, "tags": [], "refs": [["stg_snapchat__creative_history_tmp"], ["stg_snapchat__creative_history_tmp"]], "sources": [], "description": "Each record in this table represents a historic version of a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creatve_id": {"name": "creatve_id", "description": "The ID of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the creative if the creative is of type 'web view'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__creative_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.5503879, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_product\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    app_install_android_app_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    app_install_app_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    app_install_icon_media_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    app_install_ios_app_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    attachment_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    brand_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    call_to_action\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deep_link_android_app_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deep_link_app_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deep_link_icon_media_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deep_link_ios_app_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deep_link_uri\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    headline\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    longform_video_media_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    packaging_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    playback_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    preview_creative_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    review_status\n    \n , \n    cast(null as boolean) as \n    \n    shareable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    top_snap_crop_position\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    top_snap_media_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n , \n    cast(null as boolean) as \n    \n    web_view_allow_snap_javascript_sdk\n    \n , \n    cast(null as boolean) as \n    \n    web_view_block_preload\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    web_view_url\n    \n , \n    cast(null as boolean) as \n    \n    web_view_use_immersive_mode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as creative_id,\n        ad_account_id,\n        name as creative_name,\n        web_view_url as url,\n        _fivetran_synced\n    from fields\n), \n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by creative_id order by _fivetran_synced desc) =1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_history\""}, "model.snapchat_ads_source.stg_snapchat__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        ad_account_id,\n        name as campaign_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__campaign_history_tmp", "model.snapchat_ads_source.stg_snapchat__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__campaign_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat__campaign_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__campaign_history.sql", "original_file_path": "models/stg_snapchat__campaign_history.sql", "name": "stg_snapchat__campaign_history", "alias": "stg_snapchat__campaign_history", "checksum": {"name": "sha256", "checksum": "b262d61f04c0d7569f14ce634fde8eea060ec2692f03db8487aa9e96102cab79"}, "tags": [], "refs": [["stg_snapchat__campaign_history_tmp"], ["stg_snapchat__campaign_history_tmp"]], "sources": [], "description": "Each record in this table represents a historic version of a campaign in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.547808, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__campaign_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_account_id\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    daily_budget_micro\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    end_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    lifetime_spend_cap_micro\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    objective\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    start_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        ad_account_id,\n        name as campaign_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__campaign_history\""}, "model.snapchat_ads_source.stg_snapchat__ad_hourly_report": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__ad_hourly_report_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__ad_hourly_report_tmp')),\n                staging_columns=get_ad_hourly_report_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_hour,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_hourly_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__ad_hourly_report"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__ad_hourly_report.sql", "original_file_path": "models/stg_snapchat__ad_hourly_report.sql", "name": "stg_snapchat__ad_hourly_report", "alias": "stg_snapchat__ad_hourly_report", "checksum": {"name": "sha256", "checksum": "88d133ff2e3f8a662f6f8d2682d9abdcf61c618536cf00503ecea7c5eb16cae8"}, "tags": [], "refs": [["stg_snapchat__ad_hourly_report_tmp"], ["stg_snapchat__ad_hourly_report_tmp"]], "sources": [], "description": "Each record represents an hourly performance summary for an ad in Snapchat.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad that the report relates to in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_hour": {"name": "date_hour", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend for an ad in the hour of the record converted from micros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__ad_hourly_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.543104, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_hourly_report_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ad_id\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    android_installs\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_avg_view_time_millis\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_frequency\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_quartile_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_quartile_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_quartile_3\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_total_view_time_millis\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_uniques\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    attachment_view_completion\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    avg_screen_time_millis\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    avg_view_time_millis\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_add_billing\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_add_cart\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_app_opens\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_level_completes\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_page_views\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_purchases\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_purchases_value\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_save\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_searches\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_sign_ups\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_start_checkout\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    conversion_view_content\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    frequency\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    ios_installs\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    quartile_1\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    quartile_2\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    quartile_3\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    saves\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    screen_time_millis\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    shares\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    spend\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    story_completes\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    story_opens\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    swipe_up_percent\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    swipes\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    total_installs\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    uniques\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    video_views\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    view_completion\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    view_time_millis\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_hour,\n        impressions,\n        (spend / 1000000.0) as spend,\n        swipes\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_hourly_report\""}, "model.snapchat_ads_source.stg_snapchat__ad_account_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_snapchat__ad_account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_snapchat__ad_account_history_tmp')),\n                staging_columns=get_ad_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_account_id,\n        name as ad_account_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_account_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snapchat_ads_source.get_ad_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp", "model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "stg_snapchat__ad_account_history"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_account_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "stg_snapchat__ad_account_history.sql", "original_file_path": "models/stg_snapchat__ad_account_history.sql", "name": "stg_snapchat__ad_account_history", "alias": "stg_snapchat__ad_account_history", "checksum": {"name": "sha256", "checksum": "095369d8fdf09de21e86d746b08b206f2b11d66356564e0a95b2b2398c6c6984"}, "tags": [], "refs": [["stg_snapchat__ad_account_history_tmp"], ["stg_snapchat__ad_account_history_tmp"]], "sources": [], "description": "Each record in this table represents a historic version of an ad account in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_name": {"name": "ad_account_name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snapchat_ads_source://models/stg_snapchat.yml", "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat__ad_account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "table"}, "created_at": 1640812559.538165, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_account_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    advertiser\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_at\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    currency\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    lifetime_spend_cap_micro\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    organization_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    timezone\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    type\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_account_id,\n        name as ad_account_name,\n        _fivetran_synced\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_account_id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_account_history\""}, "model.snapchat_ads_source.stg_snapchat__ad_history_tmp": {"raw_sql": "select * from {{ var('ad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__ad_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__ad_history_tmp.sql", "name": "stg_snapchat__ad_history_tmp", "alias": "stg_snapchat__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "66cb949cc32efc487c35c6ac049d29c76f364430c092c270a81ce248776e8435"}, "tags": [], "refs": [["snapchat_ad_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__ad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.6830552, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_history_tmp\""}, "model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp": {"raw_sql": "select * from {{ var('ad_account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__ad_account_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__ad_account_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__ad_account_history_tmp.sql", "name": "stg_snapchat__ad_account_history_tmp", "alias": "stg_snapchat__ad_account_history_tmp", "checksum": {"name": "sha256", "checksum": "14d7cb2c8ee47ff509f7aebeffa720d18911aa9216c570dc84d96d6aa7831112"}, "tags": [], "refs": [["snapchat_ad_account_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__ad_account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.68859, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_account_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_account_history_tmp\""}, "model.snapchat_ads_source.stg_snapchat__creative_history_tmp": {"raw_sql": "select * from {{ var('creative_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_creative_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__creative_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__creative_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__creative_history_tmp.sql", "name": "stg_snapchat__creative_history_tmp", "alias": "stg_snapchat__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "9739630c2ad58df6c8af45b975184033f33d253995965dbbeec7cdfb859356b9"}, "tags": [], "refs": [["snapchat_creative_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__creative_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.694628, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_creative_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_history_tmp\""}, "model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp": {"raw_sql": "select * from {{ var('ad_hourly_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__ad_hourly_report_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__ad_hourly_report_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__ad_hourly_report_tmp.sql", "name": "stg_snapchat__ad_hourly_report_tmp", "alias": "stg_snapchat__ad_hourly_report_tmp", "checksum": {"name": "sha256", "checksum": "1ee47c26c82e74e610f14151655269598a8fa853cecb0050cc15a788b5b76931"}, "tags": [], "refs": [["snapchat_ad_hourly_report_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__ad_hourly_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.699696, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_hourly_report_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_hourly_report_tmp\""}, "model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp": {"raw_sql": "select * from {{ var('ad_squad_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__ad_squad_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__ad_squad_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__ad_squad_history_tmp.sql", "name": "stg_snapchat__ad_squad_history_tmp", "alias": "stg_snapchat__ad_squad_history_tmp", "checksum": {"name": "sha256", "checksum": "5f7ce1fdaf5269d5e8a329d99d10bdaebb735b1bf011c746d3d8db0444175227"}, "tags": [], "refs": [["snapchat_ad_squad_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__ad_squad_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.7043421, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_ad_squad_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_squad_history_tmp\""}, "model.snapchat_ads_source.stg_snapchat__campaign_history_tmp": {"raw_sql": "select * from {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__campaign_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__campaign_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__campaign_history_tmp.sql", "name": "stg_snapchat__campaign_history_tmp", "alias": "stg_snapchat__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "f713d6482194a258d74381dc5fee6600c579709da850acb3f90d6c4fd5e98ebc"}, "tags": [], "refs": [["snapchat_campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.7089732, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_campaign_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__campaign_history_tmp\""}, "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp": {"raw_sql": "select * from {{ var('creative_url_tag_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_snapchat_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_snapchat_ads", "fqn": ["snapchat_ads_source", "tmp", "stg_snapchat__creative_url_tag_history_tmp"], "unique_id": "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "tmp/stg_snapchat__creative_url_tag_history_tmp.sql", "original_file_path": "models/tmp/stg_snapchat__creative_url_tag_history_tmp.sql", "name": "stg_snapchat__creative_url_tag_history_tmp", "alias": "stg_snapchat__creative_url_tag_history_tmp", "checksum": {"name": "sha256", "checksum": "d44ea62a9567b49f4fb07d4daebe62759fc669d7ebbc5ae4fded35b3a9f4bc09"}, "tags": [], "refs": [["snapchat_creative_url_tag_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/tmp/stg_snapchat__creative_url_tag_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_snapchat_ads", "materialized": "view"}, "created_at": 1640812558.713589, "compiled_sql": "select * from \"postgres\".\"ad_reporting_integration_tests\".\"snapchat_creative_url_tag_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_url_tag_history_tmp\""}, "model.microsoft_ads.microsoft_ads__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('microsoft_ads_ad_performance_daily_report') }}\n\n), ads as (\n\n    select *\n    from {{ var('microsoft_ads_ad_history') }}\n    where is_most_recent_version = True\n\n), ad_groups as (\n\n    select *\n    from {{ var('microsoft_ads_ad_group_history') }}\n    where is_most_recent_version = True\n\n), campaigns as (\n\n    select *\n    from {{ var('microsoft_ads_campaign_history') }}\n    where is_most_recent_version = True\n\n), accounts as (\n\n    select *\n    from {{ var('microsoft_ads_account_history') }}\n    where is_most_recent_version = True\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__ad_adapter"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_adapter", "package_name": "microsoft_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__ad_adapter.sql", "original_file_path": "models/microsoft_ads__ad_adapter.sql", "name": "microsoft_ads__ad_adapter", "alias": "microsoft_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "60fe48771ded6b0f53447054ef1921ab4ca9ddb602a9c03a747625a0549ee25a"}, "tags": [], "refs": [["stg_microsoft_ads__ad_performance_daily_report"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the ad and url level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table"}, "created_at": 1640812559.599157, "compiled_sql": "with report as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_performance_daily_report\"\n\n), ads as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_history\"\n    where is_most_recent_version = True\n\n), ad_groups as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_group_history\"\n    where is_most_recent_version = True\n\n), campaigns as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__campaign_history\"\n    where is_most_recent_version = True\n\n), accounts as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__account_history\"\n    where is_most_recent_version = True\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__ad_adapter\""}, "model.microsoft_ads.microsoft_ads__ad_group_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__ad_group_report"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_group_report", "package_name": "microsoft_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__ad_group_report.sql", "original_file_path": "models/microsoft_ads__ad_group_report.sql", "name": "microsoft_ads__ad_group_report", "alias": "microsoft_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "089a8787c8381d8eb6bed194a491d594dab7f25677f11f887574ae12b22df22b"}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__ad_group_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table"}, "created_at": 1640812559.6029902, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__ad_group_report\""}, "model.microsoft_ads.microsoft_ads__account_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__account_report"], "unique_id": "model.microsoft_ads.microsoft_ads__account_report", "package_name": "microsoft_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__account_report.sql", "original_file_path": "models/microsoft_ads__account_report.sql", "name": "microsoft_ads__account_report", "alias": "microsoft_ads__account_report", "checksum": {"name": "sha256", "checksum": "d0e51d24304c862c15a16157de8972a3f21d97a06c47ee62d1bd7dca5d75096d"}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__account_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table"}, "created_at": 1640812559.5922801, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__account_report\""}, "model.microsoft_ads.microsoft_ads__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "microsoft_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_microsoft_ads", "fqn": ["microsoft_ads", "microsoft_ads__campaign_report"], "unique_id": "model.microsoft_ads.microsoft_ads__campaign_report", "package_name": "microsoft_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads", "path": "microsoft_ads__campaign_report.sql", "original_file_path": "models/microsoft_ads__campaign_report.sql", "name": "microsoft_ads__campaign_report", "alias": "microsoft_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "f0d1fe2c5aaafd12ae2683b826651bf29dc297421d55d5956824eda828657ba4"}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "microsoft_ads://models/microsoft_ads.yml", "compiled_path": "target/compiled/microsoft_ads/models/microsoft_ads__campaign_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "microsoft_ads", "materialized": "table"}, "created_at": 1640812559.606718, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__ad_adapter\"\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_microsoft_ads\".\"microsoft_ads__campaign_report\""}, "model.twitter_ads_source.stg_twitter_ads__line_item_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_history_tmp')),\n                staging_columns=get_line_item_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by line_item_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_line_item_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "stg_twitter_ads__line_item_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__line_item_history.sql", "original_file_path": "models/stg_twitter_ads__line_item_history.sql", "name": "stg_twitter_ads__line_item_history", "alias": "stg_twitter_ads__line_item_history", "checksum": {"name": "sha256", "checksum": "f1ac40767d76fd9083add8db3cba3698ec596f1e8e10d8d44e43f33c6af44644"}, "tags": [], "refs": [["stg_twitter_ads__line_item_history_tmp"], ["stg_twitter_ads__line_item_history_tmp"]], "sources": [], "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__line_item_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812559.666822, "compiled_sql": "with source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__line_item_history_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    advertiser_domain\n    \n , \n    cast(null as \n    int\n) as \n    \n    advertiser_user_id\n    \n , \n    cast(null as boolean) as \n    \n    automatically_select_bid\n    \n , \n    cast(null as \n    int\n) as \n    \n    bid_amount_local_micro\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    bid_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    bid_unit\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    charge_by\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    varchar\n) as \n    \n    creative_source\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    currency\n    \n , \n    cast(null as boolean) as is_deleted , \n    cast(null as \n    timestamp\n) as end_timestamp , \n    cast(null as \n    varchar\n) as \n    \n    entity_status\n    \n , \n    cast(null as \n    varchar\n) as line_item_id , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    objective\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    optimization\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    primary_web_event_tag\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    product_type\n    \n , \n    cast(null as \n    timestamp\n) as start_timestamp , \n    cast(null as \n    int\n) as \n    \n    target_cpa_local_micro\n    \n , \n    cast(null as \n    int\n) as \n    \n    total_budget_amount_local_micro\n    \n , \n    cast(null as \n    timestamp\n) as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by line_item_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__line_item_history\""}, "model.twitter_ads_source.stg_twitter_ads__campaign_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "stg_twitter_ads__campaign_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__campaign_history.sql", "original_file_path": "models/stg_twitter_ads__campaign_history.sql", "name": "stg_twitter_ads__campaign_history", "alias": "stg_twitter_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "8ca02f8ef1f5cc8cf28b0afb6343df112654b02eeecd724209196b6dbd2e1514"}, "tags": [], "refs": [["stg_twitter_ads__campaign_history_tmp"], ["stg_twitter_ads__campaign_history_tmp"]], "sources": [], "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__campaign_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812559.6568289, "compiled_sql": "with source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__campaign_history_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    varchar\n) as \n    \n    currency\n    \n , \n    cast(null as \n    int\n) as \n    \n    daily_budget_amount_local_micro\n    \n , \n    cast(null as boolean) as is_deleted , \n    cast(null as \n    int\n) as \n    \n    duration_in_days\n    \n , \n    cast(null as \n    timestamp\n) as end_timestamp , \n    cast(null as \n    varchar\n) as \n    \n    entity_status\n    \n , \n    cast(null as \n    int\n) as \n    \n    frequency_cap\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    funding_instrument_id\n    \n , \n    cast(null as \n    varchar\n) as campaign_id , \n    cast(null as \n    varchar\n) as campaign_name , \n    cast(null as boolean) as is_servable , \n    cast(null as boolean) as \n    \n    standard_delivery\n    \n , \n    cast(null as \n    timestamp\n) as start_timestamp , \n    cast(null as \n    int\n) as \n    \n    total_budget_amount_local_micro\n    \n , \n    cast(null as \n    timestamp\n) as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__campaign_history\""}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_report_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_report_tmp')),\n                staging_columns=get_promoted_tweet_report_columns()\n            )\n        }}\n\n    from source\n\n), spend_calc as (\n\n    select\n        *,\n        round(spend_micro / 1000000.0,2) as spend\n    from renamed\n\n)\n\nselect * from spend_calc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_report.sql", "name": "stg_twitter_ads__promoted_tweet_report", "alias": "stg_twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "5fb2632f5efb7d76f9560f4d5dd51f9dbdf196e6cd6d6dcd19f5f1cb64607dae"}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report_tmp"], ["stg_twitter_ads__promoted_tweet_report_tmp"]], "sources": [], "description": "Each record represents the performance of a promoted tweet on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.BD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__promoted_tweet_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812559.709654, "compiled_sql": "with source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_report_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    account_id\n    \n , \n    cast(null as \n    int\n) as spend_micro , \n    cast(null as \n    int\n) as \n    \n    clicks\n    \n , \n    cast(null as \n    timestamp\n) as date_day , \n    cast(null as \n    int\n) as \n    \n    impressions\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    promoted_tweet_id\n    \n , \n    cast(null as \n    int\n) as \n    \n    url_clicks\n    \n \n\n\n\n    from source\n\n), spend_calc as (\n\n    select\n        *,\n        round(spend_micro / 1000000.0,2) as spend\n    from renamed\n\n)\n\nselect * from spend_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_report\""}, "model.twitter_ads_source.stg_twitter_ads__account_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "stg_twitter_ads__account_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__account_history.sql", "original_file_path": "models/stg_twitter_ads__account_history.sql", "name": "stg_twitter_ads__account_history", "alias": "stg_twitter_ads__account_history", "checksum": {"name": "sha256", "checksum": "c8a3ddcfbffbf006eab6c6a5623631db378ec6ffb3c154555b91afad266cf137"}, "tags": [], "refs": [["stg_twitter_ads__account_history_tmp"], ["stg_twitter_ads__account_history_tmp"]], "sources": [], "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "The random encryption key used to has data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812559.649607, "compiled_sql": "with source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__account_history_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    approval_status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    business_name\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as boolean) as is_deleted , \n    cast(null as \n    varchar\n) as account_id , \n    cast(null as \n    varchar\n) as \n    \n    industry_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    salt\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    timezone\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    timezone_switch_at\n    \n , \n    cast(null as \n    timestamp\n) as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__account_history\""}, "model.twitter_ads_source.stg_twitter_ads__tweet_url": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet_url_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_url_tmp')),\n                staging_columns=get_tweet_url_columns()\n            )\n        }}\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('expanded_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('expanded_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('expanded_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_term') }} as utm_term\n    from renamed\n\n)\n\nselect * from url_fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_tweet_url_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "stg_twitter_ads__tweet_url"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__tweet_url.sql", "original_file_path": "models/stg_twitter_ads__tweet_url.sql", "name": "stg_twitter_ads__tweet_url", "alias": "stg_twitter_ads__tweet_url", "checksum": {"name": "sha256", "checksum": "63209d65decd1dbba6b5e8a679297014e165084a010e835feb3dc1711a4917c5"}, "tags": [], "refs": [["stg_twitter_ads__tweet_url_tmp"], ["stg_twitter_ads__tweet_url_tmp"]], "sources": [], "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__tweet_url.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812559.717841, "compiled_sql": "with source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__tweet_url_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    display_url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    expanded_url\n    \n , \n    cast(null as \n    int\n) as \n    \n    index\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    indices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tweet_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    url\n    \n \n\n\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        \n\n    split_part(\n        expanded_url,\n        '?',\n        1\n        )\n\n as base_url,\n        \n    \n    cast(\n\n    split_part(\n        \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'android-app://',\n        ''\n    )\n    \n\n,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/',\n        1\n        )\n\n,\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_host,\n        '/' || \n    \n    cast(\n\n    split_part(\n        \n\n    right(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ), 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    ) - 1\n            )\n    ),\n        '?',\n        1\n        )\n\n as \n    varchar\n)\n as url_path,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        expanded_url,\n        'utm_source=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_source,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        expanded_url,\n        'utm_medium=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_medium,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        expanded_url,\n        'utm_campaign=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_campaign,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        expanded_url,\n        'utm_content=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_content,\n        nullif(\n\n    split_part(\n        \n\n    split_part(\n        expanded_url,\n        'utm_term=',\n        2\n        )\n\n,\n        '&',\n        1\n        )\n\n,'') as utm_term\n    from renamed\n\n)\n\nselect * from url_fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__tweet_url\""}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_history_tmp')),\n                staging_columns=get_promoted_tweet_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by promoted_tweet_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_history.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_history.sql", "name": "stg_twitter_ads__promoted_tweet_history", "alias": "stg_twitter_ads__promoted_tweet_history", "checksum": {"name": "sha256", "checksum": "3736846d80ebd96251cc90dbe5133f3bd439990dc6d8024d268c137cec121f30"}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_history_tmp"], ["stg_twitter_ads__promoted_tweet_history_tmp"]], "sources": [], "description": "TEach record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.BD", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "twitter_ads_source://models/stg_twitter_ads.yml", "compiled_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__promoted_tweet_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812559.670787, "compiled_sql": "with source as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_history_tmp\"\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    approval_status\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as boolean) as is_deleted , \n    cast(null as \n    varchar\n) as \n    \n    entity_status\n    \n , \n    cast(null as \n    varchar\n) as promoted_tweet_id , \n    cast(null as \n    varchar\n) as \n    \n    line_item_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tweet_id\n    \n , \n    cast(null as \n    timestamp\n) as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by promoted_tweet_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_history\""}, "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": {"raw_sql": "select *\nfrom {{ var('tweet_url') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_tweet_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__tweet_url_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__tweet_url_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "name": "stg_twitter_ads__tweet_url_tmp", "alias": "stg_twitter_ads__tweet_url_tmp", "checksum": {"name": "sha256", "checksum": "a3a5504a33848aa67f78a84a61c25b21c0afd6de09849963d1031c8f003b3e2d"}, "tags": [], "refs": [["twitter_tweet_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812558.850822, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"twitter_tweet_url_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__tweet_url_tmp\""}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_report') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_report_tmp", "alias": "stg_twitter_ads__promoted_tweet_report_tmp", "checksum": {"name": "sha256", "checksum": "bee4be3006388dac42d90797172a8b1060fd93c4afacff61aa61c0f48881d922"}, "tags": [], "refs": [["twitter_promoted_tweet_report_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812558.855447, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"twitter_promoted_tweet_report_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_report_tmp\""}, "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": {"raw_sql": "select *\nfrom {{ var('line_item_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_line_item_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__line_item_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__line_item_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "name": "stg_twitter_ads__line_item_history_tmp", "alias": "stg_twitter_ads__line_item_history_tmp", "checksum": {"name": "sha256", "checksum": "50568a1b16de7a4a21448a595d2dac8a5ef6cc53134150ba5ccca4a9ce8ac3f7"}, "tags": [], "refs": [["twitter_line_item_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812558.8599832, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"twitter_line_item_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__line_item_history_tmp\""}, "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_campaign_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__campaign_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "name": "stg_twitter_ads__campaign_history_tmp", "alias": "stg_twitter_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "d695c134485444137d663f41732085a5cfa81de49f3ec2676e9f8e58f1c62c02"}, "tags": [], "refs": [["twitter_campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812558.8651881, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"twitter_campaign_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__campaign_history_tmp\""}, "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__account_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__account_history_tmp.sql", "name": "stg_twitter_ads__account_history_tmp", "alias": "stg_twitter_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "6151f500892f8291a211d3042fa8a914d37cc5bd4934ec2821bf61b6391f9b3a"}, "tags": [], "refs": [["twitter_account_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812558.869729, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"twitter_account_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__account_history_tmp\""}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_twitter_ads", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_history_tmp", "alias": "stg_twitter_ads__promoted_tweet_history_tmp", "checksum": {"name": "sha256", "checksum": "318c404eef398ff876b5c1aeed0868355f7adc9f8a87e8e253a21d9a111d67e9"}, "tags": [], "refs": [["twitter_promoted_tweet_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_ads"}, "created_at": 1640812558.874563, "compiled_sql": "select *\nfrom \"postgres\".\"ad_reporting_integration_tests\".\"twitter_promoted_tweet_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_stg_twitter_ads\".\"stg_twitter_ads__promoted_tweet_history_tmp\""}, "model.linkedin.linkedin__campaign_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_id,\n        campaign_name,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_linkedin", "fqn": ["linkedin", "linkedin__campaign_ad_report"], "unique_id": "model.linkedin.linkedin__campaign_ad_report", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin__campaign_ad_report.sql", "original_file_path": "models/linkedin__campaign_ad_report.sql", "name": "linkedin__campaign_ad_report", "alias": "linkedin__campaign_ad_report", "checksum": {"name": "sha256", "checksum": "987d650d267a6f163aaa4bc1dd15618debfda818ceace21c57488a13d7271709"}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin__campaign_ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin"}, "created_at": 1640812559.741336, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_id,\n        campaign_name,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__campaign_ad_report\""}, "model.linkedin.linkedin__account_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_linkedin", "fqn": ["linkedin", "linkedin__account_ad_report"], "unique_id": "model.linkedin.linkedin__account_ad_report", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin__account_ad_report.sql", "original_file_path": "models/linkedin__account_ad_report.sql", "name": "linkedin__account_ad_report", "alias": "linkedin__account_ad_report", "checksum": {"name": "sha256", "checksum": "65c5ba15940b30007db39de301719d32878a76f4d856c51481b5b0569eef4480"}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the account level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin__account_ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin"}, "created_at": 1640812559.736696, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\n\n), grouped as (\n\n    select \n        date_day,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__account_ad_report\""}, "model.linkedin.linkedin__campaign_group_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_linkedin", "fqn": ["linkedin", "linkedin__campaign_group_ad_report"], "unique_id": "model.linkedin.linkedin__campaign_group_ad_report", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin__campaign_group_ad_report.sql", "original_file_path": "models/linkedin__campaign_group_ad_report.sql", "name": "linkedin__campaign_group_ad_report", "alias": "linkedin__campaign_group_ad_report", "checksum": {"name": "sha256", "checksum": "e89ed71c20435b9d189feeb861bf042d60fdbfe2dfa70e255d7e745e7dc44758"}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the campaign group level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin__campaign_group_ad_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin"}, "created_at": 1640812559.745337, "compiled_sql": "with adapter as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__campaign_group_ad_report\""}, "model.linkedin.linkedin__ad_adapter": {"raw_sql": "with metrics as (\n\n    select *\n    from {{ var('ad_analytics_by_creative') }}\n\n), creatives as (\n\n    select *\n    from {{ var('creative_history') }}\n\n), campaigns as (\n    \n    select *\n    from {{ var('campaign_history') }}\n\n), campaign_groups as (\n    \n    select *\n    from {{ var('campaign_group_history') }}\n\n), accounts as (\n    \n    select *\n    from {{ var('account_history') }}\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost,\n        metrics.daily_creative_id,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id\n\n        {% if var('linkedin__passthrough_metrics') %}\n        , {{ 'metrics.' ~ var('linkedin__passthrough_metrics')  | join(', metrics.') }}\n        {% endif %}\n\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= creatives.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(creatives.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= campaigns.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(campaigns.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= campaign_groups.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(campaign_groups.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= accounts.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(accounts.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.timestamp_add", "macro.dbt_utils.current_timestamp"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__creative_history", "model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_linkedin", "fqn": ["linkedin", "linkedin__ad_adapter"], "unique_id": "model.linkedin.linkedin__ad_adapter", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "linkedin__ad_adapter.sql", "original_file_path": "models/linkedin__ad_adapter.sql", "name": "linkedin__ad_adapter", "alias": "linkedin__ad_adapter", "checksum": {"name": "sha256", "checksum": "4ff3deb911d7a2c5c2f784fbbb017352fb33a1b51e7f499f584ff2343d4aba60"}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative"], ["stg_linkedin__creative_history"], ["stg_linkedin__campaign_history"], ["stg_linkedin__campaign_group_history"], ["stg_linkedin__account_history"]], "sources": [], "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"daily_creative_id": {"name": "daily_creative_id", "description": "A unique key, a combination of creative_id and date_day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin://models/linkedin.yml", "compiled_path": "target/compiled/linkedin/models/linkedin__ad_adapter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "linkedin"}, "created_at": 1640812559.733547, "compiled_sql": "with metrics as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative\"\n\n), creatives as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history\"\n\n), campaigns as (\n    \n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history\"\n\n), campaign_groups as (\n    \n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history\"\n\n), accounts as (\n    \n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history\"\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost,\n        metrics.daily_creative_id,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id\n\n        \n\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n >= creatives.valid_from\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n <= coalesce(creatives.valid_to, \n\n    \n    current_timestamp::\n    timestamp\n\n + ((interval '1 day') * (1))\n\n)\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n >= campaigns.valid_from\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n <= coalesce(campaigns.valid_to, \n\n    \n    current_timestamp::\n    timestamp\n\n + ((interval '1 day') * (1))\n\n)\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n >= campaign_groups.valid_from\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n <= coalesce(campaign_groups.valid_to, \n\n    \n    current_timestamp::\n    timestamp\n\n + ((interval '1 day') * (1))\n\n)\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n >= accounts.valid_from\n        and \n\n    metrics.date_day + ((interval '1 day') * (1))\n\n <= coalesce(accounts.valid_to, \n\n    \n    current_timestamp::\n    timestamp\n\n + ((interval '1 day') * (1))\n\n)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\""}, "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id.e0ba88702d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "unique_stg_microsoft_ads__account_history_account_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id.e0ba88702d", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "unique_stg_microsoft_ads__account_history_account_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__account_history_account_version_id", "alias": "unique_stg_microsoft_ads__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/unique_stg_microsoft_ads__account_history_account_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812558.983038, "compiled_sql": "\n    \n    \n\nselect\n    account_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__account_history\"\nwhere account_version_id is not null\ngroup by account_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id", "file_key_name": "models.stg_microsoft_ads__account_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id.2406ee6fb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__account_history_account_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id.2406ee6fb9", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__account_history_account_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__account_history_account_version_id", "alias": "not_null_stg_microsoft_ads__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__account_history_account_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812558.984842, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__account_history\"\nwhere account_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id", "file_key_name": "models.stg_microsoft_ads__account_history"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.37082929f6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ad_group_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.37082929f6", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id", "alias": "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812558.986466, "compiled_sql": "\n    \n    \n\nselect\n    ad_group_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_group_history\"\nwhere ad_group_version_id is not null\ngroup by ad_group_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_version_id", "file_key_name": "models.stg_microsoft_ads__ad_group_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.94e0e25b4a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_microsoft_ads__ad_04a39990789937f487b8e77ebd12719f\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"]}, "config": {"enabled": true, "alias": "not_null_stg_microsoft_ads__ad_04a39990789937f487b8e77ebd12719f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.94e0e25b4a", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ad_04a39990789937f487b8e77ebd12719f.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id", "alias": "not_null_stg_microsoft_ads__ad_04a39990789937f487b8e77ebd12719f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ad_04a39990789937f487b8e77ebd12719f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_microsoft_ads__ad_04a39990789937f487b8e77ebd12719f"}, "created_at": 1640812558.988078, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_group_history\"\nwhere ad_group_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_version_id", "file_key_name": "models.stg_microsoft_ads__ad_group_history"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id.36f5019570": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ad_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "unique_stg_microsoft_ads__ad_history_ad_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id.36f5019570", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "unique_stg_microsoft_ads__ad_history_ad_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__ad_history_ad_version_id", "alias": "unique_stg_microsoft_ads__ad_history_ad_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/unique_stg_microsoft_ads__ad_history_ad_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812558.9897401, "compiled_sql": "\n    \n    \n\nselect\n    ad_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_history\"\nwhere ad_version_id is not null\ngroup by ad_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_version_id", "file_key_name": "models.stg_microsoft_ads__ad_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id.feaa4c680f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__ad_history_ad_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id.feaa4c680f", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ad_history_ad_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_history_ad_version_id", "alias": "not_null_stg_microsoft_ads__ad_history_ad_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__ad_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ad_history_ad_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812558.991342, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__ad_history\"\nwhere ad_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_version_id", "file_key_name": "models.stg_microsoft_ads__ad_history"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id.46ff47af0b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "unique_stg_microsoft_ads__campaign_history_campaign_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id.46ff47af0b", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "unique_stg_microsoft_ads__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__campaign_history_campaign_version_id", "alias": "unique_stg_microsoft_ads__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/unique_stg_microsoft_ads__campaign_history_campaign_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812558.993164, "compiled_sql": "\n    \n    \n\nselect\n    campaign_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__campaign_history\"\nwhere campaign_version_id is not null\ngroup by campaign_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id", "file_key_name": "models.stg_microsoft_ads__campaign_history"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id.6adb56d043": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_microsoft_ads__ca_33db8a919a9f691cb288a51b3f2377b0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_version_id", "model": "{{ get_where_subquery(ref('stg_microsoft_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"]}, "config": {"enabled": true, "alias": "not_null_stg_microsoft_ads__ca_33db8a919a9f691cb288a51b3f2377b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["microsoft_ads_source", "not_null_stg_microsoft_ads__campaign_history_campaign_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id.6adb56d043", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "not_null_stg_microsoft_ads__ca_33db8a919a9f691cb288a51b3f2377b0.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__campaign_history_campaign_version_id", "alias": "not_null_stg_microsoft_ads__ca_33db8a919a9f691cb288a51b3f2377b0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_microsoft_ads__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/not_null_stg_microsoft_ads__ca_33db8a919a9f691cb288a51b3f2377b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_microsoft_ads__ca_33db8a919a9f691cb288a51b3f2377b0"}, "created_at": 1640812558.994763, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_microsoft_ads\".\"stg_microsoft_ads__campaign_history\"\nwhere campaign_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id", "file_key_name": "models.stg_microsoft_ads__campaign_history"}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page.553eb073fe": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cf4d4c12c639e8bc412eea1a261eef9f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "app_type", "index", "template_page"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__app_link')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__app_link"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cf4d4c12c639e8bc412eea1a261eef9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_creative_history", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page.553eb073fe", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "dbt_utils_unique_combination_o_cf4d4c12c639e8bc412eea1a261eef9f.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page", "alias": "dbt_utils_unique_combination_o_cf4d4c12c639e8bc412eea1a261eef9f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__app_link"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/dbt_utils_unique_combination_o_cf4d4c12c639e8bc412eea1a261eef9f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cf4d4c12c639e8bc412eea1a261eef9f"}, "created_at": 1640812559.0037792, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, app_type, index, template_page\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__app_link\"\n    group by _fivetran_id, app_type, index, template_page\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__app_link"}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.4e6ba1f140": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d274888766a09489a55fb185c5dba81b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "index"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__carousel_media')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d274888766a09489a55fb185c5dba81b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_creative_history", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.4e6ba1f140", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "dbt_utils_unique_combination_o_d274888766a09489a55fb185c5dba81b.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index", "alias": "dbt_utils_unique_combination_o_d274888766a09489a55fb185c5dba81b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__carousel_media"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/dbt_utils_unique_combination_o_d274888766a09489a55fb185c5dba81b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d274888766a09489a55fb185c5dba81b"}, "created_at": 1640812559.0180428, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, index\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__carousel_media\"\n    group by _fivetran_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__carousel_media"}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.ec29319ce2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_764159d3eb9ac3a597aacffa5f014eb9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "index", "key"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__carousel_media_url_tags')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_764159d3eb9ac3a597aacffa5f014eb9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_creative_history", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.ec29319ce2", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "dbt_utils_unique_combination_o_764159d3eb9ac3a597aacffa5f014eb9.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key", "alias": "dbt_utils_unique_combination_o_764159d3eb9ac3a597aacffa5f014eb9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__carousel_media_url_tags"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/dbt_utils_unique_combination_o_764159d3eb9ac3a597aacffa5f014eb9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_764159d3eb9ac3a597aacffa5f014eb9"}, "created_at": 1640812559.023093, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, index, key\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__carousel_media_url_tags\"\n    group by _fivetran_id, index, key\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__carousel_media_url_tags"}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index.1515ab8b84": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6182e4065195aa7704f0afcc158b0def\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "index"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__creative_history_asset_feed_spec_link_url')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_6182e4065195aa7704f0afcc158b0def", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_creative_history", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index.1515ab8b84", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "dbt_utils_unique_combination_o_6182e4065195aa7704f0afcc158b0def.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index", "alias": "dbt_utils_unique_combination_o_6182e4065195aa7704f0afcc158b0def", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__creative_history_asset_feed_spec_link_url"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6182e4065195aa7704f0afcc158b0def"}, "created_at": 1640812559.028007, "column_name": null, "file_key_name": "models.stg_facebook_ads__creative_history_asset_feed_spec_link_url"}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.caabd8a5fe": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eae73789ef6d3a477caa8f14cf86aad6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "key", "type"], "model": "{{ get_where_subquery(ref('stg_facebook_ads__url_tag')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__url_tag"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_eae73789ef6d3a477caa8f14cf86aad6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_creative_history", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.caabd8a5fe", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "dbt_utils_unique_combination_o_eae73789ef6d3a477caa8f14cf86aad6.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type", "alias": "dbt_utils_unique_combination_o_eae73789ef6d3a477caa8f14cf86aad6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__url_tag"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/dbt_utils_unique_combination_o_eae73789ef6d3a477caa8f14cf86aad6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_eae73789ef6d3a477caa8f14cf86aad6"}, "created_at": 1640812559.065387, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, key, type\n    from \"postgres\".\"ad_reporting_integration_tests_facebook_ads_creative_history\".\"stg_facebook_ads__url_tag\"\n    group by _fivetran_id, key, type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_ads__url_tag"}, "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id.eb2620adaf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "daily_ad_id", "model": "{{ get_where_subquery(ref('twitter__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "unique_twitter__ad_adapter_daily_ad_id"], "unique_id": "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id.eb2620adaf", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "unique_twitter__ad_adapter_daily_ad_id.sql", "original_file_path": "models/twitter.yml", "name": "unique_twitter__ad_adapter_daily_ad_id", "alias": "unique_twitter__ad_adapter_daily_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/unique_twitter__ad_adapter_daily_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.096019, "compiled_sql": "\n    \n    \n\nselect\n    daily_ad_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__ad_adapter\"\nwhere daily_ad_id is not null\ngroup by daily_ad_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_ad_id", "file_key_name": "models.twitter__ad_adapter"}, "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id.c215eb48b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_ad_id", "model": "{{ get_where_subquery(ref('twitter__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter__ad_adapter_daily_ad_id"], "unique_id": "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id.c215eb48b3", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter__ad_adapter_daily_ad_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter__ad_adapter_daily_ad_id", "alias": "not_null_twitter__ad_adapter_daily_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter__ad_adapter_daily_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.097945, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__ad_adapter\"\nwhere daily_ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_ad_id", "file_key_name": "models.twitter__ad_adapter"}, "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id.05bfa1a3e6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "daily_campaign_id", "model": "{{ get_where_subquery(ref('twitter__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "unique_twitter__campaign_report_daily_campaign_id"], "unique_id": "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id.05bfa1a3e6", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "unique_twitter__campaign_report_daily_campaign_id.sql", "original_file_path": "models/twitter.yml", "name": "unique_twitter__campaign_report_daily_campaign_id", "alias": "unique_twitter__campaign_report_daily_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter__campaign_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/unique_twitter__campaign_report_daily_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.100003, "compiled_sql": "\n    \n    \n\nselect\n    daily_campaign_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__campaign_report\"\nwhere daily_campaign_id is not null\ngroup by daily_campaign_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_campaign_id", "file_key_name": "models.twitter__campaign_report"}, "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id.9d97615317": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_campaign_id", "model": "{{ get_where_subquery(ref('twitter__campaign_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter__campaign_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter__campaign_report_daily_campaign_id"], "unique_id": "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id.9d97615317", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter__campaign_report_daily_campaign_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter__campaign_report_daily_campaign_id", "alias": "not_null_twitter__campaign_report_daily_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter__campaign_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter__campaign_report_daily_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.101954, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__campaign_report\"\nwhere daily_campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_campaign_id", "file_key_name": "models.twitter__campaign_report"}, "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id.01f1a2143b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "daily_line_item_id", "model": "{{ get_where_subquery(ref('twitter__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "unique_twitter__line_item_report_daily_line_item_id"], "unique_id": "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id.01f1a2143b", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "unique_twitter__line_item_report_daily_line_item_id.sql", "original_file_path": "models/twitter.yml", "name": "unique_twitter__line_item_report_daily_line_item_id", "alias": "unique_twitter__line_item_report_daily_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter__line_item_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/unique_twitter__line_item_report_daily_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.1038778, "compiled_sql": "\n    \n    \n\nselect\n    daily_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__line_item_report\"\nwhere daily_line_item_id is not null\ngroup by daily_line_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_line_item_id", "file_key_name": "models.twitter__line_item_report"}, "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id.e089556726": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_line_item_id", "model": "{{ get_where_subquery(ref('twitter__line_item_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter__line_item_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["twitter_ads", "not_null_twitter__line_item_report_daily_line_item_id"], "unique_id": "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id.e089556726", "package_name": "twitter_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads", "path": "not_null_twitter__line_item_report_daily_line_item_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter__line_item_report_daily_line_item_id", "alias": "not_null_twitter__line_item_report_daily_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter__line_item_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter__line_item_report_daily_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.105791, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_twitter_ads\".\"twitter__line_item_report\"\nwhere daily_line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_line_item_id", "file_key_name": "models.twitter__line_item_report"}, "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id.1a66dc4b53": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "daily_id", "model": "{{ get_where_subquery(ref('pinterest_ads__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "unique_pinterest_ads__ad_adapter_daily_id"], "unique_id": "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id.1a66dc4b53", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "unique_pinterest_ads__ad_adapter_daily_id.sql", "original_file_path": "models/pinterest.yml", "name": "unique_pinterest_ads__ad_adapter_daily_id", "alias": "unique_pinterest_ads__ad_adapter_daily_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/unique_pinterest_ads__ad_adapter_daily_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.1279209, "compiled_sql": "\n    \n    \n\nselect\n    daily_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_adapter\"\nwhere daily_id is not null\ngroup by daily_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_id", "file_key_name": "models.pinterest_ads__ad_adapter"}, "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id.e4928edab2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_id", "model": "{{ get_where_subquery(ref('pinterest_ads__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "not_null_pinterest_ads__ad_adapter_daily_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id.e4928edab2", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_pinterest_ads__ad_adapter_daily_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__ad_adapter_daily_id", "alias": "not_null_pinterest_ads__ad_adapter_daily_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/pinterest.yml/not_null_pinterest_ads__ad_adapter_daily_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.129675, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_pinterest\".\"pinterest_ads__ad_adapter\"\nwhere daily_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_id", "file_key_name": "models.pinterest_ads__ad_adapter"}, "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.7853b6796f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_ad_group')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.7853b6796f", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id", "alias": "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_ad_group"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.134934, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select\n    ad_group_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_pinterest_ads__most_recent_ad_group\nwhere ad_group_id is not null\ngroup by ad_group_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "sql": " __dbt__cte__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.int_pinterest_ads__most_recent_ad_group"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.242a25a3dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_ad_group')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.242a25a3dc", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id", "alias": "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_ad_group"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.1365561, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select *\nfrom __dbt__cte__int_pinterest_ads__most_recent_ad_group\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "sql": " __dbt__cte__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "ad_group_id", "file_key_name": "models.int_pinterest_ads__most_recent_ad_group"}, "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id.2252dcafef": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "unique_int_pinterest_ads__most_recent_campaign_campaign_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id.2252dcafef", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "unique_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_campaign_campaign_id", "alias": "unique_int_pinterest_ads__most_recent_campaign_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_campaign"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/unique_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.13851, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select\n    campaign_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_pinterest_ads__most_recent_campaign\nwhere campaign_id is not null\ngroup by campaign_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "sql": " __dbt__cte__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.int_pinterest_ads__most_recent_campaign"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id.e2ab8f24a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "not_null_int_pinterest_ads__most_recent_campaign_campaign_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id.e2ab8f24a2", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_campaign_campaign_id", "alias": "not_null_int_pinterest_ads__most_recent_campaign_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_campaign"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/not_null_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.1401322, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select *\nfrom __dbt__cte__int_pinterest_ads__most_recent_campaign\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "sql": " __dbt__cte__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.int_pinterest_ads__most_recent_campaign"}, "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.26c26d6fbb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_pinterest_ads__most_0420d111f0210cd070d4acdd55411333\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_pin_promotion')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"]}, "config": {"enabled": true, "alias": "unique_int_pinterest_ads__most_0420d111f0210cd070d4acdd55411333", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.26c26d6fbb", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "unique_int_pinterest_ads__most_0420d111f0210cd070d4acdd55411333.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "alias": "unique_int_pinterest_ads__most_0420d111f0210cd070d4acdd55411333", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_pin_promotion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/unique_int_pinterest_ads__most_0420d111f0210cd070d4acdd55411333.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_pinterest_ads__most_0420d111f0210cd070d4acdd55411333"}, "created_at": 1640812559.142169, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select\n    pin_promotion_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_pinterest_ads__most_recent_pin_promotion\nwhere pin_promotion_id is not null\ngroup by pin_promotion_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "sql": " __dbt__cte__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "pin_promotion_id", "file_key_name": "models.int_pinterest_ads__most_recent_pin_promotion"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.02dc772879": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_pinterest_ads__mo_e99764ec4e4650c67543efcdc9772224\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_pin_promotion')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"]}, "config": {"enabled": true, "alias": "not_null_int_pinterest_ads__mo_e99764ec4e4650c67543efcdc9772224", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.02dc772879", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_int_pinterest_ads__mo_e99764ec4e4650c67543efcdc9772224.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "alias": "not_null_int_pinterest_ads__mo_e99764ec4e4650c67543efcdc9772224", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_pin_promotion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/not_null_int_pinterest_ads__mo_e99764ec4e4650c67543efcdc9772224.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_pinterest_ads__mo_e99764ec4e4650c67543efcdc9772224"}, "created_at": 1640812559.143906, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select *\nfrom __dbt__cte__int_pinterest_ads__most_recent_pin_promotion\nwhere pin_promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "sql": " __dbt__cte__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "pin_promotion_id", "file_key_name": "models.int_pinterest_ads__most_recent_pin_promotion"}, "test.pinterest.unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.513b5100cd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_advertiser')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_advertiser"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "unique_int_pinterest_ads__most_recent_advertiser_advertiser_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.513b5100cd", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_advertiser_advertiser_id", "alias": "unique_int_pinterest_ads__most_recent_advertiser_advertiser_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_advertiser"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.145528, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_advertiser as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select\n    advertiser_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_pinterest_ads__most_recent_advertiser\nwhere advertiser_id is not null\ngroup by advertiser_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_advertiser", "sql": " __dbt__cte__int_pinterest_ads__most_recent_advertiser as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.int_pinterest_ads__most_recent_advertiser"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id.1cedcda1a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_pinterest_ads__mo_3f3b06c64bea583bf5cd6826a218f3a1\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "advertiser_id", "model": "{{ get_where_subquery(ref('int_pinterest_ads__most_recent_advertiser')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_advertiser"]}, "config": {"enabled": true, "alias": "not_null_int_pinterest_ads__mo_3f3b06c64bea583bf5cd6826a218f3a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest", "intermediate", "not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id.1cedcda1a7", "package_name": "pinterest", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest", "path": "not_null_int_pinterest_ads__mo_3f3b06c64bea583bf5cd6826a218f3a1.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id", "alias": "not_null_int_pinterest_ads__mo_3f3b06c64bea583bf5cd6826a218f3a1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_pinterest_ads__most_recent_advertiser"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/not_null_int_pinterest_ads__mo_3f3b06c64bea583bf5cd6826a218f3a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_pinterest_ads__mo_3f3b06c64bea583bf5cd6826a218f3a1"}, "created_at": 1640812559.147327, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_pinterest_ads__most_recent_advertiser as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select *\nfrom __dbt__cte__int_pinterest_ads__most_recent_advertiser\nwhere advertiser_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_advertiser", "sql": " __dbt__cte__int_pinterest_ads__most_recent_advertiser as (\nwith base as (\n\n    select *\n    from \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by advertiser_id order by updated_timestamp desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "advertiser_id", "file_key_name": "models.int_pinterest_ads__most_recent_advertiser"}, "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.5c8fc66dcd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "daily_creative_id", "model": "{{ get_where_subquery(ref('stg_linkedin__ad_analytics_by_creative')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.5c8fc66dcd", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "alias": "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.189919, "compiled_sql": "\n    \n    \n\nselect\n    daily_creative_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative\"\nwhere daily_creative_id is not null\ngroup by daily_creative_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id", "file_key_name": "models.stg_linkedin__ad_analytics_by_creative"}, "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.daa1e7c317": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_linkedin__ad_anal_2e23337d06c8a85fc89f17c2188ea412\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_creative_id", "model": "{{ get_where_subquery(ref('stg_linkedin__ad_analytics_by_creative')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": "not_null_stg_linkedin__ad_anal_2e23337d06c8a85fc89f17c2188ea412", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.daa1e7c317", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__ad_anal_2e23337d06c8a85fc89f17c2188ea412.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "alias": "not_null_stg_linkedin__ad_anal_2e23337d06c8a85fc89f17c2188ea412", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__ad_anal_2e23337d06c8a85fc89f17c2188ea412.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_linkedin__ad_anal_2e23337d06c8a85fc89f17c2188ea412"}, "created_at": 1640812559.191709, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative\"\nwhere daily_creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id", "file_key_name": "models.stg_linkedin__ad_analytics_by_creative"}, "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id.f9239a77e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_linkedin__ad_analytics_by_creative')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__ad_analytics_by_creative_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id.f9239a77e3", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__ad_analytics_by_creative_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__ad_analytics_by_creative_creative_id", "alias": "not_null_stg_linkedin__ad_analytics_by_creative_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__ad_analytics_by_creative_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.193331, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__ad_analytics_by_creative\"\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_linkedin__ad_analytics_by_creative"}, "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id.4a27612477": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "creative_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "unique_stg_linkedin__creative_history_creative_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id.4a27612477", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "unique_stg_linkedin__creative_history_creative_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__creative_history_creative_version_id", "alias": "unique_stg_linkedin__creative_history_creative_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/unique_stg_linkedin__creative_history_creative_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.194954, "compiled_sql": "\n    \n    \n\nselect\n    creative_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history\"\nwhere creative_version_id is not null\ngroup by creative_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_version_id", "file_key_name": "models.stg_linkedin__creative_history"}, "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id.c6b54612f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__creative_history_creative_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id.c6b54612f3", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__creative_history_creative_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__creative_history_creative_version_id", "alias": "not_null_stg_linkedin__creative_history_creative_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__creative_history_creative_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.196664, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history\"\nwhere creative_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_version_id", "file_key_name": "models.stg_linkedin__creative_history"}, "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id.5ae1d32ed7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_linkedin__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__creative_history_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id.5ae1d32ed7", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__creative_history_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__creative_history_creative_id", "alias": "not_null_stg_linkedin__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__creative_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.198441, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history\"\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_linkedin__creative_history"}, "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from.e1e76ab015": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('stg_linkedin__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__creative_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from.e1e76ab015", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__creative_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__creative_history_valid_from", "alias": "not_null_stg_linkedin__creative_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__creative_history_valid_from.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.2001028, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__creative_history\"\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from", "file_key_name": "models.stg_linkedin__creative_history"}, "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id.7a881baa11": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "unique_stg_linkedin__campaign_history_campaign_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id.7a881baa11", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "unique_stg_linkedin__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__campaign_history_campaign_version_id", "alias": "unique_stg_linkedin__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/unique_stg_linkedin__campaign_history_campaign_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.2017112, "compiled_sql": "\n    \n    \n\nselect\n    campaign_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history\"\nwhere campaign_version_id is not null\ngroup by campaign_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id", "file_key_name": "models.stg_linkedin__campaign_history"}, "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id.2932ee4f95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__campaign_history_campaign_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id.2932ee4f95", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_history_campaign_version_id", "alias": "not_null_stg_linkedin__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__campaign_history_campaign_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.2033129, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history\"\nwhere campaign_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id", "file_key_name": "models.stg_linkedin__campaign_history"}, "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id.ed0565e9e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__campaign_history_campaign_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id.ed0565e9e4", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__campaign_history_campaign_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_history_campaign_id", "alias": "not_null_stg_linkedin__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.2049248, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history\"\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_linkedin__campaign_history"}, "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from.19da0d0e78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__campaign_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from.19da0d0e78", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__campaign_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_history_valid_from", "alias": "not_null_stg_linkedin__campaign_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__campaign_history_valid_from.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.206721, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_history\"\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from", "file_key_name": "models.stg_linkedin__campaign_history"}, "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id.6182341cfe": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_linkedin__campaign__9692ca0a3da86ab4d6ccccd10177aef2\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_group_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "config": {"enabled": true, "alias": "unique_stg_linkedin__campaign__9692ca0a3da86ab4d6ccccd10177aef2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "unique_stg_linkedin__campaign_group_history_campaign_group_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id.6182341cfe", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "unique_stg_linkedin__campaign__9692ca0a3da86ab4d6ccccd10177aef2.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__campaign_group_history_campaign_group_version_id", "alias": "unique_stg_linkedin__campaign__9692ca0a3da86ab4d6ccccd10177aef2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/unique_stg_linkedin__campaign__9692ca0a3da86ab4d6ccccd10177aef2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_linkedin__campaign__9692ca0a3da86ab4d6ccccd10177aef2"}, "created_at": 1640812559.2084281, "compiled_sql": "\n    \n    \n\nselect\n    campaign_group_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history\"\nwhere campaign_group_version_id is not null\ngroup by campaign_group_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_version_id", "file_key_name": "models.stg_linkedin__campaign_group_history"}, "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.95c06ec95b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_linkedin__campaig_52f42cb519409c00a5972629012a896f\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_group_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "config": {"enabled": true, "alias": "not_null_stg_linkedin__campaig_52f42cb519409c00a5972629012a896f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__campaign_group_history_campaign_group_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.95c06ec95b", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__campaig_52f42cb519409c00a5972629012a896f.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_group_history_campaign_group_version_id", "alias": "not_null_stg_linkedin__campaig_52f42cb519409c00a5972629012a896f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__campaig_52f42cb519409c00a5972629012a896f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_linkedin__campaig_52f42cb519409c00a5972629012a896f"}, "created_at": 1640812559.21031, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history\"\nwhere campaign_group_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_version_id", "file_key_name": "models.stg_linkedin__campaign_group_history"}, "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id.a3a0e73b15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_group_id", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__campaign_group_history_campaign_group_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id.a3a0e73b15", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__campaign_group_history_campaign_group_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_group_history_campaign_group_id", "alias": "not_null_stg_linkedin__campaign_group_history_campaign_group_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__campaign_group_history_campaign_group_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.211929, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history\"\nwhere campaign_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_id", "file_key_name": "models.stg_linkedin__campaign_group_history"}, "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from.9538123b9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('stg_linkedin__campaign_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__campaign_group_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from.9538123b9d", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__campaign_group_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_group_history_valid_from", "alias": "not_null_stg_linkedin__campaign_group_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__campaign_group_history_valid_from.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.21353, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__campaign_group_history\"\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from", "file_key_name": "models.stg_linkedin__campaign_group_history"}, "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id.09d77e3e67": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "unique_stg_linkedin__account_history_account_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id.09d77e3e67", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "unique_stg_linkedin__account_history_account_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__account_history_account_version_id", "alias": "unique_stg_linkedin__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/unique_stg_linkedin__account_history_account_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.215355, "compiled_sql": "\n    \n    \n\nselect\n    account_version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history\"\nwhere account_version_id is not null\ngroup by account_version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id", "file_key_name": "models.stg_linkedin__account_history"}, "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id.bb859fd849": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_version_id", "model": "{{ get_where_subquery(ref('stg_linkedin__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__account_history_account_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id.bb859fd849", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__account_history_account_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__account_history_account_version_id", "alias": "not_null_stg_linkedin__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__account_history_account_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.2169511, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history\"\nwhere account_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id", "file_key_name": "models.stg_linkedin__account_history"}, "test.linkedin_source.not_null_stg_linkedin__account_history_account_id.29a9b3c9e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_linkedin__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__account_history_account_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__account_history_account_id.29a9b3c9e7", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__account_history_account_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__account_history_account_id", "alias": "not_null_stg_linkedin__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.218625, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_linkedin__account_history"}, "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from.5cf2f628bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('stg_linkedin__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin_source", "not_null_stg_linkedin__account_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from.5cf2f628bb", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "not_null_stg_linkedin__account_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__account_history_valid_from", "alias": "not_null_stg_linkedin__account_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/not_null_stg_linkedin__account_history_valid_from.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.220236, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_linkedin\".\"stg_linkedin__account_history\"\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from", "file_key_name": "models.stg_linkedin__account_history"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day.7311a212ea": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_576b298c3f652624c7de9918ae17bf6d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_account_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat__account_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat__account_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_576b298c3f652624c7de9918ae17bf6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day.7311a212ea", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_576b298c3f652624c7de9918ae17bf6d.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day", "alias": "dbt_utils_unique_combination_o_576b298c3f652624c7de9918ae17bf6d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat__account_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_576b298c3f652624c7de9918ae17bf6d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_576b298c3f652624c7de9918ae17bf6d"}, "created_at": 1640812559.285286, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_account_id, date_day\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__account_report\"\n    group by ad_account_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat__account_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day.454da1d9f2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_46eb89140d8c889d8a18c3de1a1b9432\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat__campaign_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat__campaign_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_46eb89140d8c889d8a18c3de1a1b9432", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day.454da1d9f2", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_46eb89140d8c889d8a18c3de1a1b9432.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day", "alias": "dbt_utils_unique_combination_o_46eb89140d8c889d8a18c3de1a1b9432", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat__campaign_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_46eb89140d8c889d8a18c3de1a1b9432.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_46eb89140d8c889d8a18c3de1a1b9432"}, "created_at": 1640812559.289952, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, date_day\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__campaign_report\"\n    group by campaign_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat__campaign_report"}, "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day.61e910dbab": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a52166ac9568a3dcff2cbb556cf6e4b6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_squad_id", "date_day"], "model": "{{ get_where_subquery(ref('snapchat__ad_squad_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads.snapchat__ad_squad_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a52166ac9568a3dcff2cbb556cf6e4b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads", "dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day"], "unique_id": "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day.61e910dbab", "package_name": "snapchat_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads", "path": "dbt_utils_unique_combination_o_a52166ac9568a3dcff2cbb556cf6e4b6.sql", "original_file_path": "models/snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day", "alias": "dbt_utils_unique_combination_o_a52166ac9568a3dcff2cbb556cf6e4b6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["snapchat__ad_squad_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads/models/snapchat.yml/dbt_utils_unique_combination_o_a52166ac9568a3dcff2cbb556cf6e4b6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a52166ac9568a3dcff2cbb556cf6e4b6"}, "created_at": 1640812559.29464, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_squad_id, date_day\n    from \"postgres\".\"ad_reporting_integration_tests_snapchat_ads\".\"snapchat__ad_squad_report\"\n    group by ad_squad_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.snapchat__ad_squad_report"}, "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid.7552ea9f1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gclid", "model": "{{ get_where_subquery(ref('stg_google_ads__click_performance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__click_performance"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "adwords_connector", "not_null_stg_google_ads__click_performance_gclid"], "unique_id": "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid.7552ea9f1f", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "not_null_stg_google_ads__click_performance_gclid.sql", "original_file_path": "models/adwords_connector/stg_google_ads.yml", "name": "not_null_stg_google_ads__click_performance_gclid", "alias": "not_null_stg_google_ads__click_performance_gclid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__click_performance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/stg_google_ads.yml/not_null_stg_google_ads__click_performance_gclid.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.382127, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__click_performance\"\nwhere gclid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gclid", "file_key_name": "models.stg_google_ads__click_performance"}, "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id.529a5342d9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_google_ads__final_u_3521f620458941ffffe40e69979b6e54\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "final_url_performance_id", "model": "{{ get_where_subquery(ref('stg_google_ads__final_url_performance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "config": {"enabled": true, "alias": "unique_stg_google_ads__final_u_3521f620458941ffffe40e69979b6e54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "adwords_connector", "unique_stg_google_ads__final_url_performance_final_url_performance_id"], "unique_id": "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id.529a5342d9", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "unique_stg_google_ads__final_u_3521f620458941ffffe40e69979b6e54.sql", "original_file_path": "models/adwords_connector/stg_google_ads.yml", "name": "unique_stg_google_ads__final_url_performance_final_url_performance_id", "alias": "unique_stg_google_ads__final_u_3521f620458941ffffe40e69979b6e54", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/stg_google_ads.yml/unique_stg_google_ads__final_u_3521f620458941ffffe40e69979b6e54.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_google_ads__final_u_3521f620458941ffffe40e69979b6e54"}, "created_at": 1640812559.383858, "compiled_sql": "\n    \n    \n\nselect\n    final_url_performance_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__final_url_performance\"\nwhere final_url_performance_id is not null\ngroup by final_url_performance_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "final_url_performance_id", "file_key_name": "models.stg_google_ads__final_url_performance"}, "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id.70e3b81ecb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_google_ads__final_f0dd01c6521cfd7ffe367e7170a9d8cc\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "final_url_performance_id", "model": "{{ get_where_subquery(ref('stg_google_ads__final_url_performance')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "config": {"enabled": true, "alias": "not_null_stg_google_ads__final_f0dd01c6521cfd7ffe367e7170a9d8cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["google_ads_source", "adwords_connector", "not_null_stg_google_ads__final_url_performance_final_url_performance_id"], "unique_id": "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id.70e3b81ecb", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "not_null_stg_google_ads__final_f0dd01c6521cfd7ffe367e7170a9d8cc.sql", "original_file_path": "models/adwords_connector/stg_google_ads.yml", "name": "not_null_stg_google_ads__final_url_performance_final_url_performance_id", "alias": "not_null_stg_google_ads__final_f0dd01c6521cfd7ffe367e7170a9d8cc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/google_ads_source/models/adwords_connector/stg_google_ads.yml/not_null_stg_google_ads__final_f0dd01c6521cfd7ffe367e7170a9d8cc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_google_ads__final_f0dd01c6521cfd7ffe367e7170a9d8cc"}, "created_at": 1640812559.385487, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_google_ads\".\"stg_google_ads__final_url_performance\"\nwhere final_url_performance_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "final_url_performance_id", "file_key_name": "models.stg_google_ads__final_url_performance"}, "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id.b6aee57b30": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "unique_stg_pinterest_ads__ad_group_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id.b6aee57b30", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "unique_stg_pinterest_ads__ad_group_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__ad_group_history_version_id", "alias": "unique_stg_pinterest_ads__ad_group_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/unique_stg_pinterest_ads__ad_group_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.426046, "compiled_sql": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__ad_group_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id.dc9d6cedb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__ad_group_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__ad_group_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id.dc9d6cedb6", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__ad_group_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__ad_group_history_version_id", "alias": "not_null_stg_pinterest_ads__ad_group_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__ad_group_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.427653, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__ad_group_history\"\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__ad_group_history"}, "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id.cac0ed2e58": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "unique_stg_pinterest_ads__campaign_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id.cac0ed2e58", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "unique_stg_pinterest_ads__campaign_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__campaign_history_version_id", "alias": "unique_stg_pinterest_ads__campaign_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/unique_stg_pinterest_ads__campaign_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.429261, "compiled_sql": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__campaign_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id.8b93232e63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__campaign_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id.8b93232e63", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__campaign_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__campaign_history_version_id", "alias": "not_null_stg_pinterest_ads__campaign_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__campaign_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.4308999, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__campaign_history\"\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__campaign_history"}, "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id.56f311347a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "unique_stg_pinterest_ads__pin_promotion_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id.56f311347a", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "unique_stg_pinterest_ads__pin_promotion_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__pin_promotion_history_version_id", "alias": "unique_stg_pinterest_ads__pin_promotion_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/unique_stg_pinterest_ads__pin_promotion_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.432548, "compiled_sql": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__pin_promotion_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id.36e2f15e25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__pin_promotion_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id.36e2f15e25", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__pin_promotion_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_history_version_id", "alias": "not_null_stg_pinterest_ads__pin_promotion_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__pin_promotion_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.4347, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_history\"\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__pin_promotion_history"}, "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id.ebb30d083b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "report_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "unique_stg_pinterest_ads__pin_promotion_report_report_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id.ebb30d083b", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "unique_stg_pinterest_ads__pin_promotion_report_report_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__pin_promotion_report_report_id", "alias": "unique_stg_pinterest_ads__pin_promotion_report_report_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/unique_stg_pinterest_ads__pin_promotion_report_report_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.4363022, "compiled_sql": "\n    \n    \n\nselect\n    report_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_report\"\nwhere report_id is not null\ngroup by report_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "report_id", "file_key_name": "models.stg_pinterest_ads__pin_promotion_report"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id.71319647a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "report_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__pin_promotion_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__pin_promotion_report_report_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id.71319647a4", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__pin_promotion_report_report_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_report_report_id", "alias": "not_null_stg_pinterest_ads__pin_promotion_report_report_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__pin_promotion_report_report_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.437898, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__pin_promotion_report\"\nwhere report_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "report_id", "file_key_name": "models.stg_pinterest_ads__pin_promotion_report"}, "test.pinterest_source.unique_stg_pinterest_ads__advertiser_history_version_id.e3be854e36": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "unique_stg_pinterest_ads__advertiser_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__advertiser_history_version_id.e3be854e36", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "unique_stg_pinterest_ads__advertiser_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__advertiser_history_version_id", "alias": "unique_stg_pinterest_ads__advertiser_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/unique_stg_pinterest_ads__advertiser_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.439574, "compiled_sql": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__advertiser_history"}, "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_version_id.b2ed8ff0c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_pinterest_ads__advertiser_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["pinterest_source", "not_null_stg_pinterest_ads__advertiser_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_version_id.b2ed8ff0c9", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "not_null_stg_pinterest_ads__advertiser_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__advertiser_history_version_id", "alias": "not_null_stg_pinterest_ads__advertiser_history_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pinterest_ads__advertiser_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/not_null_stg_pinterest_ads__advertiser_history_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.4411972, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_pinterest\".\"stg_pinterest_ads__advertiser_history\"\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_pinterest_ads__advertiser_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__account_history_account_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__account_history_account_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__account_history_account_id", "alias": "not_null_stg_facebook_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.4860768, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__account_history\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_facebook_ads__account_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_history_ad_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_history_ad_id", "alias": "not_null_stg_facebook_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__ad_history_ad_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.487703, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_history\"\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id", "file_key_name": "models.stg_facebook_ads__ad_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_set_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__ad_set_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__ad_set_history_ad_set_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "alias": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.489352, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__ad_set_history\"\nwhere ad_set_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_set_id", "file_key_name": "models.stg_facebook_ads__ad_set_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__campaign_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__campaign_history_campaign_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__campaign_history_campaign_id", "alias": "not_null_stg_facebook_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.490981, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__campaign_history\"\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_facebook_ads__campaign_history"}, "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('stg_facebook_ads__creative_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["facebook_ads_source", "not_null_stg_facebook_ads__creative_history_creative_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "not_null_stg_facebook_ads__creative_history_creative_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__creative_history_creative_id", "alias": "not_null_stg_facebook_ads__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/not_null_stg_facebook_ads__creative_history_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.493056, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_stg_facebook_ads\".\"stg_facebook_ads__creative_history\"\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.stg_facebook_ads__creative_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced.770cb61f45": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_78899fcdd4a5f7eb3228d8aa762003de\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_account_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat__ad_account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_78899fcdd4a5f7eb3228d8aa762003de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced.770cb61f45", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_78899fcdd4a5f7eb3228d8aa762003de.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_78899fcdd4a5f7eb3228d8aa762003de", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__ad_account_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_78899fcdd4a5f7eb3228d8aa762003de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_78899fcdd4a5f7eb3228d8aa762003de"}, "created_at": 1640812559.55378, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_account_id, _fivetran_synced\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_account_history\"\n    group by ad_account_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__ad_account_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced.9a13513e4b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d2ca70c7c76ebadba03bb25b4403833b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat__ad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d2ca70c7c76ebadba03bb25b4403833b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced.9a13513e4b", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_d2ca70c7c76ebadba03bb25b4403833b.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_d2ca70c7c76ebadba03bb25b4403833b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__ad_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_d2ca70c7c76ebadba03bb25b4403833b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d2ca70c7c76ebadba03bb25b4403833b"}, "created_at": 1640812559.558263, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, _fivetran_synced\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_history\"\n    group by ad_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__ad_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour.bb130d46b0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e89472da1275ca9ab16fc41c7b514be0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_id", "date_hour"], "model": "{{ get_where_subquery(ref('stg_snapchat__ad_hourly_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e89472da1275ca9ab16fc41c7b514be0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour.bb130d46b0", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_e89472da1275ca9ab16fc41c7b514be0.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour", "alias": "dbt_utils_unique_combination_o_e89472da1275ca9ab16fc41c7b514be0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__ad_hourly_report"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_e89472da1275ca9ab16fc41c7b514be0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e89472da1275ca9ab16fc41c7b514be0"}, "created_at": 1640812559.5628932, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_id, date_hour\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_hourly_report\"\n    group by ad_id, date_hour\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__ad_hourly_report"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced.31dfa7ee5e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fa1d110fdbb8d619921d04d3d0133c53\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ad_squad_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat__ad_squad_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__ad_squad_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fa1d110fdbb8d619921d04d3d0133c53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced.31dfa7ee5e", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_fa1d110fdbb8d619921d04d3d0133c53.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_fa1d110fdbb8d619921d04d3d0133c53", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__ad_squad_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_fa1d110fdbb8d619921d04d3d0133c53.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fa1d110fdbb8d619921d04d3d0133c53"}, "created_at": 1640812559.567536, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ad_squad_id, _fivetran_synced\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__ad_squad_history\"\n    group by ad_squad_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__ad_squad_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced.a859a3be5e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a810d7d34bf3213cfb4a2302b27d30b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat__campaign_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__campaign_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a810d7d34bf3213cfb4a2302b27d30b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced.a859a3be5e", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_7a810d7d34bf3213cfb4a2302b27d30b.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_7a810d7d34bf3213cfb4a2302b27d30b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_7a810d7d34bf3213cfb4a2302b27d30b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7a810d7d34bf3213cfb4a2302b27d30b"}, "created_at": 1640812559.572203, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, _fivetran_synced\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__campaign_history\"\n    group by campaign_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__campaign_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced.f6bdc9dc8c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6f4612ff35fe4781108ac95be3f8a4e6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["creative_id", "_fivetran_synced"], "model": "{{ get_where_subquery(ref('stg_snapchat__creative_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__creative_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6f4612ff35fe4781108ac95be3f8a4e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced.f6bdc9dc8c", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_6f4612ff35fe4781108ac95be3f8a4e6.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced", "alias": "dbt_utils_unique_combination_o_6f4612ff35fe4781108ac95be3f8a4e6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_6f4612ff35fe4781108ac95be3f8a4e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6f4612ff35fe4781108ac95be3f8a4e6"}, "created_at": 1640812559.5766861, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        creative_id, _fivetran_synced\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_history\"\n    group by creative_id, _fivetran_synced\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__creative_history"}, "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key.03dc61a57c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3e73d26f2eb9961918398bd1e4b0f813\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["creative_id", "param_key"], "model": "{{ get_where_subquery(ref('stg_snapchat__creative_url_tag_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.snapchat_ads_source.stg_snapchat__creative_url_tag_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3e73d26f2eb9961918398bd1e4b0f813", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["snapchat_ads_source", "dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key"], "unique_id": "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key.03dc61a57c", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "dbt_utils_unique_combination_o_3e73d26f2eb9961918398bd1e4b0f813.sql", "original_file_path": "models/stg_snapchat.yml", "name": "dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key", "alias": "dbt_utils_unique_combination_o_3e73d26f2eb9961918398bd1e4b0f813", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_snapchat__creative_url_tag_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snapchat_ads_source/models/stg_snapchat.yml/dbt_utils_unique_combination_o_3e73d26f2eb9961918398bd1e4b0f813.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3e73d26f2eb9961918398bd1e4b0f813"}, "created_at": 1640812559.581266, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        creative_id, param_key\n    from \"postgres\".\"ad_reporting_integration_tests_stg_snapchat_ads\".\"stg_snapchat__creative_url_tag_history\"\n    group by creative_id, param_key\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_snapchat__creative_url_tag_history"}, "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id.9d930c85d7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "daily_creative_id", "model": "{{ get_where_subquery(ref('linkedin__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "unique_linkedin__ad_adapter_daily_creative_id"], "unique_id": "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id.9d930c85d7", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "unique_linkedin__ad_adapter_daily_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "unique_linkedin__ad_adapter_daily_creative_id", "alias": "unique_linkedin__ad_adapter_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/unique_linkedin__ad_adapter_daily_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.746423, "compiled_sql": "\n    \n    \n\nselect\n    daily_creative_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\nwhere daily_creative_id is not null\ngroup by daily_creative_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id", "file_key_name": "models.linkedin__ad_adapter"}, "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id.a419f1ff64": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_creative_id", "model": "{{ get_where_subquery(ref('linkedin__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin__ad_adapter_daily_creative_id"], "unique_id": "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id.a419f1ff64", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin__ad_adapter_daily_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin__ad_adapter_daily_creative_id", "alias": "not_null_linkedin__ad_adapter_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin__ad_adapter_daily_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.74836, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\nwhere daily_creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id", "file_key_name": "models.linkedin__ad_adapter"}, "test.linkedin.not_null_linkedin__ad_adapter_creative_id.5ff26de9ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ get_where_subquery(ref('linkedin__ad_adapter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "ad_reporting_integration_tests_dbt_test__audit", "fqn": ["linkedin", "not_null_linkedin__ad_adapter_creative_id"], "unique_id": "test.linkedin.not_null_linkedin__ad_adapter_creative_id.5ff26de9ba", "package_name": "linkedin", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin", "path": "not_null_linkedin__ad_adapter_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin__ad_adapter_creative_id", "alias": "not_null_linkedin__ad_adapter_creative_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin/models/linkedin.yml/not_null_linkedin__ad_adapter_creative_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1640812559.75024, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"ad_reporting_integration_tests_linkedin\".\"linkedin__ad_adapter\"\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id", "file_key_name": "models.linkedin__ad_adapter"}}, "sources": {"source.microsoft_ads_source.microsoft_ads.ad_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_history"], "database": "postgres", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft ad.", "columns": {"id": {"name": "id", "description": "The ID of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"bingads\".\"ad_history\"", "created_at": 1640812559.7516181}, "source.microsoft_ads_source.microsoft_ads.campaign_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "campaign_history"], "database": "postgres", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.campaign_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "campaign_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft campaign.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"bingads\".\"campaign_history\"", "created_at": 1640812559.7518358}, "source.microsoft_ads_source.microsoft_ads.ad_group_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_group_history"], "database": "postgres", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_group_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft ad group.", "columns": {"id": {"name": "id", "description": "The ID of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"bingads\".\"ad_group_history\"", "created_at": 1640812559.752023}, "source.microsoft_ads_source.microsoft_ads.account_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "account_history"], "database": "postgres", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.account_history", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "account_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft account.", "columns": {"id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"bingads\".\"account_history\"", "created_at": 1640812559.752202}, "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_performance_daily_report"], "database": "postgres", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "ad_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance of a Microsoft ad.", "columns": {"date": {"name": "date", "description": "The date of the ad performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency that spend and other metrics are reported in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of advertising spend that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"bingads\".\"ad_performance_daily_report\"", "created_at": 1640812559.752393}, "source.linkedin_source.linkedin.ad_analytics_by_creative": {"fqn": ["linkedin_source", "linkedin", "ad_analytics_by_creative"], "database": "postgres", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "ad_analytics_by_creative", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "ad_analytics_by_creative", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_local_currency": {"name": "cost_in_local_currency", "description": "The cost of the ads in the local currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_usd": {"name": "cost_in_usd", "description": "The cost of the ads in the USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_ads\".\"ad_analytics_by_creative\"", "created_at": 1640812559.752579}, "source.linkedin_source.linkedin.creative_history": {"fqn": ["linkedin_source", "linkedin", "creative_history"], "database": "postgres", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.creative_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "creative_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'version' of a creative.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_ads\".\"creative_history\"", "created_at": 1640812559.752767}, "source.linkedin_source.linkedin.campaign_history": {"fqn": ["linkedin_source", "linkedin", "campaign_history"], "database": "postgres", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.campaign_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "campaign_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'version' of a campaign.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_ads\".\"campaign_history\"", "created_at": 1640812559.752952}, "source.linkedin_source.linkedin.campaign_group_history": {"fqn": ["linkedin_source", "linkedin", "campaign_group_history"], "database": "postgres", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.campaign_group_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "campaign_group_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "campaign_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'version' of a campaign group.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_ads\".\"campaign_group_history\"", "created_at": 1640812559.753129}, "source.linkedin_source.linkedin.account_history": {"fqn": ["linkedin_source", "linkedin", "account_history"], "database": "postgres", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.account_history", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "account_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'version' of an account.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_ads\".\"account_history\"", "created_at": 1640812559.753312}, "source.google_ads_source.adwords.ad_final_url_history": {"fqn": ["google_ads_source", "adwords", "ad_final_url_history"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.ad_final_url_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_final_url_history", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "ad_final_url_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of an ad final url in Google Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Effective final URL of the impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"ad_final_url_history\"", "created_at": 1640812559.7534919}, "source.google_ads_source.adwords.ad_stats": {"fqn": ["google_ads_source", "adwords", "ad_stats"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.ad_stats", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_stats", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "ad_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Google Ads.", "columns": {"customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group": {"name": "ad_group", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_micros": {"name": "cost_micros", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"ad_stats\"", "created_at": 1640812559.753679}, "source.google_ads_source.adwords.ad_history": {"fqn": ["google_ads_source", "adwords", "ad_history"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.ad_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_history", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of an ad in Google Ads.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_type": {"name": "ad_type", "description": "The type of the ad in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the Ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"ad_history\"", "created_at": 1640812559.753862}, "source.google_ads_source.adwords.ad_group_history": {"fqn": ["google_ads_source", "adwords", "ad_group_history"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.ad_group_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "ad_group_history", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of an ad group in Google Ads.", "columns": {"id": {"name": "id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_type": {"name": "ad_group_type", "description": "The type of the ad group in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"ad_group_history\"", "created_at": 1640812559.754048}, "source.google_ads_source.adwords.campaign_history": {"fqn": ["google_ads_source", "adwords", "campaign_history"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.campaign_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "campaign_history", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a campaign in Google Ads.", "columns": {"id": {"name": "id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the record was last updated in Google Ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"campaign_history\"", "created_at": 1640812559.754226}, "source.google_ads_source.adwords.account": {"fqn": ["google_ads_source", "adwords", "account"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.account", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "account", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of an account in Google Ads.", "columns": {"id": {"name": "id", "description": "The ID of the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency of the spend reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"account\"", "created_at": 1640812559.754403}, "source.google_ads_source.adwords.final_url_performance": {"fqn": ["google_ads_source", "adwords", "final_url_performance"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.final_url_performance", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "final_url_performance", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "final_url_performance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the performance of a final url at the ad group level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_descriptive_name": {"name": "account_descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_final_url": {"name": "effective_final_url", "description": "Effective final URL of the impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"final_url_performance\"", "created_at": 1640812559.754603}, "source.google_ads_source.adwords.click_performance": {"fqn": ["google_ads_source", "adwords", "click_performance"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.click_performance", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "click_performance", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "click_performance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The Click Performance report includes stats aggregated at each click level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_descriptive_name": {"name": "account_descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcl_id": {"name": "gcl_id", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"click_performance\"", "created_at": 1640812559.7548008}, "source.google_ads_source.adwords.criteria_performance": {"fqn": ["google_ads_source", "adwords", "criteria_performance"], "database": "postgres", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.criteria_performance", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "criteria_performance", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "criteria_performance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The Criteria Performance report includes statistics aggregated at the ad group criteria level, one row per ad group and criteria combination.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_descriptive_name": {"name": "account_descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "Descriptive string for the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_destination_url": {"name": "criteria_destination_url", "description": "Destination URL of the criterion that triggered ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_type": {"name": "criteria_type", "description": "The type of the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the main object of this row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"adwords\".\"criteria_performance\"", "created_at": 1640812559.7550101}, "source.pinterest_source.pinterest_ads.pin_promotion_report": {"fqn": ["pinterest_source", "pinterest_ads", "pin_promotion_report"], "database": "postgres", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.pin_promotion_report", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "pin_promotion_report", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "pin_promotion_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest Pin promotion.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"pinterest_ads\".\"pin_promotion_report\"", "created_at": 1640812559.7552059}, "source.pinterest_source.pinterest_ads.pin_promotion_history": {"fqn": ["pinterest_source", "pinterest_ads", "pin_promotion_history"], "database": "postgres", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.pin_promotion_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "pin_promotion_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "pin_promotion_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"id": {"name": "id", "description": "Pin promotion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Pin promotion ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"pinterest_ads\".\"pin_promotion_history\"", "created_at": 1640812559.755467}, "source.pinterest_source.pinterest_ads.campaign_history": {"fqn": ["pinterest_source", "pinterest_ads", "campaign_history"], "database": "postgres", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.campaign_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "campaign_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"id": {"name": "id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "Reference to the advertiser who created the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"pinterest_ads\".\"campaign_history\"", "created_at": 1640812559.7556531}, "source.pinterest_source.pinterest_ads.ad_group_history": {"fqn": ["pinterest_source", "pinterest_ads", "ad_group_history"], "database": "postgres", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.ad_group_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "ad_group_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"id": {"name": "id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Parent Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"pinterest_ads\".\"ad_group_history\"", "created_at": 1640812559.755842}, "source.pinterest_source.pinterest_ads.advertiser_history": {"fqn": ["pinterest_source", "pinterest_ads", "advertiser_history"], "database": "postgres", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.advertiser_history", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "advertiser_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "advertiser_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Advertiser.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Identifier of the owner user of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Timestamp of when the advertiser was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_time": {"name": "updated_time", "description": "Timestamp of when the advertiser was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of the advertiser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_account": {"name": "test_account", "description": "Boolean indicating if the advertiser is a test account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Indicates which currency the advertiser is using.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Identifies the country of the advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_one_tap": {"name": "is_one_tap", "description": "Boolean indicating if the advertiser is one tap.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"pinterest_ads\".\"advertiser_history\"", "created_at": 1640812559.7560341}, "source.facebook_ads_source.facebook_ads.account_history": {"fqn": ["facebook_ads_source", "facebook_ads", "account_history"], "database": "postgres", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.account_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "account_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad account.", "columns": {"id": {"name": "id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_ads\".\"account_history\"", "created_at": 1640812559.756213}, "source.facebook_ads_source.facebook_ads.ad_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_history"], "database": "postgres", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.ad_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "ad_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad.", "columns": {"id": {"name": "id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_ads\".\"ad_history\"", "created_at": 1640812559.756396}, "source.facebook_ads_source.facebook_ads.ad_set_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_set_history"], "database": "postgres", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.ad_set_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "ad_set_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_set_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad set.", "columns": {"id": {"name": "id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_ads\".\"ad_set_history\"", "created_at": 1640812559.7565749}, "source.facebook_ads_source.facebook_ads.basic_ad": {"fqn": ["facebook_ads_source", "facebook_ads", "basic_ad"], "database": "postgres", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.basic_ad", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "basic_ad", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "basic_ad", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inline_link_clicks": {"name": "inline_link_clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_ads\".\"basic_ad\"", "created_at": 1640812559.756758}, "source.facebook_ads_source.facebook_ads.campaign_history": {"fqn": ["facebook_ads_source", "facebook_ads", "campaign_history"], "database": "postgres", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.campaign_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "campaign_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook campaign.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_ads\".\"campaign_history\"", "created_at": 1640812559.756935}, "source.facebook_ads_source.facebook_ads.creative_history": {"fqn": ["facebook_ads_source", "facebook_ads", "creative_history"], "database": "postgres", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.creative_history", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "creative_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook creative.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique record identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_link": {"name": "page_link", "description": "URL destination of Facebook ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_feed_spec_link_urls": {"name": "asset_feed_spec_link_urls", "description": "Link to the asset feed spec", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_child_attachments": {"name": "object_story_link_data_child_attachments", "description": "Link of the object story child attachments", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_caption": {"name": "object_story_link_data_caption", "description": "Link of the object story caption", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_description": {"name": "object_story_link_data_description", "description": "Link of the object story description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_link": {"name": "object_story_link_data_link", "description": "Link of the object story link", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_story_link_data_message": {"name": "object_story_link_data_message", "description": "Link of the object story message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ios": {"name": "template_app_link_spec_ios", "description": "Link of the object story spec for ios", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_ipad": {"name": "template_app_link_spec_ipad", "description": "Link of the template app spec for ipad", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_android": {"name": "template_app_link_spec_android", "description": "Link of the template app for android", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_app_link_spec_iphone": {"name": "template_app_link_spec_iphone", "description": "Link of the template app for iphone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_ads\".\"creative_history\"", "created_at": 1640812559.7571452}, "source.snapchat_ads_source.snapchat_ads.ad_account_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_account_history"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_account_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_account_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of an ad account in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"ad_account_history\"", "created_at": 1640812559.757323}, "source.snapchat_ads_source.snapchat_ads.ad_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_history"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of an ad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_squad_id": {"name": "ad_squad_id", "description": "The ID of the related ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"ad_history\"", "created_at": 1640812559.757503}, "source.snapchat_ads_source.snapchat_ads.ad_hourly_report": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_hourly_report"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_hourly_report", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_hourly_report", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_hourly_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an hourly performance summary for an ad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the ad that the report relates to in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The hour that the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "swipes": {"name": "swipes", "description": "The number of swipes for an ad in the hour of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"ad_hourly_report\"", "created_at": 1640812559.757685}, "source.snapchat_ads_source.snapchat_ads.ad_squad_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "ad_squad_history"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.ad_squad_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "ad_squad_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_squad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of an ad squad in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID fo the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad squad in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"ad_squad_history\"", "created_at": 1640812559.7578619}, "source.snapchat_ads_source.snapchat_ads.campaign_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "campaign_history"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.campaign_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "campaign_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of a campaign in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"campaign_history\"", "created_at": 1640812559.758038}, "source.snapchat_ads_source.snapchat_ads.creative_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "creative_history"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.creative_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "creative_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a historic version of a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_account_id": {"name": "ad_account_id", "description": "The ID of the related ad account in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_view_url": {"name": "web_view_url", "description": "The URL of the creative if the creative is of type 'web view'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"creative_history\"", "created_at": 1640812559.758215}, "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history": {"fqn": ["snapchat_ads_source", "snapchat_ads", "creative_url_tag_history"], "database": "postgres", "schema": "snapchat_ads", "unique_id": "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "models/src_snapchat.yml", "original_file_path": "models/src_snapchat.yml", "name": "creative_url_tag_history", "source_name": "snapchat_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_url_tag_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record in this table represents a URL paramter key-value pair for a creative in Snapchat.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative in Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "The URL parameter key, i.e. UTM_SOURCE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The URL parameter value, i.e. Snapchat.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"snapchat_ads\".\"creative_url_tag_history\"", "created_at": 1640812559.75839}, "source.twitter_ads_source.twitter_ads.account_history": {"fqn": ["twitter_ads_source", "twitter_ads", "account_history"], "database": "postgres", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.account_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "account_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "The random encryption key used to has data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_ads\".\"account_history\"", "created_at": 1640812559.75859}, "source.twitter_ads_source.twitter_ads.campaign_history": {"fqn": ["twitter_ads_source", "twitter_ads", "campaign_history"], "database": "postgres", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.campaign_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "campaign_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "servable": {"name": "servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_ads\".\"campaign_history\"", "created_at": 1640812559.758841}, "source.twitter_ads_source.twitter_ads.line_item_history": {"fqn": ["twitter_ads_source", "twitter_ads", "line_item_history"], "database": "postgres", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.line_item_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "line_item_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "line_item_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_ads\".\"line_item_history\"", "created_at": 1640812559.75907}, "source.twitter_ads_source.twitter_ads.promoted_tweet_history": {"fqn": ["twitter_ads_source", "twitter_ads", "promoted_tweet_history"], "database": "postgres", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "promoted_tweet_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "promoted_tweet_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_ads\".\"promoted_tweet_history\"", "created_at": 1640812559.75926}, "source.twitter_ads_source.twitter_ads.tweet_url": {"fqn": ["twitter_ads_source", "twitter_ads", "tweet_url"], "database": "postgres", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.tweet_url", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "tweet_url", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "tweet_url", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_ads\".\"tweet_url\"", "created_at": 1640812559.759446}, "source.twitter_ads_source.twitter_ads.promoted_tweet_report": {"fqn": ["twitter_ads_source", "twitter_ads", "promoted_tweet_report"], "database": "postgres", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "promoted_tweet_report", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "promoted_tweet_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the performance of a promoted tweet on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.BD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_ads\".\"promoted_tweet_report\"", "created_at": 1640812559.7596312}}, "macros": {"macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.447398}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4486809}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4575129}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.458776}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4595652}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4603572}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.461615}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.46255}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.46302}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.463907}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.464931}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.465132}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.465578}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.465869}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4680161}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4692008}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.469773}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.471307}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.473022}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.475507}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.476001}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.476367}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.476732}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.477094}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.478067}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.47891}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.479684}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.480709}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.481374}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.48769}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.488118}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.48869}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.489116}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4893692}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4911811}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.491725}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.492162}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.494623}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.4994712}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5043788}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.505187}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.505611}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.505839}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.506361}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.508498}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5090199}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5096698}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.510761}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.523059}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.527936}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.529021}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.529801}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5308092}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.531762}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.533539}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5349262}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5365708}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.541195}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.544111}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.544694}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.545769}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5464268}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5480409}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.54969}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5606122}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5683131}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.571504}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.574527}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.576349}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.58407}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.585185}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.585655}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.586169}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5872}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.594773}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5956008}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5961652}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.5991402}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.600076}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.600498}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.600967}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.601643}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.608232}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6145148}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.616776}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.617356}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.618604}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.618979}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.619282}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.619688}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.619984}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.621196}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.621672}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.624845}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.625838}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.626412}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.627594}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.628255}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.628968}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.629977}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.630622}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.631561}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.632155}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.632965}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.634505}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.637006}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6384482}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.639192}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.642314}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.645418}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.64731}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6478999}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6489651}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6494348}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.649919}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.650388}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.651477}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6518269}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6522298}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6532302}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.656008}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6568651}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.657336}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.657894}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6583612}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6587782}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.659418}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6601338}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.660765}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.662154}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6627278}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6632278}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.664274}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6646569}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6652439}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.666393}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6677802}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.66821}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.668728}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6691551}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6698382}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.67106}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6736178}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.674274}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.674756}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.675157}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6756139}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6762528}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.67678}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.677672}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.678155}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.678581}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.68157}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.681976}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.682755}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6832252}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.684078}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.684663}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6862102}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.686856}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.688917}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.69012}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.690719}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.691456}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.692162}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6929102}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.693104}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.693291}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6941938}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.694619}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.695364}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.69569}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.697118}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.697563}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.6977558}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.697943}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.698126}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.698616}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.698808}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.699001}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.699405}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.699594}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.699779}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.700182}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.700372}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7005599}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7009642}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7011552}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.701343}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.70175}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.701941}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7021282}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7033348}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7042298}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7045052}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.704841}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7061372}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.70669}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.707119}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7075388}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.708045}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7088718}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.70907}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.709259}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.710451}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7108018}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.711201}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.711603}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7157671}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.716192}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7166028}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.721096}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.721621}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.722692}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.723135}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.723501}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.723831}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.72465}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.725018}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.725358}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.726184}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.72655}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.72687}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.728101}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.728377}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7286458}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7296362}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7300322}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7303739}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.731112}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7313821}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.732576}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.732876}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.733066}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.733253}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.733778}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.734068}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.734446}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.734735}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.735146}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.73755}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7387252}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.739968}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.740469}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.741729}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.742398}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.742774}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.743752}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.744201}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.745247}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7456698}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.746121}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.74701}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7473679}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.747715}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7497401}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7592242}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.760743}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.761547}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.762814}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.775816}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.77683}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7780101}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.779124}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.780759}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7816331}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.78244}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.78321}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.783633}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.784433}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.784933}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.785692}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7861319}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7874}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.788544}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.789089}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.790076}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.790818}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.792325}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.793201}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.794306}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.795309}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.79618}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.7966201}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.797997}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.799175}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.800431}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.801547}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.802643}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.803072}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.803957}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8044019}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.805748}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.807366}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.808602}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.809459}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.810637}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8113868}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.812414}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.81374}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.815132}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.816706}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.817806}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.818235}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.81976}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.82194}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.826984}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.830827}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.832671}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.834157}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8347478}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.835648}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8365738}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.837448}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.838924}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.841063}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.842657}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.843709}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.844186}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.845531}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8470268}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.849358}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8504372}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.851153}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.852766}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.855469}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.858731}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.863832}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.866631}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8725498}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8734562}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.874079}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8754208}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.877776}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8788018}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.879593}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.880491}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.881359}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.8841758}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.884795}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.886616}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.887908}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.889955}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.893538}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.895766}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.897939}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.899063}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.900637}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9025888}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.903331}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.904759}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.906812}, "macro.linkedin_source.get_creative_history_columns": {"unique_id": "macro.linkedin_source.get_creative_history_columns", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"call_to_action_label_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"call_to_action_target\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"click_uri\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"follow_company_call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"follow_company_organization_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"follow_company_organization_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"jobs_company_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobs_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobs_organization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"reference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_in_mail_content\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_activity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_activity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_direct_sponsored_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"sponsored_update_carousel_share\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_direct_sponsored_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"sponsored_update_share\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_video_media_asset\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_video_user_generated_content_post\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_custom_background\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_forum_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_headline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_show_member_profile_photo\", \"datatype\": \"boolean\"},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text_ad_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text_ad_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.918751}, "macro.linkedin_source.get_campaign_group_history_columns": {"unique_id": "macro.linkedin_source.get_campaign_group_history_columns", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_campaign_group_history_columns.sql", "original_file_path": "macros/get_campaign_group_history_columns.sql", "name": "get_campaign_group_history_columns", "macro_sql": "{% macro get_campaign_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"backfilled\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"run_schedule_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"run_schedule_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9219232}, "macro.linkedin_source.get_campaign_history_columns": {"unique_id": "macro.linkedin_source.get_campaign_history_columns", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"associated_entity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"audience_expansion_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"campaign_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_selection\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"daily_budget_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"format\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locale_language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"offsite_delivery_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"optimization_target_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"run_schedule_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"run_schedule_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_cost_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"unit_cost_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9286022}, "macro.linkedin_source.get_ad_analytics_by_creative_columns": {"unique_id": "macro.linkedin_source.get_ad_analytics_by_creative_columns", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_ad_analytics_by_creative_columns.sql", "original_file_path": "macros/get_ad_analytics_by_creative_columns.sql", "name": "get_ad_analytics_by_creative_columns", "macro_sql": "{% macro get_ad_analytics_by_creative_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"action_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_unit_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"approximate_unique_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"card_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"card_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comment_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comments_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"company_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"conversion_value_in_local_currency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cost_in_local_currency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cost_in_usd\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"day\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"external_website_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"external_website_post_click_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"external_website_post_view_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"follows\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"full_screen_plays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"landing_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lead_generation_mail_contact_info_shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lead_generation_mail_interested_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"one_click_lead_form_opens\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"one_click_leads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"opens\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"other_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"text_url_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_first_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_midpoint_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_starts\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_third_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_views\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_card_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_card_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_comment_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_comments\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_company_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_external_website_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_external_website_post_click_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_external_website_post_view_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_extrernal_website_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_extrernal_website_post_click_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_extrernal_website_post_view_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_follows\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_full_screen_plays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_landing_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_one_click_lead_form_opens\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_one_click_leads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_other_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_total_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_first_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_midpoint_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_starts\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_third_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_views\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.946787}, "macro.linkedin_source.get_account_history_columns": {"unique_id": "macro.linkedin_source.get_account_history_columns", "package_name": "linkedin_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/linkedin_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"notified_on_campaign_optimization\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_creative_approval\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_creative_rejection\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_end_of_campaign\", \"datatype\": \"boolean\"},\n    {\"name\": \"reference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_budget_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_budget_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_budget_ends_at\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.951243}, "macro.spark_utils.get_tables": {"unique_id": "macro.spark_utils.get_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9596941}, "macro.spark_utils.get_delta_tables": {"unique_id": "macro.spark_utils.get_delta_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.961448}, "macro.spark_utils.get_statistic_columns": {"unique_id": "macro.spark_utils.get_statistic_columns", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.963789}, "macro.spark_utils.spark_optimize_delta_tables": {"unique_id": "macro.spark_utils.spark_optimize_delta_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.965688}, "macro.spark_utils.spark_vacuum_delta_tables": {"unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9675908}, "macro.spark_utils.spark_analyze_tables": {"unique_id": "macro.spark_utils.spark_analyze_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.969933}, "macro.spark_utils.spark__concat": {"unique_id": "macro.spark_utils.spark__concat", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "name": "spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9705532}, "macro.spark_utils.spark__type_numeric": {"unique_id": "macro.spark_utils.spark__type_numeric", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "name": "spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.9710531}, "macro.spark_utils.spark__dateadd": {"unique_id": "macro.spark_utils.spark__dateadd", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "name": "spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812555.976937}, "macro.spark_utils.spark__datediff": {"unique_id": "macro.spark_utils.spark__datediff", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "name": "spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.020695}, "macro.spark_utils.spark__current_timestamp": {"unique_id": "macro.spark_utils.spark__current_timestamp", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.021494}, "macro.spark_utils.spark__current_timestamp_in_utc": {"unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.02179}, "macro.spark_utils.spark__split_part": {"unique_id": "macro.spark_utils.spark__split_part", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "name": "spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.0239282}, "macro.spark_utils.spark__get_relations_by_pattern": {"unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.0290308}, "macro.spark_utils.spark__get_relations_by_prefix": {"unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.030265}, "macro.spark_utils.spark__get_tables_by_pattern": {"unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.03129}, "macro.spark_utils.spark__get_tables_by_prefix": {"unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.032314}, "macro.spark_utils.assert_not_null": {"unique_id": "macro.spark_utils.assert_not_null", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.033597}, "macro.spark_utils.default__assert_not_null": {"unique_id": "macro.spark_utils.default__assert_not_null", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.034359}, "macro.spark_utils.spark__convert_timezone": {"unique_id": "macro.spark_utils.spark__convert_timezone", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.03531}, "macro.google_ads_source.get_ad_group_history_columns": {"unique_id": "macro.google_ads_source.get_ad_group_history_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_rotation_mode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"base_ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"base_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_bid_ceiling\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_bid_changes_for_raises_only\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_bid_floor\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_bid_modifier\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bidding_strategy_competitor_domain\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_cpa_bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_cpc_bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_cpm_bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_enhanced_cpc_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_max_cpc_bid_ceiling\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_max_cpc_bid_floor\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_raise_bid_when_budget_constrained\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_raise_bid_when_low_quality_score\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_scheme_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_spend_target\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_strategy_goal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_target_cpa\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_target_outrank_share\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_target_roas\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bidding_strategy_target_roas_override\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bidding_strategy_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_viewable_cpm_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"content_bid_criterion_type_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"final_url_suffix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tracking_url_template\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.0486772}, "macro.google_ads_source.get_account_columns": {"unique_id": "macro.google_ads_source.get_account_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_account_columns.sql", "original_file_path": "macros/get_account_columns.sql", "name": "get_account_columns", "macro_sql": "{% macro get_account_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_label_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"account_label_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_manage_clients\", \"datatype\": \"boolean\"},\n    {\"name\": \"currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"manager_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sequence_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"test_account\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.052474}, "macro.google_ads_source.get_campaign_history_columns": {"unique_id": "macro.google_ads_source.get_campaign_history_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_serving_optimization_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertising_channel_subtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertising_channel_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"base_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_bid_ceiling\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_bid_changes_for_raises_only\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_bid_floor\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_bid_modifier\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bidding_strategy_competitor_domain\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_cpa_bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_cpc_bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_cpm_bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_enhanced_cpc_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_max_cpc_bid_ceiling\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_max_cpc_bid_floor\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_raise_bid_when_budget_constrained\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_raise_bid_when_low_quality_score\", \"datatype\": \"boolean\"},\n    {\"name\": \"bidding_strategy_scheme_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_spend_target\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_strategy_goal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_target_cpa\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_target_outrank_share\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bidding_strategy_target_roas\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bidding_strategy_target_roas_override\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bidding_strategy_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bidding_strategy_viewable_cpm_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"campaign_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_trial_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_date\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"final_url_suffix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"frequency_cap_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"frequency_cap_level\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"frequency_cap_time_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network_setting_target_content_network\", \"datatype\": \"boolean\"},\n    {\"name\": \"network_setting_target_google_search\", \"datatype\": \"boolean\"},\n    {\"name\": \"network_setting_target_partner_search_network\", \"datatype\": \"boolean\"},\n    {\"name\": \"network_setting_target_search_network\", \"datatype\": \"boolean\"},\n    {\"name\": \"serving_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_date\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tracking_url_template\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vanity_pharma_display_url_mode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vanity_pharma_text\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.0679429}, "macro.google_ads_source.get_ad_stats_columns": {"unique_id": "macro.google_ads_source.get_ad_stats_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_stats_columns.sql", "original_file_path": "macros/get_ad_stats_columns.sql", "name": "get_ad_stats_columns", "macro_sql": "{% macro get_ad_stats_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active_view_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"active_view_measurability\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"active_view_measurable_cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"active_view_measurable_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"active_view_viewability\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ad_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_base_ad_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_network_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_base_campaign\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"conversions\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"conversions_value\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cost_micros\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"interaction_event_types\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"interactions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"keyword_ad_group_criterion\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"view_through_conversions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.075562}, "macro.google_ads_source.get_ad_final_url_history_columns": {"unique_id": "macro.google_ads_source.get_ad_final_url_history_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_final_url_history_columns.sql", "original_file_path": "macros/get_ad_final_url_history_columns.sql", "name": "get_ad_final_url_history_columns", "macro_sql": "{% macro get_ad_final_url_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"sequence_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.077641}, "macro.google_ads_source.get_ad_history_columns": {"unique_id": "macro.google_ads_source.get_ad_history_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"automated\", \"datatype\": \"boolean\"},\n    {\"name\": \"base_adgroup_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"base_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"device_preference\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"display_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"final_url_suffix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"policy_summary_combined_approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"policy_summary_denormalized_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"policy_summary_review_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"system_managed_entity_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tracking_url_template\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.082425}, "macro.google_ads_source.get_final_url_performance_columns": {"unique_id": "macro.google_ads_source.get_final_url_performance_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_final_url_performance_columns", "macro_sql": "{% macro get_final_url_performance_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_descriptive_name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_name\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost\", \"datatype\": dbt_utils.type_float(), \"alias\": \"spend\"},\n    {\"name\": \"date\", \"datatype\": \"date\", \"alias\": \"date_day\"},\n    {\"name\": \"effective_final_url\", \"datatype\": dbt_utils.type_string(), \"alias\": \"final_url\"},\n    {\"name\": \"external_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.088198}, "macro.google_ads_source.get_click_performance_columns": {"unique_id": "macro.google_ads_source.get_click_performance_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_click_performance_columns", "macro_sql": "{% macro get_click_performance_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_descriptive_name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_name\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"criteria_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\", \"alias\": \"date_day\"},\n    {\"name\": \"external_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"gcl_id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"gclid\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.0918632}, "macro.google_ads_source.get_criteria_performance_columns": {"unique_id": "macro.google_ads_source.get_criteria_performance_columns", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_criteria_performance_columns", "macro_sql": "{% macro get_criteria_performance_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_descriptive_name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_name\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost\", \"datatype\": dbt_utils.type_float(), \"alias\": \"spend\"},\n    {\"name\": \"criteria\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"criteria_destination_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"criteria_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\", \"alias\": \"date_day\"},\n    {\"name\": \"external_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.096221}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.09735}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.0992022}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.09963}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.100047}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.100466}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1008399}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.101328}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1024902}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1035872}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.105658}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.106343}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.106982}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1076}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.108223}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.108918}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1096041}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.110435}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.110708}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1109738}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1112409}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.112413}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.114235}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.115829}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1169012}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.117248}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1175869}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1179252}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.11827}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1227589}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.123181}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1235998}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.124007}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1285279}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.get_columns_for_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.132002}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.133216}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.134699}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.135875}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.136408}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1370409}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.13782}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1399932}, "macro.fivetran_utils.staging_models_automation": {"unique_id": "macro.fivetran_utils.staging_models_automation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/staging_models_automation.sql", "original_file_path": "macros/staging_models_automation.sql", "name": "staging_models_automation", "macro_sql": "{% macro staging_models_automation(package, source_schema, source_database, tables) %}\n\n{% set package = \"\"~ package ~\"\" %}\n{% set source_schema = \"\"~ source_schema ~\"\" %}\n{% set source_database = \"\"~ source_database ~\"\" %}\n\n{% set zsh_command = \"source dbt_modules/fivetran_utils/columns_setup.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n\n{% for t in tables %}\n    {% if t != tables[-1] %}\n        {% set help_command = zsh_command + t + \" && \\n\" %}\n\n    {% else %}\n        {% set help_command = zsh_command + t %}\n\n    {% endif %}\n    {{ log(help_command, info=True) }}\n\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.142517}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1510668}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1519518}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1530318}, "macro.fivetran_utils.default__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.default__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "default__get_columns_for_macro", "macro_sql": "{% macro default__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) = 'number' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.155251}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) = 'numeric' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.156424}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__get_columns_for_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.157067}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.160488}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1619682}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1632042}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.163606}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.164008}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.164454}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1649542}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.165347}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.166802}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.name == source.name %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.169352}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.170772}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.171198}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.171615}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.172035}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.172451}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1729002}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1736379}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.173913}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.174287}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1760378}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.178441}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1828601}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.186528}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1872902}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.187565}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.187826}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.188898}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1900039}, "macro.ad_reporting.get_staging_files": {"unique_id": "macro.ad_reporting.get_staging_files", "package_name": "ad_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/ad_reporting", "path": "macros/get_staging_files.sql", "original_file_path": "macros/get_staging_files.sql", "name": "get_staging_files", "macro_sql": "{% macro get_staging_files() %}\n\n    {% set staging_file = [] %}\n\n    {% if var('ad_reporting__pinterest_enabled') %} \n    {% set _ = staging_file.append(ref('stg_pinterest_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__microsoft_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_microsoft_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__linkedin_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_linkedin_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__twitter_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_twitter_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__google_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_google_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__facebook_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_facebook_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__snapchat_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_snapchat_ads')) %}\n    {% endif %}\n\n\n    {{ return(staging_file) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.1940491}, "macro.pinterest_source.get_ad_group_history_columns": {"unique_id": "macro.pinterest_source.get_ad_group_history_columns", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"end_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"ad_group_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"start_timestamp\"},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.196977}, "macro.pinterest_source.get_pin_promotion_history_columns": {"unique_id": "macro.pinterest_source.get_pin_promotion_history_columns", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_pin_promotion_history_columns.sql", "original_file_path": "macros/get_pin_promotion_history_columns.sql", "name": "get_pin_promotion_history_columns", "macro_sql": "{% macro get_pin_promotion_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"android_deep_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"click_tracking_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ios_deep_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_pin_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_removable\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pin_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"view_tracking_url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.2014909}, "macro.pinterest_source.get_pin_promotion_report_columns": {"unique_id": "macro.pinterest_source.get_pin_promotion_report_columns", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_pin_promotion_report_columns.sql", "original_file_path": "macros/get_pin_promotion_report_columns.sql", "name": "get_pin_promotion_report_columns", "macro_sql": "{% macro get_pin_promotion_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"clickthrough_1_gross\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"closeup_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"closeup_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cpcv_in_micro_dollar\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpcv_p_95_in_micro_dollar\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpv_in_micro_dollar\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"engagement_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"engagement_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_1_gross\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pin_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pin_promotion_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"repin_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"repin_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_click_unknown\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_conversions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_impression_frequency\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_impression_user\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_unknown_tablet_action_to_mobile_conversion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_avg_watchtime_in_second_1\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"video_avg_watchtime_in_second_2\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"video_mrc_views_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_mrc_views_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_0_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_0_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_100_complete_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_100_complete_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_25_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_25_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_50_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_50_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_75_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_75_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_95_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_95_combined_2\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.2129831}, "macro.pinterest_source.get_campaign_history_columns": {"unique_id": "macro.pinterest_source.get_campaign_history_columns", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"campaign_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.215156}, "macro.pinterest_source.get_advertiser_history_columns": {"unique_id": "macro.pinterest_source.get_advertiser_history_columns", "package_name": "pinterest_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/pinterest_source", "path": "macros/get_advertiser_history_columns.sql", "original_file_path": "macros/get_advertiser_history_columns.sql", "name": "get_advertiser_history_columns", "macro_sql": "{% macro get_advertiser_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"owner_user_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"advertiser_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"test_account\", \"datatype\": \"boolean\"},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_one_tap\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.2184472}, "macro.facebook_ads_source.get_ad_set_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_set_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_ad_set_history_columns.sql", "original_file_path": "macros/get_ad_set_history_columns.sql", "name": "get_ad_set_history_columns", "macro_sql": "{% macro get_ad_set_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"adset_source_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_info_actions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_strategy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_event\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"budget_remaining\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"destination_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"instagram_actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_imps\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization_goal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_application_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_custom_event_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_event_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_object_store_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_offer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_page_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_pixel_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_place_page_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_product_catalog_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_product_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"recurring_budget_semantics\", \"datatype\": \"boolean\"},\n    {\"name\": \"rf_prediction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_age_max\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"targeting_age_min\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"targeting_app_install_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_audience_network_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_college_years\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_device_platforms\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_majors\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_schools\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_statuses\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_effective_audience_network_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_publisher_categories\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_publisher_list_ids\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_user_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_exclusions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_facebook_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_flexible_spec\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_friends_of_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_geo_locations_countries\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_geo_locations_location_types\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_instagram_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_locales\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_publisher_platforms\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_adclusters\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_wireless_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_work_employers\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_work_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"use_new_app_click\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.236531}, "macro.facebook_ads_source.get_creative_history_columns": {"unique_id": "macro.facebook_ads_source.get_creative_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"applink_treatment\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"asset_feed_spec_link_urls\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"branded_content_sponsor_page_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"call_to_action_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"carousel_ad_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"effective_instagram_story_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_object_story_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"image_file\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"image_hash\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"image_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"instagram_actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"instagram_permalink_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"instagram_story_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"link_og_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"link_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"object_story_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"thumbnail_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_tags\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"use_page_actor_override\", \"datatype\": \"boolean\"},\n    {\"name\": \"video_call_to_action_value_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"video_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.2514691}, "macro.facebook_ads_source.get_campaign_history_columns": {"unique_id": "macro.facebook_ads_source.get_campaign_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"boosted_object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"budget_rebalance_flag\", \"datatype\": \"boolean\"},\n    {\"name\": \"buying_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_create_brand_lift_study\", \"datatype\": \"boolean\"},\n    {\"name\": \"can_use_spend_cap\", \"datatype\": \"boolean\"},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stop_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.256701}, "macro.facebook_ads_source.get_basic_ad_columns": {"unique_id": "macro.facebook_ads_source.get_basic_ad_columns", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_basic_ad_columns.sql", "original_file_path": "macros/get_basic_ad_columns.sql", "name": "get_basic_ad_columns", "macro_sql": "{% macro get_basic_ad_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"adset_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cpc\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpm\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ctr\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"frequency\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"inline_link_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.260993}, "macro.facebook_ads_source.get_account_history_columns": {"unique_id": "macro.facebook_ads_source.get_account_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"age\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"agency_client_declaration_agency_representing_client\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_client_based_in_france\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_client_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_email_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_street_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_has_written_mandate_from_advertiser\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_is_client_paying_invoices\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_spent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_created_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"business_manager_manager_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_manager_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_primary_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_timezone_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_manager_update_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"business_manager_updated_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_street_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_create_brand_lift_study\", \"datatype\": \"boolean\"},\n    {\"name\": \"capabilities\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"disable_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"end_advertiser\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_advertiser_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"has_migrated_permissions\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"io_number\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_attribution_spec_system_default\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_direct_deals_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_notifications_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_personal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_prepay_account\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_tax_id_required\", \"datatype\": \"boolean\"},\n    {\"name\": \"media_agency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"min_campaign_group_spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"min_daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"next_bill_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"offsite_pixels_tos_accepted\", \"datatype\": \"boolean\"},\n    {\"name\": \"owner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"partner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"salesforce_invoice_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_id_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_id_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"timezone_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_offset_hours_utc\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.277911}, "macro.facebook_ads_source.get_ad_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_source_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_info_actions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_non_functional_landing_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_use_of_our_brand_assets\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_updated_by_app_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_non_functional_landing_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_use_of_our_brand_assets\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_instagram_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.284333}, "macro.snapchat_ads_source.get_ad_squad_history_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_squad_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_squad_history_columns.sql", "original_file_path": "macros/get_ad_squad_history_columns.sql", "name": "get_ad_squad_history_columns", "macro_sql": "{% macro get_ad_squad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"audience_size_maximum\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"audience_size_minimum\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"auto_bid\", \"datatype\": \"boolean\"},\n    {\"name\": \"bid_estimate_maximum\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"bid_estimate_minimum\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"bid_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"billing_event\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lifetime_budget_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"lifetime_spend_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization_goal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_regulated_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_numeric", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.290438}, "macro.snapchat_ads_source.get_creative_history_columns": {"unique_id": "macro.snapchat_ads_source.get_creative_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_product\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"app_install_android_app_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"app_install_app_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"app_install_icon_media_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"app_install_ios_app_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"attachment_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"brand_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deep_link_android_app_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deep_link_app_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deep_link_icon_media_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deep_link_ios_app_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deep_link_uri\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"headline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"longform_video_media_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"packaging_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"playback_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"preview_creative_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shareable\", \"datatype\": \"boolean\"},\n    {\"name\": \"top_snap_crop_position\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"top_snap_media_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"web_view_allow_snap_javascript_sdk\", \"datatype\": \"boolean\"},\n    {\"name\": \"web_view_block_preload\", \"datatype\": \"boolean\"},\n    {\"name\": \"web_view_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"web_view_use_immersive_mode\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.2988899}, "macro.snapchat_ads_source.get_ad_hourly_report_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_hourly_report_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_hourly_report_columns.sql", "original_file_path": "macros/get_ad_hourly_report_columns.sql", "name": "get_ad_hourly_report_columns", "macro_sql": "{% macro get_ad_hourly_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"android_installs\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_avg_view_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_quartile_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_quartile_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_quartile_3\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_total_view_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_uniques\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"attachment_view_completion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"avg_screen_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"avg_view_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_add_billing\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_add_cart\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_app_opens\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_level_completes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_page_views\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_purchases\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_purchases_value\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_save\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_searches\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_sign_ups\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_start_checkout\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"conversion_view_content\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"ios_installs\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quartile_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quartile_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quartile_3\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"saves\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"screen_time_millis\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"story_completes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"story_opens\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"swipe_up_percent\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"swipes\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_installs\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"uniques\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_views\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"view_completion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"view_time_millis\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.3107681}, "macro.snapchat_ads_source.get_campaign_history_columns": {"unique_id": "macro.snapchat_ads_source.get_campaign_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lifetime_spend_cap_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.314225}, "macro.snapchat_ads_source.get_creative_url_tag_history_columns": {"unique_id": "macro.snapchat_ads_source.get_creative_url_tag_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_creative_url_tag_history_columns.sql", "original_file_path": "macros/get_creative_url_tag_history_columns.sql", "name": "get_creative_url_tag_history_columns", "macro_sql": "{% macro get_creative_url_tag_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"key\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.31603}, "macro.snapchat_ads_source.get_ad_history_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_squad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.319464}, "macro.snapchat_ads_source.get_ad_account_history_columns": {"unique_id": "macro.snapchat_ads_source.get_ad_account_history_columns", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "macros/get_ad_account_history_columns.sql", "original_file_path": "macros/get_ad_account_history_columns.sql", "name": "get_ad_account_history_columns", "macro_sql": "{% macro get_ad_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lifetime_spend_cap_micro\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.322887}, "macro.twitter_ads_source.get_account_history_columns": {"unique_id": "macro.twitter_ads_source.get_account_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_id\"},\n    {\"name\": \"industry_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_switch_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.3305368}, "macro.twitter_ads_source.get_campaign_history_columns": {"unique_id": "macro.twitter_ads_source.get_campaign_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"duration_in_days\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"end_timestamp\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"frequency_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"funding_instrument_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"campaign_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"campaign_name\"},\n    {\"name\": \"servable\", \"datatype\": \"boolean\", \"alias\": \"is_servable\"},\n    {\"name\": \"standard_delivery\", \"datatype\": \"boolean\"},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"start_timestamp\"},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.335192}, "macro.twitter_ads_source.get_line_item_history_columns": {"unique_id": "macro.twitter_ads_source.get_line_item_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_line_item_history_columns", "macro_sql": "{% macro get_line_item_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser_domain\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_user_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"automatically_select_bid\", \"datatype\": \"boolean\"},\n    {\"name\": \"bid_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bid_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"creative_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"end_timestamp\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"line_item_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"primary_web_event_tag\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"start_timestamp\"},\n    {\"name\": \"target_cpa_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.341203}, "macro.twitter_ads_source.get_promoted_tweet_history_columns": {"unique_id": "macro.twitter_ads_source.get_promoted_tweet_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_promoted_tweet_history_columns", "macro_sql": "{% macro get_promoted_tweet_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"promoted_tweet_id\"},\n    {\"name\": \"line_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.343741}, "macro.twitter_ads_source.get_tweet_url_columns": {"unique_id": "macro.twitter_ads_source.get_tweet_url_columns", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_tweet_url_columns", "macro_sql": "{% macro get_tweet_url_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"display_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expanded_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"indices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.34562}, "macro.twitter_ads_source.get_promoted_tweet_report_columns": {"unique_id": "macro.twitter_ads_source.get_promoted_tweet_report_columns", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_promoted_tweet_report_columns", "macro_sql": "{% macro get_promoted_tweet_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt_utils.type_int(), \"alias\": \"spend_micro\"},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"date_day\"},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1640812556.3478541}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "google_ads_source._fivetran_id": {"unique_id": "google_ads_source._fivetran_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_id", "block_contents": "Unique ID used by Fivetran to sync and dedupe data."}, "google_ads_source._fivetran_synced": {"unique_id": "google_ads_source._fivetran_synced", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "google_ads_source.account_descriptive_name": {"unique_id": "google_ads_source.account_descriptive_name", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_descriptive_name", "block_contents": "The descriptive name of the Customer account."}, "google_ads_source.ad_group_id": {"unique_id": "google_ads_source.ad_group_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_id", "block_contents": "The ID of the AdGroup."}, "google_ads_source.ad_group_name": {"unique_id": "google_ads_source.ad_group_name", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_name", "block_contents": "The name of the AdGroup."}, "google_ads_source.ad_group_status": {"unique_id": "google_ads_source.ad_group_status", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_status", "block_contents": "Status of the ad group."}, "google_ads_source.campaign_id": {"unique_id": "google_ads_source.campaign_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_id", "block_contents": "The ID of the Campaign."}, "google_ads_source.ad_id": {"unique_id": "google_ads_source.ad_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_id", "block_contents": "The ID of the Ad."}, "google_ads_source.account_id": {"unique_id": "google_ads_source.account_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_id", "block_contents": "The ID of the Account."}, "google_ads_source.ad_status": {"unique_id": "google_ads_source.ad_status", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_status", "block_contents": "Status of the Ad."}, "google_ads_source.campaign_name": {"unique_id": "google_ads_source.campaign_name", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_name", "block_contents": "The name of the Campaign."}, "google_ads_source.campaign_status": {"unique_id": "google_ads_source.campaign_status", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_status", "block_contents": "Status of the Campaign."}, "google_ads_source.clicks": {"unique_id": "google_ads_source.clicks", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The number of clicks."}, "google_ads_source.cost": {"unique_id": "google_ads_source.cost", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "cost", "block_contents": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period."}, "google_ads_source.date": {"unique_id": "google_ads_source.date", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "date", "block_contents": "The date being reported on."}, "google_ads_source.effective_final_url": {"unique_id": "google_ads_source.effective_final_url", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "effective_final_url", "block_contents": "Effective final URL of the impressions."}, "google_ads_source.external_customer_id": {"unique_id": "google_ads_source.external_customer_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "external_customer_id", "block_contents": "The Customer ID."}, "google_ads_source.impressions": {"unique_id": "google_ads_source.impressions", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impressions", "block_contents": "Count of how often your ad has appeared on a search results page or website on the Google Network."}, "google_ads_source.criteria_id": {"unique_id": "google_ads_source.criteria_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_id", "block_contents": "The Criterion ID."}, "google_ads_source.gcl_id": {"unique_id": "google_ads_source.gcl_id", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "gcl_id", "block_contents": "The Google Click ID."}, "google_ads_source.criteria": {"unique_id": "google_ads_source.criteria", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria", "block_contents": "Descriptive string for the Criterion."}, "google_ads_source.criteria_destination_url": {"unique_id": "google_ads_source.criteria_destination_url", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_destination_url", "block_contents": "Destination URL of the criterion that triggered ads."}, "google_ads_source.criteria_type": {"unique_id": "google_ads_source.criteria_type", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_type", "block_contents": "The type of the Criterion."}, "google_ads_source.base_url": {"unique_id": "google_ads_source.base_url", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "base_url", "block_contents": "The base URL of the ad, extracted from the `effective_final_url`."}, "google_ads_source.url_host": {"unique_id": "google_ads_source.url_host", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_host", "block_contents": "The URL host of the ad, extracted from the `effective_final_url`."}, "google_ads_source.url_path": {"unique_id": "google_ads_source.url_path", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_path", "block_contents": "The URL path of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_source": {"unique_id": "google_ads_source.utm_source", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_source", "block_contents": "The utm_source parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_medium": {"unique_id": "google_ads_source.utm_medium", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_medium", "block_contents": "The utm_medium parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_campaign": {"unique_id": "google_ads_source.utm_campaign", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_campaign", "block_contents": "The utm_campaign parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_content": {"unique_id": "google_ads_source.utm_content", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_content", "block_contents": "The utm_content parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_term": {"unique_id": "google_ads_source.utm_term", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_term", "block_contents": "The utm_term parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.updated_at": {"unique_id": "google_ads_source.updated_at", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_at", "block_contents": "Timestamp of when the record was last updated in Google Ads."}, "google_ads_source.ad_type": {"unique_id": "google_ads_source.ad_type", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_type", "block_contents": "The type of the ad in Google Ads."}, "google_ads_source.ad_group_type": {"unique_id": "google_ads_source.ad_group_type", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_type", "block_contents": "The type of the ad group in Google Ads."}, "google_ads_source.is_most_recent_record": {"unique_id": "google_ads_source.is_most_recent_record", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether the record is the most recent version of the object."}, "facebook_ads_source._fivetran_synced": {"unique_id": "facebook_ads_source._fivetran_synced", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "facebook_ads_source.is_most_recent_record": {"unique_id": "facebook_ads_source.is_most_recent_record", "package_name": "facebook_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it."}, "snapchat_ads_source._fivetran_synced": {"unique_id": "snapchat_ads_source._fivetran_synced", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "snapchat_ads_source.is_most_recent_record": {"unique_id": "snapchat_ads_source.is_most_recent_record", "package_name": "snapchat_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/snapchat_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record."}, "twitter_ads_source._fivetran_synced": {"unique_id": "twitter_ads_source._fivetran_synced", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "twitter_ads_source.created_at": {"unique_id": "twitter_ads_source.created_at", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "created_at", "block_contents": "The timestamp the account was created."}, "twitter_ads_source.updated_at": {"unique_id": "twitter_ads_source.updated_at", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_at", "block_contents": "The timestamp the account was last updated."}, "twitter_ads_source.deleted": {"unique_id": "twitter_ads_source.deleted", "package_name": "twitter_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "deleted", "block_contents": "Whether the record has been deleted or not."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": [{"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/bigquery/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "70cace2e3ae8fc0ddcedd55d1c54cc1da45c2e76da49436cf4c97f49ad387209"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'bigquery' | as_bool() }}"}, "created_at": 1640812557.2098272}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/snowflake/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "70cace2e3ae8fc0ddcedd55d1c54cc1da45c2e76da49436cf4c97f49ad387209"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'snowflake' | as_bool() }}"}, "created_at": 1640812557.225943}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/redshift/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "70cace2e3ae8fc0ddcedd55d1c54cc1da45c2e76da49436cf4c97f49ad387209"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.24126}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "spark", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "spark/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/spark/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "70cace2e3ae8fc0ddcedd55d1c54cc1da45c2e76da49436cf4c97f49ad387209"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'spark' | as_bool() }}"}, "created_at": 1640812557.286359}], "model.facebook_ads_creative_history.stg_facebook_ads__app_link": [{"raw_sql": "with base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n\n), unnested_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    json_extract_scalar(element, '$.index') as index,\n    json_extract_scalar(element, '$.app_name') as app_name,\n    json_extract_scalar(element, '$.app_store_id') as app_store_id,\n    json_extract_scalar(element, '$.class') as class_name,\n    json_extract_scalar(element, '$.package') as package_name,\n    json_extract_scalar(element, '$.template_page') as template_page\n  from required_fields\n  left join unnest(json_extract_array(template_app_link_spec_{{ app }})) as element\n\n{% endfor %}\n\n), unioned as (\n\n    select * from unnested_ios\n    union all\n    select * from unnested_iphone\n    union all\n    select * from unnested_ipad\n    union all\n    select * from unnested_android\n\n)\n\nselect *\nfrom unioned", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__app_link.sql", "original_file_path": "models/bigquery/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "6cf3a519dc6644f4ef6889c71ee1535266c6de6beff6d501203dc58e43829d1c"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'bigquery' | as_bool() }}"}, "created_at": 1640812557.211841}, {"raw_sql": "with base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    parse_json(template_app_link_spec_ios) as template_app_link_spec_ios,\n    parse_json(template_app_link_spec_ipad) as template_app_link_spec_ipad,\n    parse_json(template_app_link_spec_android) as template_app_link_spec_android,\n    parse_json(template_app_link_spec_iphone) as template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n\n), flattened_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    element.value:index::string as index,\n    element.value:app_name::string as app_name,\n    element.value:app_store_id::string as app_store_id,\n    element.value:class_name::string as class_name,\n    element.value:package_name::string as package_name,\n    element.value:template_page::string as template_page\n  from required_fields,\n  lateral flatten( input => template_app_link_spec_{{ app }} ) as element\n\n{% endfor %}\n\n), unioned as (\n\n    select * from flattened_ios\n    union all\n    select * from flattened_iphone\n    union all\n    select * from flattened_ipad\n    union all\n    select * from flattened_android\n\n)\n\nselect *\nfrom unioned", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__app_link.sql", "original_file_path": "models/snowflake/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "e4972f3562b9ca29972c6e23be50a1e7becee3501c617da084d35994b50dd390"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'snowflake' | as_bool() }}"}, "created_at": 1640812557.2279072}, {"raw_sql": "with base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n  select *\n  from {{ ref('utils__facebook_ads__numbers')}}\n\n), required_fields as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n\n), flattened_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    '{{ app }}'::varchar as app_type,\n    json_extract_array_element_text(required_fields.template_app_link_spec_{{ app }}, numbers.generated_number::int - 1, true) as element\n  from required_fields\n  inner join numbers\n      on json_array_length(required_fields.template_app_link_spec_{{ app }}) >= numbers.generated_number\n\n), extracted_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    app_type,\n    json_extract_path_text(element,'index') as index,\n    json_extract_path_text(element,'app_name') as app_name,\n    json_extract_path_text(element,'app_store_id') as app_store_id,\n    json_extract_path_text(element,'class') as class_name,\n    json_extract_path_text(element,'package') as package_name,\n    json_extract_path_text(element,'template_page') as template_page\n  from flattened_{{ app }}\n\n{% endfor %}\n\n), unioned as (\n\n    select * from extracted_ios\n    union all\n    select * from extracted_iphone\n    union all\n    select * from extracted_ipad\n    union all\n    select * from extracted_android\n\n)\n\nselect *\nfrom unioned", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__app_link.sql", "original_file_path": "models/redshift/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "6d5da34f9c72fcabea8b42bf4f78540a91ce39cd6dab5db47a4409626f2337c1"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.243219}, {"raw_sql": "with base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    {% for app in ['ios','ipad','android','iphone'] %}\n    from_json(\n      template_app_link_spec_{{ app }}, \n      'array<struct<index:INT, app_name:STRING, app_store_id:STRING, url:STRING, class_name:STRING, package_name:STRING, template_page:STRING>>') \n    as template_app_link_spec_{{ app }} \n    {% if not loop.last %},{% endif %}\n    {% endfor %}\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n\n), exploded_{{ app }} as (\n\n  select \n    *,\n    explode(template_app_link_spec_{{ app }}) as element\n  from required_fields\n\n), flattened_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    element.index as index,\n    element.app_name as app_name,\n    element.app_store_id as app_store_id,\n    element.class_name as class_name,\n    element.package_name as package_name,\n    element.template_page as template_page\n  from exploded_{{ app }}\n\n{% endfor %}\n\n), unioned as (\n\n    select * from flattened_ios\n    union all\n    select * from flattened_iphone\n    union all\n    select * from flattened_ipad\n    union all\n    select * from flattened_android\n\n)\n\nselect *\nfrom unioned", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "spark", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "spark/stg_facebook_ads__app_link.sql", "original_file_path": "models/spark/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "3e896a7eb702526e47ce96f1eee69bcb95f6b4aa92a289a0d273a9241b09376e"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'spark' | as_bool() }}"}, "created_at": 1640812557.28831}], "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": [{"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n), cleaned_json as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        json_extract_array(replace(trim(url_tags, '\"'),'\\\\','')) as cleaned_url_tags\n    from required_fields\n\n), unnested as (\n\n    select _fivetran_id, creative_id, url_tag_element\n    from cleaned_json\n    left join unnest(cleaned_url_tags) as url_tag_element\n    where cleaned_url_tags is not null\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        json_extract_scalar(url_tag_element, '$.key') as key,\n        json_extract_scalar(url_tag_element, '$.value') as value,\n        json_extract_scalar(url_tag_element, '$.type') as type\n    from unnested\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__url_tag.sql", "original_file_path": "models/bigquery/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "f96b0322cf1979085bd7da4ba3c0ab34867fc17a27c8c5ab576647609833ac35"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'bigquery' | as_bool() }}"}, "created_at": 1640812557.217228}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        parse_json(url_tags) as url_tags\n    from base\n    where url_tags is not null\n\n\n), flattened_url_tags as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags.value:key::string as key,\n        url_tags.value:value::string as value,\n        url_tags.value:type::string as type\n    from required_fields,\n    lateral flatten( input => url_tags ) as url_tags\n\n\n)\n\nselect *\nfrom flattened_url_tags", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__url_tag.sql", "original_file_path": "models/snowflake/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "2c0bfb48b644a45f285c3db1d1a30b655217571f7497533020ff32e30ab8c7f8"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'snowflake' | as_bool() }}"}, "created_at": 1640812557.233207}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n\n), flattened_url_tags as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        json_extract_array_element_text(required_fields.url_tags, numbers.generated_number::int - 1, true) as element\n    from required_fields\n    inner join numbers\n        on json_array_length(required_fields.url_tags) >= numbers.generated_number\n\n\n), extracted_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        json_extract_path_text(element,'key') as key,\n        json_extract_path_text(element,'value') as value,\n        json_extract_path_text(element,'type') as type\n    from flattened_url_tags\n\n)\n\nselect *\nfrom extracted_fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__url_tag.sql", "original_file_path": "models/redshift/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "4f98b0ad9d8b1d6143b0e0b2ffefbcc333de78ba0429018981bb51332e06c867"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.249166}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        explode(from_json(url_tags, 'array<struct<key:STRING, value:STRING, type:STRING>>')) as url_tags\n    from base\n    where url_tags is not null\n\n\n), flattened_url_tags as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        url_tags.key as key,\n        url_tags.value as value,\n        url_tags.type as type\n    from required_fields\n\n\n)\n\nselect *\nfrom flattened_url_tags", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "spark", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "spark/stg_facebook_ads__url_tag.sql", "original_file_path": "models/spark/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "60b3e2b295a01ec81bd39a3d60d3323a97bfbaaea1036a584f761fc09c26f712"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'spark' | as_bool() }}"}, "created_at": 1640812557.2954519}], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": [{"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        index,\n        json_extract_scalar(element, '$.key') as key,\n        json_extract_scalar(element, '$.value') as value\n    from base\n    inner join unnest(url_tags) as element\n\n)\n\nselect *\nfrom unnested", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/bigquery/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "963e25c07589e0d3e7cf5f8bc8b2c6e28a72b4983a3c3411627dda5a0bbb7259"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'bigquery' | as_bool() }}"}, "created_at": 1640812557.2199302}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), unnested as (\n\n    select\n\n        base._fivetran_id,\n        base.creative_id,\n        base.index,\n        url_tags.value:key::string as key,\n        url_tags.value:value::string as value\n\n    from base,\n    lateral flatten( input => url_tags ) as url_tags\n\n)\n\nselect *\nfrom unnested", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/snowflake/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "ef58f454b6d125e82f0b3335e795aa465ce3e2b7553c95a0b6878385e6ba524f"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'snowflake' | as_bool() }}"}, "created_at": 1640812557.235164}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), unnested as (\n\n    select\n\n        base._fivetran_id,\n        base.creative_id,\n        base.index,\n        json_extract_array_element_text(base.url_tags, numbers.generated_number::int - 1, true) as element\n    from base\n    inner join numbers\n        on json_array_length(base.url_tags) >= numbers.generated_number\n\n), extracted_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        index,\n        json_extract_path_text(element,'key') as key,\n        json_extract_path_text(element,'value') as value\n    from unnested\n\n)\n\nselect *\nfrom extracted_fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/redshift/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "daf445a79913db41e2716074db101daa829d20202cfe0cba4fbfc5512b33910d"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"], ["utils__facebook_ads__numbers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.251286}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        index,\n        explode(url_tags) as url_tag\n    from base\n\n), extract_values as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        index,\n        url_tag.value,\n        url_tag.key\n    from unnested\n\n)\n\nselect *\nfrom extract_values", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "spark", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "spark/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/spark/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "b96c25499c4c5210268d5267ba49f80c19580581c98f361d418621fffeb19ef4"}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'spark' | as_bool() }}"}, "created_at": 1640812557.297388}], "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": [{"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption,\n        object_story_link_data_description,\n        object_story_link_data_link,\n        object_story_link_data_message\n    from base\n    where object_story_link_data_child_attachments is not null\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption,\n        object_story_link_data_description as description,\n        object_story_link_data_message as message,\n        json_extract_scalar(element, '$.link') as link,\n        json_extract_array(element, '$.url_tags') as url_tags,\n        row_number() over (partition by _fivetran_id, creative_id) as index\n    from required_fields\n    left join unnest(json_extract_array(object_story_link_data_child_attachments)) as element\n\n)\n\nselect *\nfrom unnested", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "bigquery", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "bigquery/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/bigquery/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "83db136cfbbf8887e04ddf6a9339397be31508c49e2b2a23d2f584533f19cb2f"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'bigquery' | as_bool() }}"}, "created_at": 1640812557.2220008}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption,\n        object_story_link_data_description,\n        object_story_link_data_link,\n        object_story_link_data_message,\n        parse_json(object_story_link_data_child_attachments) as child_attachments\n    from base\n    where object_story_link_data_child_attachments is not null\n\n), flattened_child_attachments as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption,\n        object_story_link_data_description as description,\n        object_story_link_data_message as message,\n        child_attachments as element,\n        attachments.index as index,\n        attachments.value:link  as link,\n        attachments.value:url_tags as url_tags\n\n    from required_fields,\n    lateral flatten( input => child_attachments ) as attachments\n\n)\n\nselect *\nfrom flattened_child_attachments", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "snowflake", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "snowflake/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/snowflake/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "7a46b5125bae60810ebef900ae708a86999be8e5ae91902e643d528b01af2a3c"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'snowflake' | as_bool() }}"}, "created_at": 1640812557.2373161}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption,\n        object_story_link_data_description,\n        object_story_link_data_link,\n        object_story_link_data_message,\n        object_story_link_data_child_attachments as child_attachments\n    from base\n    where object_story_link_data_child_attachments is not null\n\n), flattened_child_attachments as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption,\n        object_story_link_data_description as description,\n        object_story_link_data_message as message,\n        numbers.generated_number - 1 as index,\n        json_extract_array_element_text(required_fields.child_attachments, numbers.generated_number::int - 1, true) as element\n    from required_fields\n    inner join numbers\n        on json_array_length(required_fields.child_attachments) >= numbers.generated_number\n\n), extracted_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        index,\n        json_extract_path_text(element,'link') as link,\n        json_extract_path_text(element,'url_tags') as url_tags\n    from flattened_child_attachments\n\n)\n\nselect *\nfrom extracted_fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/redshift/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "ef0bec91ccc0eb23d16dfd7c1f54e8ee71bf0794b4f9616feb25427383283812"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.2533839}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption,\n        object_story_link_data_description,\n        object_story_link_data_link,\n        object_story_link_data_message,\n        explode(\n          from_json(\n              object_story_link_data_child_attachments,\n              'array<struct<link:STRING, url_tags:array<struct<key:STRING, type:STRING, value:STRING>>>>'\n            ) \n          ) as child_attachments\n    from base\n    where object_story_link_data_child_attachments is not null\n\n), flattened_child_attachments as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption,\n        object_story_link_data_description as description,\n        object_story_link_data_message as message,\n        child_attachments as element,\n        child_attachments.link  as link,\n        child_attachments.url_tags as url_tags,\n        row_number() over (partition by _fivetran_id, creative_id order by child_attachments.link) as index\n    from required_fields\n\n)\n\nselect *\nfrom flattened_child_attachments", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "spark", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "spark/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/spark/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "156a8774dd7002eaf9ae98bbdb06d971f903aeaf3e3bef89ce45d7cdfc72ade5"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'spark' | as_bool() }}"}, "created_at": 1640812557.2993221}], "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url": [{"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n\n), unnested as (\n\n    select\n        _fivetran_id,\n        nullif(json_extract_scalar(elements,'$.display_url'),'') as display_url,\n        nullif(json_extract_scalar(elements,'$.website_url'),'') as website_url,\n        row_number() over (partition by _fivetran_id) as index\n    from required_fields\n    left join unnest(json_extract_array(asset_feed_spec_link_urls)) as elements\n\n)\n\nselect *\nfrom unnested", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/bigquery/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "1ca7150550593857b31cbf15e4ceba0345e7c0e3323fb2b0d89dde14ac946e6f"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'bigquery' | as_bool() }}"}, "created_at": 1640812557.223976}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        parse_json(asset_feed_spec_link_urls) as asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n\n), flattened as (\n\n    select\n        _fivetran_id,\n        nullif(asset_feed_spec_link_urls.value:display_url::string, '') as display_url,\n        nullif(asset_feed_spec_link_urls.value:website_url::string, '') as website_url,\n        asset_feed_spec_link_urls.index as index\n    from required_fields,\n    lateral flatten( input => asset_feed_spec_link_urls ) as asset_feed_spec_link_urls\n\n)\n\nselect *\nfrom flattened", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/snowflake/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "7480626d994ed6939151046627741f18cccb3bd1df0550f131312b15c421c523"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'snowflake' | as_bool() }}"}, "created_at": 1640812557.239286}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n\n), flattened as (\n\n    select\n        _fivetran_id,\n        json_extract_array_element_text(required_fields.asset_feed_spec_link_urls, numbers.generated_number::int - 1, true) as element,\n        numbers.generated_number - 1 as index\n    from required_fields\n    inner join numbers\n        on json_array_length(required_fields.asset_feed_spec_link_urls) >= numbers.generated_number\n\n), extracted_fields as (\n\n    select\n        _fivetran_id,\n        index,\n        json_extract_path_text(element,'display_url') as display_url,\n        json_extract_path_text(element,'website_url') as website_url\n    from flattened\n\n)\n\nselect *\nfrom extracted_fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/redshift/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "17373cc84646419712c2811039d1c861cd3035f63eb3dc771319ec80776fc980"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.268884}, {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select\n        _fivetran_id,\n        explode(from_json(asset_feed_spec_link_urls, 'array<struct<display_url:STRING, website_url:STRING>>')) as asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n\n), flattened as (\n\n    select\n        _fivetran_id,\n        nullif(asset_feed_spec_link_urls.display_url, '') as display_url,\n        nullif(asset_feed_spec_link_urls.website_url, '') as website_url,\n        row_number() over (partition by _fivetran_id order by _fivetran_id) as index\n    from required_fields\n\n)\n\nselect *\nfrom flattened", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "spark", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "spark/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/spark/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "bbd4eb3641175a351b518c4122989dccb70ba4d64145ebcce5dacbee0eb32409"}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "facebook_ads_creative_history://models/facebook_backwards_compatibility.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'spark' | as_bool() }}"}, "created_at": 1640812557.301443}], "model.facebook_ads_creative_history.utils__facebook_ads__numbers": [{"raw_sql": "{{ dbt_utils.generate_series(upper_bound=1000) }}", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.generate_series"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "facebook_ads_creative_history", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_facebook_ads_creative_history", "fqn": ["facebook_ads_creative_history", "redshift", "utils__facebook_ads__numbers"], "unique_id": "model.facebook_ads_creative_history.utils__facebook_ads__numbers", "package_name": "facebook_ads_creative_history", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/facebook_ads_creative_history", "path": "redshift/utils__facebook_ads__numbers.sql", "original_file_path": "models/redshift/utils__facebook_ads__numbers.sql", "name": "utils__facebook_ads__numbers", "alias": "utils__facebook_ads__numbers", "checksum": {"name": "sha256", "checksum": "e68ebd51fe05c8ebced38da51c975bbfe84cffbffc2f329f931ab77ffeee49f4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_ads_creative_history", "materialized": "table", "enabled": "{{ target.type == 'redshift' | as_bool() }}"}, "created_at": 1640812557.2556422}], "model.google_ads.google_ads__url_ad_adapter": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith stats as (\n\n    select *\n    from {{ var('ad_stats') }}\n\n), accounts as (\n\n    select *\n    from {{ var('account') }}\n    \n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = True\n    \n), ad_groups as (\n\n    select *\n    from {{ var('ad_group_history') }}\n    where is_most_recent_record = True\n    \n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = True\n    \n), final_url as (\n\n    select *\n    from {{ var('ad_final_url_history') }}\n    where is_most_recent_record = True\n    \n), fields as (\n\n    select\n        stats.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        final_url.base_url,\n        final_url.url_host,\n        final_url.url_path,\n        final_url.utm_source,\n        final_url.utm_medium,\n        final_url.utm_campaign,\n        final_url.utm_content,\n        final_url.utm_term,\n        sum(stats.spend) as spend,\n        sum(stats.clicks) as clicks,\n        sum(stats.impressions) as impressions\n\n        {% for metric in var('google_ads__ad_stats_passthrough_metrics') %}\n        , sum(stats.{{ metric }}) as {{ metric }}\n        {% endfor %}\n\n    from stats\n    left join ads\n        on stats.ad_id = ads.ad_id\n    left join final_url\n        on ads.ad_id = final_url.ad_id\n    left join ad_groups\n        on ads.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on ad_groups.campaign_id = campaigns.campaign_id\n    left join accounts\n        on campaigns.account_id = accounts.account_id\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_google_ads", "fqn": ["google_ads", "url_google_ads", "google_ads__url_ad_adapter"], "unique_id": "model.google_ads.google_ads__url_ad_adapter", "package_name": "google_ads", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads", "path": "url_google_ads/google_ads__url_ad_adapter.sql", "original_file_path": "models/url_google_ads/google_ads__url_ad_adapter.sql", "name": "google_ads__url_ad_adapter", "alias": "google_ads__url_ad_adapter", "checksum": {"name": "sha256", "checksum": "d8c31702768cf0ac24d99d93377bb1db5c490922af49843f1985d7015648b2ae"}, "tags": [], "refs": [["stg_google_ads__ad_stats"], ["stg_google_ads__account"], ["stg_google_ads__campaign_history"], ["stg_google_ads__ad_group_history"], ["stg_google_ads__ad_history"], ["stg_google_ads__ad_final_url_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.454637}], "model.google_ads_source.stg_google_ads__account": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_ads__account_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__account_tmp')),\n                staging_columns=get_account_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id, \n        _fivetran_synced, \n        account_label_name, \n        currency_code, \n        name as account_name\n    from fields\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_account_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "stg_google_ads__account"], "unique_id": "model.google_ads_source.stg_google_ads__account", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/stg_google_ads__account.sql", "original_file_path": "models/google_ads_connector/stg_google_ads__account.sql", "name": "stg_google_ads__account", "alias": "stg_google_ads__account", "checksum": {"name": "sha256", "checksum": "a71b7e14bc553eb562ad257c87872f4b1724999c30c65d4ac45ec15f01e4d6f1"}, "tags": [], "refs": [["stg_google_ads__account_tmp"], ["stg_google_ads__account_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/google_ads_connector/stg_google_ads.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.798593}], "model.google_ads_source.stg_google_ads__ad_group_history": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_group_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ad_group_id,\n        updated_at as updated_timestamp,\n        _fivetran_synced, \n        ad_group_type, \n        campaign_id, \n        campaign_name, \n        name as ad_group_name, \n        status as ad_group_status\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by updated_timestamp desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "stg_google_ads__ad_group_history"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/stg_google_ads__ad_group_history.sql", "original_file_path": "models/google_ads_connector/stg_google_ads__ad_group_history.sql", "name": "stg_google_ads__ad_group_history", "alias": "stg_google_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "5efcebbceba9be035f32a26f1a09cb3194c3b9c501cd20062a95ab7b77f44a2b"}, "tags": [], "refs": [["stg_google_ads__ad_group_history_tmp"], ["stg_google_ads__ad_group_history_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/google_ads_connector/stg_google_ads.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.813675}], "model.google_ads_source.stg_google_ads__ad_history": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_group_id, \n        id as ad_id, \n        updated_at as updated_timestamp, \n        _fivetran_synced, \n        ad_type,\n        status as ad_status\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by updated_timestamp desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "stg_google_ads__ad_history"], "unique_id": "model.google_ads_source.stg_google_ads__ad_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/stg_google_ads__ad_history.sql", "original_file_path": "models/google_ads_connector/stg_google_ads__ad_history.sql", "name": "stg_google_ads__ad_history", "alias": "stg_google_ads__ad_history", "checksum": {"name": "sha256", "checksum": "ef2c25e0324c7f63c91dc506e802cf3044971930ccac7d98b23dad598ae0783e"}, "tags": [], "refs": [["stg_google_ads__ad_history_tmp"], ["stg_google_ads__ad_history_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/google_ads_connector/stg_google_ads.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.8435829}], "model.google_ads_source.stg_google_ads__ad_stats": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_stats_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_stats_tmp')),\n                staging_columns=get_ad_stats_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id as account_id, \n        date as date_day, \n        ad_group as ad_group_id, \n        ad_id, \n        campaign_id, \n        clicks, \n        cost_micros / 1000000.0 as spend, \n        impressions\n        \n        {% for metric in var('google_ads__ad_stats_passthrough_metrics') %}\n        , {{ metric }}\n        {% endfor %}\n    from fields\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_stats_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "stg_google_ads__ad_stats"], "unique_id": "model.google_ads_source.stg_google_ads__ad_stats", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/stg_google_ads__ad_stats.sql", "original_file_path": "models/google_ads_connector/stg_google_ads__ad_stats.sql", "name": "stg_google_ads__ad_stats", "alias": "stg_google_ads__ad_stats", "checksum": {"name": "sha256", "checksum": "8a6c0e4a03004d0e315ff747eda962f58cbe6d2eb264c434e51ddf079093eb54"}, "tags": [], "refs": [["stg_google_ads__ad_stats_tmp"], ["stg_google_ads__ad_stats_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/google_ads_connector/stg_google_ads.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.860459}], "model.google_ads_source.stg_google_ads__ad_final_url_history": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_ads__ad_final_url_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__ad_final_url_history_tmp')),\n                staging_columns=get_ad_final_url_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_group_id, \n        ad_id,\n        updated_at as updated_timestamp, \n        _fivetran_synced, \n        url as final_url\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by ad_id order by updated_timestamp desc) = 1 as is_most_recent_record\n    from final\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n    from most_recent\n\n)\n\nselect * from url_fields", "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_ad_final_url_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "stg_google_ads__ad_final_url_history"], "unique_id": "model.google_ads_source.stg_google_ads__ad_final_url_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/stg_google_ads__ad_final_url_history.sql", "original_file_path": "models/google_ads_connector/stg_google_ads__ad_final_url_history.sql", "name": "stg_google_ads__ad_final_url_history", "alias": "stg_google_ads__ad_final_url_history", "checksum": {"name": "sha256", "checksum": "087dd6f4d7e473c45a0e728de4850e739c807744b35f5dae71a4b996d1adde34"}, "tags": [], "refs": [["stg_google_ads__ad_final_url_history_tmp"], ["stg_google_ads__ad_final_url_history_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/google_ads_connector/stg_google_ads.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.8825312}], "model.google_ads_source.stg_google_ads__campaign_history": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id, \n        updated_at as updated_timestamp, \n        _fivetran_synced, \n        name as campaign_name,\n        customer_id as account_id\n    from fields\n),\n\nmost_recent as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by updated_timestamp desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from most_recent", "resource_type": "model", "depends_on": {"macros": ["macro.google_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "stg_google_ads__campaign_history"], "unique_id": "model.google_ads_source.stg_google_ads__campaign_history", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/stg_google_ads__campaign_history.sql", "original_file_path": "models/google_ads_connector/stg_google_ads__campaign_history.sql", "name": "stg_google_ads__campaign_history", "alias": "stg_google_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "5d7d9f749113729b95686d5f4a10be5a03bcaceb49dcc1d8010ea4de9812bb49"}, "tags": [], "refs": [["stg_google_ads__campaign_history_tmp"], ["stg_google_ads__campaign_history_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "google_ads_source://models/google_ads_connector/stg_google_ads.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "table", "enabled": false}, "created_at": 1640812557.899055}], "model.google_ads_source.stg_google_ads__ad_group_history_tmp": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nselect * from {{ var('google_ads__ad_group_history') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "tmp", "stg_google_ads__ad_group_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_group_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/tmp/stg_google_ads__ad_group_history_tmp.sql", "original_file_path": "models/google_ads_connector/tmp/stg_google_ads__ad_group_history_tmp.sql", "name": "stg_google_ads__ad_group_history_tmp", "alias": "stg_google_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "f589c8924b0bfbeb75128808090adfc09fbced5b2da9e6db4d9d6f3608dca284"}, "tags": [], "refs": [["google_ads_ad_group_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": false}, "created_at": 1640812557.932926}], "model.google_ads_source.stg_google_ads__account_tmp": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nselect * from {{ var('google_ads__account') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "tmp", "stg_google_ads__account_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__account_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/tmp/stg_google_ads__account_tmp.sql", "original_file_path": "models/google_ads_connector/tmp/stg_google_ads__account_tmp.sql", "name": "stg_google_ads__account_tmp", "alias": "stg_google_ads__account_tmp", "checksum": {"name": "sha256", "checksum": "8b22b0771e666dc5c687933730130dbd264b925709b9ed27261196af46ba7a0a"}, "tags": [], "refs": [["google_ads_account_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": false}, "created_at": 1640812557.938858}], "model.google_ads_source.stg_google_ads__ad_stats_tmp": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nselect * from {{ var('google_ads__ad_stats') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "tmp", "stg_google_ads__ad_stats_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_stats_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/tmp/stg_google_ads__ad_stats_tmp.sql", "original_file_path": "models/google_ads_connector/tmp/stg_google_ads__ad_stats_tmp.sql", "name": "stg_google_ads__ad_stats_tmp", "alias": "stg_google_ads__ad_stats_tmp", "checksum": {"name": "sha256", "checksum": "5bbb33a86167f2b5eec66dcef0da5a3157a971a0af09044a64764de3e0267906"}, "tags": [], "refs": [["google_ads_ad_stats_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": false}, "created_at": 1640812557.944055}], "model.google_ads_source.stg_google_ads__campaign_history_tmp": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nselect * from {{ var('google_ads__campaign_history') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "tmp", "stg_google_ads__campaign_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__campaign_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/tmp/stg_google_ads__campaign_history_tmp.sql", "original_file_path": "models/google_ads_connector/tmp/stg_google_ads__campaign_history_tmp.sql", "name": "stg_google_ads__campaign_history_tmp", "alias": "stg_google_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "31b88fc1c807181e3fe97c57a0e67fe0455b547fb88acfc1da34fe26773f85ce"}, "tags": [], "refs": [["google_ads_campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": false}, "created_at": 1640812557.949279}], "model.google_ads_source.stg_google_ads__ad_final_url_history_tmp": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nselect * from {{ var('google_ads__ad_final_url_history') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "tmp", "stg_google_ads__ad_final_url_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_final_url_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/tmp/stg_google_ads__ad_final_url_history_tmp.sql", "original_file_path": "models/google_ads_connector/tmp/stg_google_ads__ad_final_url_history_tmp.sql", "name": "stg_google_ads__ad_final_url_history_tmp", "alias": "stg_google_ads__ad_final_url_history_tmp", "checksum": {"name": "sha256", "checksum": "a61eb5ff15fe2d47cb947766af6161a6f51f10ed87f52bafde3d70427ac69f2c"}, "tags": [], "refs": [["google_ads_ad_final_url_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": false}, "created_at": 1640812557.9544802}], "model.google_ads_source.stg_google_ads__ad_history_tmp": [{"raw_sql": "{{ config(enabled=var('api_source') == 'google_ads') }}\n\nselect * from {{ var('google_ads__ad_history') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_google_ads", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "ad_reporting_integration_tests_stg_google_ads", "fqn": ["google_ads_source", "google_ads_connector", "tmp", "stg_google_ads__ad_history_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__ad_history_tmp", "package_name": "google_ads_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/AdReporting/dbt_ad_reporting/integration_tests/dbt_packages/google_ads_source", "path": "google_ads_connector/tmp/stg_google_ads__ad_history_tmp.sql", "original_file_path": "models/google_ads_connector/tmp/stg_google_ads__ad_history_tmp.sql", "name": "stg_google_ads__ad_history_tmp", "alias": "stg_google_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "9133f01179a6c9c6ccebf38c91c01b926a62ff417bdc642e590feba064bb2fcf"}, "tags": [], "refs": [["google_ads_ad_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_google_ads", "materialized": "view", "enabled": false}, "created_at": 1640812557.959699}]}, "parent_map": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.linkedin_account_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": [], "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data": [], "seed.ad_reporting_integration_tests.twitter_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_creative_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": [], "seed.ad_reporting_integration_tests.google_ads_account_data": [], "seed.ad_reporting_integration_tests.pin_promotion_history_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_final_url_history_data": [], "seed.ad_reporting_integration_tests.advertiser_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": [], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": [], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_stats_data": [], "seed.ad_reporting_integration_tests.ad_group_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.twitter_tweet_url_data": [], "seed.ad_reporting_integration_tests.campaign_history_data": [], "seed.ad_reporting_integration_tests.google_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data": [], "seed.ad_reporting_integration_tests.snapchat_campaign_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": [], "seed.ad_reporting_integration_tests.google_ads_click_performance_data": [], "seed.ad_reporting_integration_tests.twitter_account_history_data": [], "seed.ad_reporting_integration_tests.snapchat_creative_history_data": [], "seed.ad_reporting_integration_tests.google_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data": [], "seed.ad_reporting_integration_tests.pin_promotion_report_data": [], "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": [], "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": [], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__account_history": ["seed.ad_reporting_integration_tests.microsoft_ads_account_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": ["seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"], "model.facebook_ads_creative_history.stg_facebook_ads__app_link": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"], "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.stg_facebook_ads__asset_feed_spec_link_url": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.twitter_ads.twitter__line_item_report": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads.twitter__ad_adapter": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__tweet_url"], "model.twitter_ads.twitter__campaign_report": ["model.twitter_ads.twitter__ad_adapter"], "model.pinterest.pinterest_ads__ad_adapter": ["model.pinterest.int_pinterest_ads__most_recent_ad_group", "model.pinterest.int_pinterest_ads__most_recent_advertiser", "model.pinterest.int_pinterest_ads__most_recent_campaign", "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest.pinterest_ads__campaign_ad_report": ["model.pinterest.pinterest_ads__ad_adapter"], "model.pinterest.pinterest_ads__ad_group_ad_report": ["model.pinterest.pinterest_ads__ad_adapter"], "model.pinterest.int_pinterest_ads__most_recent_campaign": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "model.pinterest.int_pinterest_ads__most_recent_advertiser": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"], "model.pinterest.int_pinterest_ads__most_recent_pin_promotion": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "model.pinterest.int_pinterest_ads__most_recent_ad_group": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "model.google_ads.google_ads__click_performance": ["model.google_ads_source.stg_google_ads__click_performance"], "model.google_ads.google_ads__url_ad_adapter": ["model.google_ads_source.stg_google_ads__final_url_performance"], "model.google_ads.google_ads__criteria_ad_adapter": ["model.google_ads_source.stg_google_ads__criteria_performance"], "model.linkedin_source.stg_linkedin__campaign_group_history": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin__campaign_group_history_tmp"], "model.linkedin_source.stg_linkedin__account_history": ["model.linkedin_source.stg_linkedin__account_history_tmp", "model.linkedin_source.stg_linkedin__account_history_tmp"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"], "model.linkedin_source.stg_linkedin__campaign_history": ["model.linkedin_source.stg_linkedin__campaign_history_tmp", "model.linkedin_source.stg_linkedin__campaign_history_tmp"], "model.linkedin_source.stg_linkedin__creative_history": ["model.linkedin_source.stg_linkedin__creative_history_tmp", "model.linkedin_source.stg_linkedin__creative_history_tmp"], "model.linkedin_source.stg_linkedin__campaign_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_campaign_history_data"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp": ["seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data"], "model.linkedin_source.stg_linkedin__account_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_account_history_data"], "model.linkedin_source.stg_linkedin__campaign_group_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data"], "model.linkedin_source.stg_linkedin__creative_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_creative_history_data"], "model.facebook_ads.facebook_ads__ad_adapter": ["model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads.facebook_ads__campaign_report": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads.facebook_ads__account_report": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads.facebook_ads__ad_set_report": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads.facebook_ads__creative_history_prep": ["model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.snapchat_ads.snapchat__ad_squad_report": ["model.snapchat_ads.snapchat__ad_adapter"], "model.snapchat_ads.snapchat__campaign_report": ["model.snapchat_ads.snapchat__ad_adapter"], "model.snapchat_ads.snapchat__account_report": ["model.snapchat_ads.snapchat__ad_adapter"], "model.snapchat_ads.snapchat__ad_adapter": ["model.snapchat_ads.snapchat__creative_history_prep", "model.snapchat_ads_source.stg_snapchat__ad_account_history", "model.snapchat_ads_source.stg_snapchat__ad_history", "model.snapchat_ads_source.stg_snapchat__ad_hourly_report", "model.snapchat_ads_source.stg_snapchat__ad_squad_history", "model.snapchat_ads_source.stg_snapchat__campaign_history"], "model.snapchat_ads.snapchat__creative_history_prep": ["model.snapchat_ads_source.stg_snapchat__creative_history", "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history"], "model.google_ads_source.stg_google_ads__final_url_performance": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp", "model.google_ads_source.stg_google_ads__final_url_performance_tmp"], "model.google_ads_source.stg_google_ads__criteria_performance": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp", "model.google_ads_source.stg_google_ads__criteria_performance_tmp"], "model.google_ads_source.stg_google_ads__click_performance": ["model.google_ads_source.stg_google_ads__click_performance_tmp", "model.google_ads_source.stg_google_ads__click_performance_tmp"], "model.google_ads_source.stg_google_ads__criteria_performance_tmp": ["seed.ad_reporting_integration_tests.google_ads_criteria_performance_data"], "model.google_ads_source.stg_google_ads__final_url_performance_tmp": ["seed.ad_reporting_integration_tests.google_ads_final_url_performance_data"], "model.google_ads_source.stg_google_ads__click_performance_tmp": ["seed.ad_reporting_integration_tests.google_ads_click_performance_data"], "model.ad_reporting.ad_reporting": ["model.ad_reporting.stg_facebook_ads", "model.ad_reporting.stg_google_ads", "model.ad_reporting.stg_linkedin_ads", "model.ad_reporting.stg_microsoft_ads", "model.ad_reporting.stg_pinterest_ads", "model.ad_reporting.stg_snapchat_ads", "model.ad_reporting.stg_twitter_ads"], "model.ad_reporting.stg_microsoft_ads": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.ad_reporting.stg_facebook_ads": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.ad_reporting.stg_linkedin_ads": ["model.linkedin.linkedin__ad_adapter"], "model.ad_reporting.stg_snapchat_ads": ["model.snapchat_ads.snapchat__ad_adapter"], "model.ad_reporting.stg_pinterest_ads": ["model.pinterest.pinterest_ads__ad_adapter"], "model.ad_reporting.stg_google_ads": ["model.google_ads.google_ads__url_ad_adapter"], "model.ad_reporting.stg_twitter_ads": ["model.twitter_ads.twitter__ad_adapter"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"], "model.pinterest_source.stg_pinterest_ads__campaign_history": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"], "model.pinterest_source.stg_pinterest_ads__advertiser_history": ["model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp", "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"], "model.pinterest_source.stg_pinterest_ads__ad_group_history": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"], "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp": ["seed.ad_reporting_integration_tests.advertiser_history_data"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": ["seed.ad_reporting_integration_tests.pin_promotion_report_data"], "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.campaign_history_data"], "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": ["seed.ad_reporting_integration_tests.ad_group_history_data"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": ["seed.ad_reporting_integration_tests.pin_promotion_history_data"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_ad_history_data"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_creative_history_data"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_account_history_data"], "model.snapchat_ads_source.stg_snapchat__ad_squad_history": ["model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp", "model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp"], "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history": ["model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp", "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp"], "model.snapchat_ads_source.stg_snapchat__ad_history": ["model.snapchat_ads_source.stg_snapchat__ad_history_tmp", "model.snapchat_ads_source.stg_snapchat__ad_history_tmp"], "model.snapchat_ads_source.stg_snapchat__creative_history": ["model.snapchat_ads_source.stg_snapchat__creative_history_tmp", "model.snapchat_ads_source.stg_snapchat__creative_history_tmp"], "model.snapchat_ads_source.stg_snapchat__campaign_history": ["model.snapchat_ads_source.stg_snapchat__campaign_history_tmp", "model.snapchat_ads_source.stg_snapchat__campaign_history_tmp"], "model.snapchat_ads_source.stg_snapchat__ad_hourly_report": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp", "model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp"], "model.snapchat_ads_source.stg_snapchat__ad_account_history": ["model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp", "model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp"], "model.snapchat_ads_source.stg_snapchat__ad_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_history_data"], "model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_account_history_data"], "model.snapchat_ads_source.stg_snapchat__creative_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_creative_history_data"], "model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data"], "model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data"], "model.snapchat_ads_source.stg_snapchat__campaign_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_campaign_history_data"], "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp": ["seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data"], "model.microsoft_ads.microsoft_ads__ad_adapter": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.microsoft_ads.microsoft_ads__ad_group_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.microsoft_ads.microsoft_ads__account_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.microsoft_ads.microsoft_ads__campaign_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__line_item_history": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__campaign_history": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"], "model.twitter_ads_source.stg_twitter_ads__account_history": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet_url": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": ["seed.ad_reporting_integration_tests.twitter_tweet_url_data"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data"], "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": ["seed.ad_reporting_integration_tests.twitter_line_item_history_data"], "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.twitter_campaign_history_data"], "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.twitter_account_history_data"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data"], "model.linkedin.linkedin__campaign_ad_report": ["model.linkedin.linkedin__ad_adapter"], "model.linkedin.linkedin__account_ad_report": ["model.linkedin.linkedin__ad_adapter"], "model.linkedin.linkedin__campaign_group_ad_report": ["model.linkedin.linkedin__ad_adapter"], "model.linkedin.linkedin__ad_adapter": ["model.linkedin_source.stg_linkedin__account_history", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__creative_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id.e0ba88702d": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id.2406ee6fb9": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.37082929f6": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.94e0e25b4a": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id.36f5019570": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id.feaa4c680f": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id.46ff47af0b": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id.6adb56d043": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page.553eb073fe": ["model.facebook_ads_creative_history.stg_facebook_ads__app_link"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.4e6ba1f140": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.ec29319ce2": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index.1515ab8b84": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.caabd8a5fe": ["model.facebook_ads_creative_history.stg_facebook_ads__url_tag"], "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id.eb2620adaf": ["model.twitter_ads.twitter__ad_adapter"], "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id.c215eb48b3": ["model.twitter_ads.twitter__ad_adapter"], "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id.05bfa1a3e6": ["model.twitter_ads.twitter__campaign_report"], "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id.9d97615317": ["model.twitter_ads.twitter__campaign_report"], "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id.01f1a2143b": ["model.twitter_ads.twitter__line_item_report"], "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id.e089556726": ["model.twitter_ads.twitter__line_item_report"], "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id.1a66dc4b53": ["model.pinterest.pinterest_ads__ad_adapter"], "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id.e4928edab2": ["model.pinterest.pinterest_ads__ad_adapter"], "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.7853b6796f": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"], "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.242a25a3dc": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"], "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id.2252dcafef": ["model.pinterest.int_pinterest_ads__most_recent_campaign"], "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id.e2ab8f24a2": ["model.pinterest.int_pinterest_ads__most_recent_campaign"], "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.26c26d6fbb": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"], "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.02dc772879": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"], "test.pinterest.unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.513b5100cd": ["model.pinterest.int_pinterest_ads__most_recent_advertiser"], "test.pinterest.not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id.1cedcda1a7": ["model.pinterest.int_pinterest_ads__most_recent_advertiser"], "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.5c8fc66dcd": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.daa1e7c317": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id.f9239a77e3": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id.4a27612477": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id.c6b54612f3": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id.5ae1d32ed7": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from.e1e76ab015": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id.7a881baa11": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id.2932ee4f95": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id.ed0565e9e4": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from.19da0d0e78": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id.6182341cfe": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.95c06ec95b": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id.a3a0e73b15": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from.9538123b9d": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id.09d77e3e67": ["model.linkedin_source.stg_linkedin__account_history"], "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id.bb859fd849": ["model.linkedin_source.stg_linkedin__account_history"], "test.linkedin_source.not_null_stg_linkedin__account_history_account_id.29a9b3c9e7": ["model.linkedin_source.stg_linkedin__account_history"], "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from.5cf2f628bb": ["model.linkedin_source.stg_linkedin__account_history"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day.7311a212ea": ["model.snapchat_ads.snapchat__account_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day.454da1d9f2": ["model.snapchat_ads.snapchat__campaign_report"], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day.61e910dbab": ["model.snapchat_ads.snapchat__ad_squad_report"], "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid.7552ea9f1f": ["model.google_ads_source.stg_google_ads__click_performance"], "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id.529a5342d9": ["model.google_ads_source.stg_google_ads__final_url_performance"], "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id.70e3b81ecb": ["model.google_ads_source.stg_google_ads__final_url_performance"], "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id.b6aee57b30": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id.dc9d6cedb6": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id.cac0ed2e58": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id.8b93232e63": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id.56f311347a": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id.36e2f15e25": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id.ebb30d083b": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id.71319647a4": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "test.pinterest_source.unique_stg_pinterest_ads__advertiser_history_version_id.e3be854e36": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_version_id.b2ed8ff0c9": ["model.pinterest_source.stg_pinterest_ads__advertiser_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": ["model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": ["model.facebook_ads_source.stg_facebook_ads__ad_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced.770cb61f45": ["model.snapchat_ads_source.stg_snapchat__ad_account_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced.9a13513e4b": ["model.snapchat_ads_source.stg_snapchat__ad_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour.bb130d46b0": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced.31dfa7ee5e": ["model.snapchat_ads_source.stg_snapchat__ad_squad_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced.a859a3be5e": ["model.snapchat_ads_source.stg_snapchat__campaign_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced.f6bdc9dc8c": ["model.snapchat_ads_source.stg_snapchat__creative_history"], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key.03dc61a57c": ["model.snapchat_ads_source.stg_snapchat__creative_url_tag_history"], "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id.9d930c85d7": ["model.linkedin.linkedin__ad_adapter"], "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id.a419f1ff64": ["model.linkedin.linkedin__ad_adapter"], "test.linkedin.not_null_linkedin__ad_adapter_creative_id.5ff26de9ba": ["model.linkedin.linkedin__ad_adapter"], "source.microsoft_ads_source.microsoft_ads.ad_history": [], "source.microsoft_ads_source.microsoft_ads.campaign_history": [], "source.microsoft_ads_source.microsoft_ads.ad_group_history": [], "source.microsoft_ads_source.microsoft_ads.account_history": [], "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": [], "source.linkedin_source.linkedin.ad_analytics_by_creative": [], "source.linkedin_source.linkedin.creative_history": [], "source.linkedin_source.linkedin.campaign_history": [], "source.linkedin_source.linkedin.campaign_group_history": [], "source.linkedin_source.linkedin.account_history": [], "source.google_ads_source.adwords.ad_final_url_history": [], "source.google_ads_source.adwords.ad_stats": [], "source.google_ads_source.adwords.ad_history": [], "source.google_ads_source.adwords.ad_group_history": [], "source.google_ads_source.adwords.campaign_history": [], "source.google_ads_source.adwords.account": [], "source.google_ads_source.adwords.final_url_performance": [], "source.google_ads_source.adwords.click_performance": [], "source.google_ads_source.adwords.criteria_performance": [], "source.pinterest_source.pinterest_ads.pin_promotion_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_history": [], "source.pinterest_source.pinterest_ads.campaign_history": [], "source.pinterest_source.pinterest_ads.ad_group_history": [], "source.pinterest_source.pinterest_ads.advertiser_history": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.ad_account_history": [], "source.snapchat_ads_source.snapchat_ads.ad_history": [], "source.snapchat_ads_source.snapchat_ads.ad_hourly_report": [], "source.snapchat_ads_source.snapchat_ads.ad_squad_history": [], "source.snapchat_ads_source.snapchat_ads.campaign_history": [], "source.snapchat_ads_source.snapchat_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history": [], "source.twitter_ads_source.twitter_ads.account_history": [], "source.twitter_ads_source.twitter_ads.campaign_history": [], "source.twitter_ads_source.twitter_ads.line_item_history": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_history": [], "source.twitter_ads_source.twitter_ads.tweet_url": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_report": []}, "child_map": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_account_history_data": ["model.linkedin_source.stg_linkedin__account_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": ["model.linkedin_source.stg_linkedin__campaign_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp"], "seed.ad_reporting_integration_tests.snapchat_ad_squad_history_data": ["model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp"], "seed.ad_reporting_integration_tests.twitter_campaign_history_data": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_creative_history_data": ["model.linkedin_source.stg_linkedin__creative_history_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "seed.ad_reporting_integration_tests.google_ads_account_data": [], "seed.ad_reporting_integration_tests.pin_promotion_history_data": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_ad_final_url_history_data": [], "seed.ad_reporting_integration_tests.advertiser_history_data": ["model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"], "seed.ad_reporting_integration_tests.google_ads_ad_stats_data": [], "seed.ad_reporting_integration_tests.ad_group_history_data": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.twitter_tweet_url_data": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"], "seed.ad_reporting_integration_tests.campaign_history_data": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"], "seed.ad_reporting_integration_tests.snapchat_ad_history_data": ["model.snapchat_ads_source.stg_snapchat__ad_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_ad_group_history_data": [], "seed.ad_reporting_integration_tests.snapchat_campaign_history_data": ["model.snapchat_ads_source.stg_snapchat__campaign_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "seed.ad_reporting_integration_tests.google_ads_click_performance_data": ["model.google_ads_source.stg_google_ads__click_performance_tmp"], "seed.ad_reporting_integration_tests.twitter_account_history_data": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.snapchat_creative_history_data": ["model.snapchat_ads_source.stg_snapchat__creative_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "seed.ad_reporting_integration_tests.snapchat_ad_hourly_report_data": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "seed.ad_reporting_integration_tests.snapchat_ad_account_history_data": ["model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp"], "seed.ad_reporting_integration_tests.pin_promotion_report_data": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"], "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp"], "seed.ad_reporting_integration_tests.snapchat_creative_url_tag_history_data": ["model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.94e0e25b4a", "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.37082929f6"], "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id.feaa4c680f", "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id.36f5019570"], "model.microsoft_ads_source.stg_microsoft_ads__account_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id.2406ee6fb9", "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id.e0ba88702d"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id.6adb56d043", "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id.46ff47af0b"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.4e6ba1f140"], "model.facebook_ads_creative_history.stg_facebook_ads__app_link": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page.553eb073fe"], "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": ["model.facebook_ads.facebook_ads__creative_history_prep", "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.caabd8a5fe"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.ec29319ce2"], "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags"], "model.facebook_ads_creative_history.stg_facebook_ads__asset_feed_spec_link_url": [], "model.twitter_ads.twitter__line_item_report": ["test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id.e089556726", "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id.01f1a2143b"], "model.twitter_ads.twitter__ad_adapter": ["model.ad_reporting.stg_twitter_ads", "model.twitter_ads.twitter__campaign_report", "model.twitter_ads.twitter__line_item_report", "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id.c215eb48b3", "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id.eb2620adaf"], "model.twitter_ads.twitter__campaign_report": ["test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id.9d97615317", "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id.05bfa1a3e6"], "model.pinterest.pinterest_ads__ad_adapter": ["model.ad_reporting.stg_pinterest_ads", "model.pinterest.pinterest_ads__ad_group_ad_report", "model.pinterest.pinterest_ads__campaign_ad_report", "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id.e4928edab2", "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id.1a66dc4b53"], "model.pinterest.pinterest_ads__campaign_ad_report": [], "model.pinterest.pinterest_ads__ad_group_ad_report": [], "model.pinterest.int_pinterest_ads__most_recent_campaign": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id.e2ab8f24a2", "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id.2252dcafef"], "model.pinterest.int_pinterest_ads__most_recent_advertiser": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id.1cedcda1a7", "test.pinterest.unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.513b5100cd"], "model.pinterest.int_pinterest_ads__most_recent_pin_promotion": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.02dc772879", "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.26c26d6fbb"], "model.pinterest.int_pinterest_ads__most_recent_ad_group": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.242a25a3dc", "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.7853b6796f"], "model.google_ads.google_ads__click_performance": [], "model.google_ads.google_ads__url_ad_adapter": ["model.ad_reporting.stg_google_ads"], "model.google_ads.google_ads__criteria_ad_adapter": [], "model.linkedin_source.stg_linkedin__campaign_group_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id.a3a0e73b15", "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.95c06ec95b", "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from.9538123b9d", "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id.6182341cfe"], "model.linkedin_source.stg_linkedin__account_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__account_history_account_id.29a9b3c9e7", "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id.bb859fd849", "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from.5cf2f628bb", "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id.09d77e3e67"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id.f9239a77e3", "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.daa1e7c317", "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.5c8fc66dcd"], "model.linkedin_source.stg_linkedin__campaign_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id.ed0565e9e4", "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id.2932ee4f95", "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from.19da0d0e78", "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id.7a881baa11"], "model.linkedin_source.stg_linkedin__creative_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id.5ae1d32ed7", "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id.c6b54612f3", "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from.e1e76ab015", "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id.4a27612477"], "model.linkedin_source.stg_linkedin__campaign_history_tmp": ["model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__campaign_history"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "model.linkedin_source.stg_linkedin__account_history_tmp": ["model.linkedin_source.stg_linkedin__account_history", "model.linkedin_source.stg_linkedin__account_history"], "model.linkedin_source.stg_linkedin__campaign_group_history_tmp": ["model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__campaign_group_history"], "model.linkedin_source.stg_linkedin__creative_history_tmp": ["model.linkedin_source.stg_linkedin__creative_history", "model.linkedin_source.stg_linkedin__creative_history"], "model.facebook_ads.facebook_ads__ad_adapter": ["model.ad_reporting.stg_facebook_ads", "model.facebook_ads.facebook_ads__account_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__campaign_report"], "model.facebook_ads.facebook_ads__campaign_report": [], "model.facebook_ads.facebook_ads__account_report": [], "model.facebook_ads.facebook_ads__ad_set_report": [], "model.facebook_ads.facebook_ads__creative_history_prep": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.snapchat_ads.snapchat__ad_squad_report": ["test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day.61e910dbab"], "model.snapchat_ads.snapchat__campaign_report": ["test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day.454da1d9f2"], "model.snapchat_ads.snapchat__account_report": ["test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day.7311a212ea"], "model.snapchat_ads.snapchat__ad_adapter": ["model.ad_reporting.stg_snapchat_ads", "model.snapchat_ads.snapchat__account_report", "model.snapchat_ads.snapchat__ad_squad_report", "model.snapchat_ads.snapchat__campaign_report"], "model.snapchat_ads.snapchat__creative_history_prep": ["model.snapchat_ads.snapchat__ad_adapter"], "model.google_ads_source.stg_google_ads__final_url_performance": ["model.google_ads.google_ads__url_ad_adapter", "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id.70e3b81ecb", "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id.529a5342d9"], "model.google_ads_source.stg_google_ads__criteria_performance": ["model.google_ads.google_ads__criteria_ad_adapter"], "model.google_ads_source.stg_google_ads__click_performance": ["model.google_ads.google_ads__click_performance", "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid.7552ea9f1f"], "model.google_ads_source.stg_google_ads__criteria_performance_tmp": ["model.google_ads_source.stg_google_ads__criteria_performance", "model.google_ads_source.stg_google_ads__criteria_performance"], "model.google_ads_source.stg_google_ads__final_url_performance_tmp": ["model.google_ads_source.stg_google_ads__final_url_performance", "model.google_ads_source.stg_google_ads__final_url_performance"], "model.google_ads_source.stg_google_ads__click_performance_tmp": ["model.google_ads_source.stg_google_ads__click_performance", "model.google_ads_source.stg_google_ads__click_performance"], "model.ad_reporting.ad_reporting": [], "model.ad_reporting.stg_microsoft_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_facebook_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_linkedin_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_snapchat_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_pinterest_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_google_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_twitter_ads": ["model.ad_reporting.ad_reporting"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id.36e2f15e25", "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id.56f311347a"], "model.pinterest_source.stg_pinterest_ads__campaign_history": ["model.pinterest.int_pinterest_ads__most_recent_campaign", "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id.8b93232e63", "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id.cac0ed2e58"], "model.pinterest_source.stg_pinterest_ads__advertiser_history": ["model.pinterest.int_pinterest_ads__most_recent_advertiser", "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_version_id.b2ed8ff0c9", "test.pinterest_source.unique_stg_pinterest_ads__advertiser_history_version_id.e3be854e36"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id.71319647a4", "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id.ebb30d083b"], "model.pinterest_source.stg_pinterest_ads__ad_group_history": ["model.pinterest.int_pinterest_ads__most_recent_ad_group", "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id.dc9d6cedb6", "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id.b6aee57b30"], "model.pinterest_source.stg_pinterest_ads__advertiser_history_tmp": ["model.pinterest_source.stg_pinterest_ads__advertiser_history", "model.pinterest_source.stg_pinterest_ads__advertiser_history"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": ["model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__campaign_history"], "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "model.facebook_ads_creative_history.stg_facebook_ads__asset_feed_spec_link_url", "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__basic_ad"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__account_history"], "model.snapchat_ads_source.stg_snapchat__ad_squad_history": ["model.snapchat_ads.snapchat__ad_adapter", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced.31dfa7ee5e"], "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history": ["model.snapchat_ads.snapchat__creative_history_prep", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key.03dc61a57c"], "model.snapchat_ads_source.stg_snapchat__ad_history": ["model.snapchat_ads.snapchat__ad_adapter", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced.9a13513e4b"], "model.snapchat_ads_source.stg_snapchat__creative_history": ["model.snapchat_ads.snapchat__creative_history_prep", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced.f6bdc9dc8c"], "model.snapchat_ads_source.stg_snapchat__campaign_history": ["model.snapchat_ads.snapchat__ad_adapter", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced.a859a3be5e"], "model.snapchat_ads_source.stg_snapchat__ad_hourly_report": ["model.snapchat_ads.snapchat__ad_adapter", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour.bb130d46b0"], "model.snapchat_ads_source.stg_snapchat__ad_account_history": ["model.snapchat_ads.snapchat__ad_adapter", "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced.770cb61f45"], "model.snapchat_ads_source.stg_snapchat__ad_history_tmp": ["model.snapchat_ads_source.stg_snapchat__ad_history", "model.snapchat_ads_source.stg_snapchat__ad_history"], "model.snapchat_ads_source.stg_snapchat__ad_account_history_tmp": ["model.snapchat_ads_source.stg_snapchat__ad_account_history", "model.snapchat_ads_source.stg_snapchat__ad_account_history"], "model.snapchat_ads_source.stg_snapchat__creative_history_tmp": ["model.snapchat_ads_source.stg_snapchat__creative_history", "model.snapchat_ads_source.stg_snapchat__creative_history"], "model.snapchat_ads_source.stg_snapchat__ad_hourly_report_tmp": ["model.snapchat_ads_source.stg_snapchat__ad_hourly_report", "model.snapchat_ads_source.stg_snapchat__ad_hourly_report"], "model.snapchat_ads_source.stg_snapchat__ad_squad_history_tmp": ["model.snapchat_ads_source.stg_snapchat__ad_squad_history", "model.snapchat_ads_source.stg_snapchat__ad_squad_history"], "model.snapchat_ads_source.stg_snapchat__campaign_history_tmp": ["model.snapchat_ads_source.stg_snapchat__campaign_history", "model.snapchat_ads_source.stg_snapchat__campaign_history"], "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history_tmp": ["model.snapchat_ads_source.stg_snapchat__creative_url_tag_history", "model.snapchat_ads_source.stg_snapchat__creative_url_tag_history"], "model.microsoft_ads.microsoft_ads__ad_adapter": ["model.ad_reporting.stg_microsoft_ads", "model.microsoft_ads.microsoft_ads__account_report", "model.microsoft_ads.microsoft_ads__ad_group_report", "model.microsoft_ads.microsoft_ads__campaign_report"], "model.microsoft_ads.microsoft_ads__ad_group_report": [], "model.microsoft_ads.microsoft_ads__account_report": [], "model.microsoft_ads.microsoft_ads__campaign_report": [], "model.twitter_ads_source.stg_twitter_ads__line_item_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__campaign_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__account_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__tweet_url": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": ["model.twitter_ads_source.stg_twitter_ads__tweet_url", "model.twitter_ads_source.stg_twitter_ads__tweet_url"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history"], "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history"], "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__account_history"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"], "model.linkedin.linkedin__campaign_ad_report": [], "model.linkedin.linkedin__account_ad_report": [], "model.linkedin.linkedin__campaign_group_ad_report": [], "model.linkedin.linkedin__ad_adapter": ["model.ad_reporting.stg_linkedin_ads", "model.linkedin.linkedin__account_ad_report", "model.linkedin.linkedin__campaign_ad_report", "model.linkedin.linkedin__campaign_group_ad_report", "test.linkedin.not_null_linkedin__ad_adapter_creative_id.5ff26de9ba", "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id.a419f1ff64", "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id.9d930c85d7"], "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id.e0ba88702d": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id.2406ee6fb9": [], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.37082929f6": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.94e0e25b4a": [], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id.36f5019570": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id.feaa4c680f": [], "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id.46ff47af0b": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id.6adb56d043": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page.553eb073fe": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.4e6ba1f140": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.ec29319ce2": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index.1515ab8b84": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.caabd8a5fe": [], "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id.eb2620adaf": [], "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id.c215eb48b3": [], "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id.05bfa1a3e6": [], "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id.9d97615317": [], "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id.01f1a2143b": [], "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id.e089556726": [], "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id.1a66dc4b53": [], "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id.e4928edab2": [], "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.7853b6796f": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.242a25a3dc": [], "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id.2252dcafef": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id.e2ab8f24a2": [], "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.26c26d6fbb": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.02dc772879": [], "test.pinterest.unique_int_pinterest_ads__most_recent_advertiser_advertiser_id.513b5100cd": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_advertiser_advertiser_id.1cedcda1a7": [], "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.5c8fc66dcd": [], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.daa1e7c317": [], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id.f9239a77e3": [], "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id.4a27612477": [], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id.c6b54612f3": [], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id.5ae1d32ed7": [], "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from.e1e76ab015": [], "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id.7a881baa11": [], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id.2932ee4f95": [], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id.ed0565e9e4": [], "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from.19da0d0e78": [], "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id.6182341cfe": [], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.95c06ec95b": [], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id.a3a0e73b15": [], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from.9538123b9d": [], "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id.09d77e3e67": [], "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id.bb859fd849": [], "test.linkedin_source.not_null_stg_linkedin__account_history_account_id.29a9b3c9e7": [], "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from.5cf2f628bb": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__account_report_ad_account_id__date_day.7311a212ea": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__campaign_report_campaign_id__date_day.454da1d9f2": [], "test.snapchat_ads.dbt_utils_unique_combination_of_columns_snapchat__ad_squad_report_ad_squad_id__date_day.61e910dbab": [], "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid.7552ea9f1f": [], "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id.529a5342d9": [], "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id.70e3b81ecb": [], "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id.b6aee57b30": [], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id.dc9d6cedb6": [], "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id.cac0ed2e58": [], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id.8b93232e63": [], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id.56f311347a": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id.36e2f15e25": [], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id.ebb30d083b": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id.71319647a4": [], "test.pinterest_source.unique_stg_pinterest_ads__advertiser_history_version_id.e3be854e36": [], "test.pinterest_source.not_null_stg_pinterest_ads__advertiser_history_version_id.b2ed8ff0c9": [], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id.f1cf38c40f": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id.11429d3064": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id.e19a1df1bb": [], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id.1ca7a83852": [], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id.eb4d804261": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_account_history_ad_account_id___fivetran_synced.770cb61f45": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_history_ad_id___fivetran_synced.9a13513e4b": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_hourly_report_ad_id__date_hour.bb130d46b0": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__ad_squad_history_ad_squad_id___fivetran_synced.31dfa7ee5e": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__campaign_history_campaign_id___fivetran_synced.a859a3be5e": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_history_creative_id___fivetran_synced.f6bdc9dc8c": [], "test.snapchat_ads_source.dbt_utils_unique_combination_of_columns_stg_snapchat__creative_url_tag_history_creative_id__param_key.03dc61a57c": [], "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id.9d930c85d7": [], "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id.a419f1ff64": [], "test.linkedin.not_null_linkedin__ad_adapter_creative_id.5ff26de9ba": [], "source.microsoft_ads_source.microsoft_ads.ad_history": [], "source.microsoft_ads_source.microsoft_ads.campaign_history": [], "source.microsoft_ads_source.microsoft_ads.ad_group_history": [], "source.microsoft_ads_source.microsoft_ads.account_history": [], "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": [], "source.linkedin_source.linkedin.ad_analytics_by_creative": [], "source.linkedin_source.linkedin.creative_history": [], "source.linkedin_source.linkedin.campaign_history": [], "source.linkedin_source.linkedin.campaign_group_history": [], "source.linkedin_source.linkedin.account_history": [], "source.google_ads_source.adwords.ad_final_url_history": [], "source.google_ads_source.adwords.ad_stats": [], "source.google_ads_source.adwords.ad_history": [], "source.google_ads_source.adwords.ad_group_history": [], "source.google_ads_source.adwords.campaign_history": [], "source.google_ads_source.adwords.account": [], "source.google_ads_source.adwords.final_url_performance": [], "source.google_ads_source.adwords.click_performance": [], "source.google_ads_source.adwords.criteria_performance": [], "source.pinterest_source.pinterest_ads.pin_promotion_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_history": [], "source.pinterest_source.pinterest_ads.campaign_history": [], "source.pinterest_source.pinterest_ads.ad_group_history": [], "source.pinterest_source.pinterest_ads.advertiser_history": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.ad_account_history": [], "source.snapchat_ads_source.snapchat_ads.ad_history": [], "source.snapchat_ads_source.snapchat_ads.ad_hourly_report": [], "source.snapchat_ads_source.snapchat_ads.ad_squad_history": [], "source.snapchat_ads_source.snapchat_ads.campaign_history": [], "source.snapchat_ads_source.snapchat_ads.creative_history": [], "source.snapchat_ads_source.snapchat_ads.creative_url_tag_history": [], "source.twitter_ads_source.twitter_ads.account_history": [], "source.twitter_ads_source.twitter_ads.campaign_history": [], "source.twitter_ads_source.twitter_ads.line_item_history": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_history": [], "source.twitter_ads_source.twitter_ads.tweet_url": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_report": []}}